<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sou-Nan-De-Gesu</title><link>https://www.soudegesu.com/en/</link><description>Recent content on Sou-Nan-De-Gesu</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 31 Jul 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://www.soudegesu.com/en/feed.xml" rel="self" type="application/rss+xml"/><item><title>Ansible playbook configuration for MySQL8 (how to change root password etc.)</title><link>https://www.soudegesu.com/en/mysql/mysql8-password/</link><pubDate>Tue, 31 Jul 2018 00:00:00 +0000</pubDate><guid>https://www.soudegesu.com/en/mysql/mysql8-password/</guid><description>MySQL major version 8 was released on April 2018. I introduce how to write MySQL 8 ansible playbook.
Motivation I usually use AWS. AWS has a database managed service called RDS, and RDS supports MySQL 5.x series. To conduct in-house training using MySQL 8, I needed to make AMI of MySQL 8 with ansible.
Environment CentOS 7 Ansible 2.6.1 Packer 1.1.3 Configuration sample of ansible playbook In this case, I describe only the main task definition part in Ansible, I omit Packer configuration because it becomes redundant.</description></item><item><title>Change system clock on Amazon Linux2(systemd)</title><link>https://www.soudegesu.com/en/linux/systemd_clock/</link><pubDate>Sat, 09 Jun 2018 00:00:00 +0000</pubDate><guid>https://www.soudegesu.com/en/linux/systemd_clock/</guid><description>Motivation When I migrate Amazon Linux to Amazon Linux2, I investigate how to change system clock on Linux server working with systemd. This post is technical memo for myself.
Change system clock System clock is calculated by /etc/adjtime that uses hardware clock. If OS working with systemd dosen&amp;rsquo;t have /etc/adjtime, UTC is default.
cat /etc/adjtime &amp;gt; 0.0 0 0.0 &amp;gt; 0 &amp;gt; UTC Now check the system clock with timedatectl command.</description></item><item><title>It&#39;s better to use DNS verification for verification of SSL certificate issued by AWS Certification Manager</title><link>https://www.soudegesu.com/en/aws/validate-certification-manager/</link><pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate><guid>https://www.soudegesu.com/en/aws/validate-certification-manager/</guid><description>Domain verification with Route 53 in Certification Manager became available In November 2017, Domain validation by DNS records of Route 53 was supported as a verification method when AWS Certification Manager(ACM) SSL certificate was acquired. This update has a very great advantage not only for acquiring SSL certificates but also for updating SSL certificates.
Changes in issuing SSL certificates Validation by email is troublesome Conventionally, in order to verify the domain of SSL certificate at ACM, we click on the link in the body of the received email, and push the approval button in the web page.</description></item><item><title>Setting to avoid python and anaconda conflict using pyenv and pyenv-virtualenv</title><link>https://www.soudegesu.com/en/python/pyenv/anaconda/</link><pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate><guid>https://www.soudegesu.com/en/python/pyenv/anaconda/</guid><description>Introduction I have been using pyenv only to switch versions of python in local environments. However, recently I use anaconda more often. Since python and anaconda conflict when executing activate command, I decided to use pyenv-virtualenv.
Goals Switch python version in one machine Switch the python distribution (anaconda in this case) Resolve conflict between anaconda and pyenv when I execute activate command Activate anaconda without executing the command with full path Both 1 and 2 above are able to solved with pyenv and 3 with pyenv-virtualent.</description></item><item><title>Start mysql docker container with docker-compose</title><link>https://www.soudegesu.com/en/docker/docker-compose/mysql/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://www.soudegesu.com/en/docker/docker-compose/mysql/</guid><description>In the previous article, I can start mysql docker container by using the docker run command after executing docker build.
Personally, I like the lesser option of cli, so this time I&amp;rsquo;d like to start docker-compose a bit easier to start up.
Install docker-compose Let&amp;rsquo;s install docker-toolbox from the following site. Docker-compose is also included in the download.
https://docs.docker.com/toolbox/ Docker-compose provides functions to easily manage multiple containers. In this article, only mysql is started with a container, but since setting up system components and controlling the order of activation can only be described in yaml file, it is highly readable and easy to manage even with VCS.</description></item><item><title>Create a Docker image with docker build command</title><link>https://www.soudegesu.com/en/docker/image/build/</link><pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.soudegesu.com/en/docker/image/build/</guid><description>This post is a personal note for building mysql container using Docker.
Update Docker daemon In my case, the version of docker was old, so I downloaded docker for Mac from the official website and updated docker daemon.
Check docker version.
1docker version 2 3Client: 4 Version: 1.13.0 5 API version: 1.25 6 Go version: go1.7.3 7 Git commit: 49bf474 8 Built: Wed Jan 18 16:20:26 2017 9 OS/Arch: darwin/amd64 10 11Server: 12 Version: 1.</description></item></channel></rss>