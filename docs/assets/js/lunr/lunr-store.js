var store = [{
        "title": "Docker buildコマンドのimage作成〜コンテナ起動まで",
        "excerpt":"自宅PC(mac)で簡単なアプリケーションを作ろうと思い、Dockerを使ってmysqlを構築しようとした際の備忘録として残しておきます。Dockerfile を作成するまず、dockerのバージョンが古かったので、公式サイトからmac用のdockerを再度ダウンロードし、アップデートしておきます。# docker versionClient: Version: 1.13.0 API version: 1.25 Go version: go1.7.3 Git commit: 49bf474 Built: Wed Jan 18 16:20:26 2017 OS/Arch: darwin/amd64Server: Version: 1.13.0 API version: 1.25 (minimum version 1.12) Go version: go1.7.3 Git commit: 49bf474 Built: Wed Jan 18 16:20:26 2017 OS/Arch: linux/amd64 Experimental: true以下のような簡単なDockerfileを作成し、プロジェクトのルートにおいておきます。今回はmysql公式のdocker imageを使用することにしましょう。FROM mysqlMAINTAINER soudegesuRUN...","categories": ["docker"],
        "tags": ["docker","image","Dockerfile"],
        "url": "https://www.soudegesu.com/docker/image/build",
        "teaser":"https://www.soudegesu.com/assets/images/soudegesu.jpg"},{
        "title": "docker-composeを使ってmysql dockerコンテナを起動する",
        "excerpt":"前回の記事で docker build からの docker run コマンドを使用することでmysqlのdockerコンテナの起動ができました。個人的にはcliのオプション指定が長くなっていくのがあまり好きではないので、今回はdocker-composeを使用して、もう少しお手軽に起動にこぎつけたいと思います。docker-compose をインストールする以下のサイトからdocker-toolboxをインストールしましょう。その中にdocker-composeも含まれています。[https://www.docker.com/products/docker-toolbox:embed:cite]そもそもdocker-composeは複数のコンテナ管理を容易に行う機能を提供してくれるものです。今回はmysqlコンテナでしか利用しませんが、システムコンポーネントの設定や起動順序の制御をyamlファイルに記載するだけで良いので、可読性が高く、VCSでも管理がしやすいです。例えば、以下のようなDockerfileがあったとします。FROM mysql:latestRUN { \\ echo '[mysqld]'; \\ echo 'character-set-server=utf8'; \\ echo 'collation-server=utf8_general_ci'; \\ echo '[client]'; \\ echo 'default-character-set=utf8'; \\} &gt; /etc/mysql/conf.d/charset.cnfEXPOSE 3306CMD [\"mysqld\"]それを呼び出すdocker-compose.ymlを作成します。mysql: build: . dockerfile: Dockerfile ports: - \"3306:3306\" environment: - MYSQL_ROOT_USER=root - MYSQL_ROOT_PASSWORD=root - MYSQL_DATABASE=soudegesu - MYSQL_USER=soudegesu - MYSQL_PASSWORD=soudegesu volumes: -...","categories": ["docker","docker-compose"],
        "tags": [],
        "url": "https://www.soudegesu.com/docker/docker-compose/mysql",
        "teaser":"https://www.soudegesu.com/assets/images/soudegesu.jpg"},{
        "title": "zsh から fish (shell) へお引っ越しを試みた話",
        "excerpt":"fish との出会いこれは本当に偶然の出会いで、「『大きなスクリーンにソースコードを映して、周囲からいろいろヤジ飛ばされながら、ナビゲーターとドライバーとでペアプロする』あのあれ、なんだったかな？確か頭の方が”fish”みたいな音じゃなかったかな？」と音を頼りに「fish プログラミング」というキーワードで検索したところ、fish shell がヒットしたのであった。仕事用もプレイベート用Macもzshを設定していて、個人的にはそれなりに満足していたのですが、色々zshにインストールしていたこともあって、起動やキー入力に若干もたつきを感じていたのもalternative factでしたので、ちょっと試してみようかなと思ったのが始まりです。fishとはfish のfishは Friendly interactive shell の略でユーザフレンドリーさを売りにしたUNIX shellとのことです。どのあたりがユーザーフレンドリーか、というとざっと以下のようです。 コマンドのautocompleteやシンタックスハイライト web上でカラーチョイスができるカラフルなターミナル 健全でシンプルな文法(bash等とは若干違うらしい) manページの自動生成と親切なヘルプメッセージもちろん、以前使用していたzshでも.zshrcに設定を入れたり、プラグインやテーマをインストールすることで自分好みの使いやすいターミナルに仕上げることができます。セットアップ手順fishのインストールHomebrewを使用してfishをインストールします。(これ以外にもMacportsやインストーラー、Windows版、tarboll等様々サポートしていますので公式サイトを確認してください)brew install fishデフォルトのシェル切り替え/etc/shells を確認すると、使用可能なshellを確認できます。&gt; cat /etc/shells# List of acceptable shells for chpass(1).# Ftpd will not allow users to connect who are not using# one of these shells./bin/bash/bin/csh/bin/ksh/bin/sh/bin/tcsh/bin/zsh今のままでは fish は使用できませんので末尾に1行fishのパスを追記しましょう。&gt;which fish/usr/local/bin/fish #これを/etc/shellsに追記以下のコマンドでターミナル起動時のログインシェルをfishに切り替えることができます。chsh -s /usr/local/bin/fishターミナルを再起動するターミナルを再起動することでシェルが切り替わっていることを確認できます。個人的にはもう少しカラフルでかっこよくしたいのでプラグインを入れる方法を模索します。fisherman でpluginをインストールするfishの場合、fisherman がplugin...","categories": ["fish"],
        "tags": ["sh","fish","zsh"],
        "url": "https://www.soudegesu.com/sh/fish/",
        "teaser":"https://www.soudegesu.com/assets/images/soudegesu.jpg"},{
        "title": "TensorFlowのオンライン学習サイトを利用してみる",
        "excerpt":"機械学習を身につけたい意欲ここ1年で”AI”や”人工知能”のワードを耳にする機会は大変増えました。NHKの朝のニュースでも頻繁に見るくらいですので、世間一般の方でも「なんかすごい技術」として認知はされているのでしょう。先日、ダボス会議が開催された際に、以下のような発言がなされたことがニュースとなったことも記憶に新しいことと思います。  「ダボス会議」で世界のトップリーダーたちが懺悔 「AIの成長が早すぎて超ヤバい。認識が甘かった」これから加速度的に発展し、社会進出してくる機械学習を用いた製品やサービス。このムーブメントはIT業界に関わらず、他の業界にも浸透していくことでしょう。私のような今まで機械学習を業務で利用していなかったエンジニアも、程度の差こそあれ、機械学習の理解に努めなければ完全なブラックボックス製品を使うだけの1エンドユーザーに終わってしまうのではないか、という焦りがあります。アルゴリズムを見つけたり、最適化したり、というのはハードルが高いので、「ライブラリが使える」ようになることを直近の目標にしたいと思います。筆者のレベル感  python はまぁ書ける  coureraの機械学習のコースは受講済  ゼロから作るDeepLearning は一通り読み切った  TensorFlowの公式サイトのMNISTサンプルは実行して「お、おぅ。。」となって中断しているTensorFlowを学べるサイトオンラインでTensorFlowを学べるサイトがあるのかを探してみたところ、kadenzeというサイト「Creative Applications of Deep Learning with TensorFlow」という学習コースがありました。  Creative Applications of Deep Learning with TensorFlow全体としては1h程度の動画 ✕ 5枠にて構成されていました。最初のコースは無料で受講できるようなので、早速登録してみることに。会員登録作業が一通り終わると、「講義で利用するリソースがgithub上に上がっているのでcloneしてね」ということが判明。それが以下。  pkmital/CADLリポジトリ内にjupyter notebook用のファイル(.ipynb)があるので、自分のマシンにjupyter notebookとtensorflowがインストールされていればすんなり起動&amp;実行が可能です。(Dockerもあると良い)結構、notebookファイル内にmarkdown形式の説明文が記載されているので、もしかしたら動画を見なくても感じがつかめるかもしれません。動画を見てみた感想  全編英語(当たり前ですが)  英語字幕の設定が可能          ただし、動画毎に字幕設定が必要(設定が引き継げない)のが若干面倒        約1h時間の枠内で更に細かい動画に分割されていた。(introduction 2min、 about XXX 14minのように)  いきなり文脈が飛ぶときがあって、置いていかれることがある          「なぜ」の部分の説明が割愛されているときがある      そこはForum使って議論 &amp; QA しなさい、といった感じなのでしょうか        .ipynbのソースに解答が既に打ち込まれてしまっているので、動画を追いかけながらタイプしたい方は別途環境を構築した方がよいかも。まとめ実はまだ5枠全部受けきれてないです。自身での内容の整理も含めて、これからまとめていきたいと思います。","categories": ["tensorflow"],
        "tags": [],
        "url": "https://www.soudegesu.com/tensorflow/tensorflow-online-course/",
        "teaser":"https://www.soudegesu.com/assets/images/soudegesu.jpg"},{
        "title": "pyenvとpyenv-virtualenvでanacondaと共存する",
        "excerpt":"はじめに今までローカル環境のpythonを切り替えるためにpyenvのみを利用してきました。anacondaを使用する機会も増えてきたので、pyenv installからのpyenv localコマンドでanaconda環境が構築するのですが、activateの部分をもう少しスマートに行いたいため、 pyenv-virtualenv も用いる方法に変更します。今回やりたいこと 1台のマシンの中で使用するpythonのバージョンを切り替えたい さらに言えば、ディストリビューションも切り替えたい(anaconda) anacondaとpyenvの activate の競合を解決したい anacondaをactivateする際にフルパスで指定するのを避けたい 1と2はpyenvで、3はpyenv-virtualenvで解決できることになります。環境 MacOSX Yosemite homebrew zshセットアップ手順仮想環境切り替え用のモジュールをインストール# pyenvをインストールするbrew install pyenv#pyenv-virtualenvをインストールするbrew install pyenv-virtualenvシェル起動時の設定ファイルを修正 .zshrcに以下を追記する # pyenvの設定export PYENV_ROOT=\"${HOME}/.pyenv\"if [ -d \"${PYENV_ROOT}\" ]; then export PATH=${PYENV_ROOT}/bin:${PYENV_ROOT}/shims:${PATH} eval \"$(pyenv init -)\"fi# pyenv-virtualenvの設定if which pyenv-virtualenv-init &gt; /dev/null; then eval \"$(pyenv virtualenv-init -)\"; fi ターミナルを再起動する(sourceコマンドでの再読込でも可)Pythonの仮想環境を作成するテスト用のディレクトリを作成hoge ディレクトリ配下を任意のpythonバージョンで動作するようにしましょう。pythonのバージョンを確認しておきます。mkdir hogecd...","categories": ["pyenv","anaconda"],
        "tags": ["python","pyenv","pyenv-virtualenv","anaconda"],
        "url": "https://www.soudegesu.com/python/pyenv/anaconda",
        "teaser":"https://www.soudegesu.com/assets/images/soudegesu.jpg"},{
        "title": "Anaconda環境にTensorflowをインストールする",
        "excerpt":"ここから少しづつ、細切れになってしまいますが、tensorflowで学んだことを書いていこうと思います。今回はanacondaの仮想環境に対して、tensorflowをインストールします。環境 Anaconda 4.3.0 python 3.5発生した問題tensorflowのversion 1がリリースされましたので、anacondaで構築した仮想環境に対して以下のようにtensorflowをインストールしようとしたところ、まだ対応しているtensorflowのバージョンがない、とエラーが出てしまいました。pip3 install tensorflow 解決策そのため、以下のようにコマンドを変更します。pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-1.0.0-py3-none-any.whl備考anaconda の方でのパッケージ管理でインストール可能かを調べてみました。 pypianaconda search -t pypi tensorflow&gt;Using Anaconda API: https://api.anaconda.org&gt;Run 'anaconda show &lt;USER/PACKAGE&gt;' to get more details:&gt;Packages:&gt; Name | Version | Package Types | Platforms&gt; ------------------------- | ------ | --------------- | ---------------&gt; dustindorroh/tensorflow | 0.6.0 | pypi |&gt;...","categories": ["tensorflow"],
        "tags": ["tensorflow"],
        "url": "https://www.soudegesu.com/tensorflow/tensorflow-anaconda/",
        "teaser":"https://www.soudegesu.com/assets/images/soudegesu.jpg"},{
        "title": "ブログ(静的サイト)をHUGOを使って作成する",
        "excerpt":"本サイトでは jekyll を使用してブログを作成しているのですが、他にも HUGO や hexo を使用されている方も多くいらっしゃるようなので、今回はHUGOを使用してブログコンテンツを作成する方法を紹介したいと思います。 ゴール 事前準備 HUGOをインストールする前に… HUGOのインストール(MacOSの場合) HUGOを使ってコンテンツを作成する HUGOテンプレートで生成する サイトのデザイン(theme)を設定する themeを探す themeをインストールする themeを設定する 記事を作成する (余談)archetypes/defaults.md を利用して手間を減らす コンテンツの出来栄えをローカル環境で確認する コンテンツをビルドする まとめゴール HUGOで静的サイトの作成ができるようになる事前準備HUGOをインストールする前に…以下がローカルマシン上にインストールされていると以降の手順が捗ります。 Homebrew gitHUGOのインストール(MacOSの場合)Homebrewを使用するとHUGOを簡単にインストールできます。#brew install hugoHUGOのバージョンを確認してみましょう。#hugo versionHugo Static Site Generator v0.20.7 darwin/amd64 BuildDate: 2017-05-05T22:14:37+09:00v0.20.7(2017/05時点で最新)がインストールされていることがわかります。HUGOを使ってコンテンツを作成するHUGOテンプレートで生成するhugo new siteのサブコマンドを実行するだけで静的サイトのテンプレートをgenerateしてくれます。今回は hoge というディレクトリ配下に作成します。#hugo new site hogehoge 配下で tree コマンドを実行すると以下のようなファイルレイアウトが生成されていることがわかります。#cd hoge#tree -L 1 .├──...","categories": ["blog"],
        "tags": ["hugo","blog","site"],
        "url": "https://www.soudegesu.com/blog/hugo/",
        "teaser":"https://www.soudegesu.com/assets/images/soudegesu.jpg"},{
        "title": "AWS Certification ManagerのSSL証明書の検証にはDNS検証を使った方が良い",
        "excerpt":"Route53でCertification Managerのドメイン検証ができるようになった SSL証明書”発行”の違い E-mail検証は手間がかかる DNS検証によって検証ステップが格段に簡素になる SSL証明書”更新”の違い ACMのSSL証明書有効期限は13ヶ月 ACM更新のプロセス ①AWS側によるACMの自動検証と自動更新 ②ドメイン管理者に催促メールを通知 ③AWSアカウントに催促メールを通知 ④手動でのACM検証作業 E-mail検証の自動更新条件は複雑 DNS検証の自動更新条件は単純 まとめ 参考にさせていただいたページRoute53でCertification Managerのドメイン検証ができるようになったDNS を使って AWS Certificate Manager の検証を簡単にの記事にも記載があるように、2017/11に AWS Certification Manager(以下ACM) のSSL証明書取得の際の検証手順に Route53のDNS検証 が追加されました。実はこれは、ACMで取得したSSL証明書の 取得 だけではなく 更新 においてもとても大きな利点があるので、今回はそれを紹介します。SSL証明書”発行”の違いE-mail検証は手間がかかる従来、ACMにてSSL証明書を取得する際のドメイン検証の方法は、Certificatioin Managerで証明書発行依頼を出した後、受信したE-mailの本文に記載されている一時リンクを踏んで承認ボタンを押す、という手続きを踏んでいました。その際の注意点は、AWSからの検証確認メールを受信できるメール受信箱が必要になる ことでした。私の場合、会社が取得しているドメインのサブドメインを委譲してもらい新規プロダクトを実装することが多いため、身近にいないドメイン管理者(別部署や別会社)の受信箱にのみメールが届いてしまい、自分のタイミングで承認ボタンを押すことができませんでした。そのため、私の場合は自分のAWSアカウント内にE-mail検証のためのメール受信箱を作成していました。自前のAWSアカウント内で検証を完結させるためには、 受信ボックス代わりになるS3バケットを作成し Route53にTXTレコードやMXレコードを作成し SNSで受けたメールをS3に振り分け、 S3バケットで受け取ったメール本文をダウンロードして、リンクを踏むという手順を踏まなくてはいけません。こちらの設定の手順はクラスメソッドさんのブログ「 [ACM] SSL証明書発行時のドメイン認証メールをSESで受け取ってみた 」に掲載されておりますので、興味のある方はご参照ください。DNS検証によって検証ステップが格段に簡素になるDNS検証ではRoute53に追加されたCNAMEレコードを用いてドメインの有効性を確認します。そのため 「Create record in Route 53」 でCNAMEレコードを作成\bし 少し待つ(10分くらい?)で検証が終了\bします。ね、簡単でしょう？SSL証明書”更新”の違いACMのSSL証明書有効期限は13ヶ月ACMで発行したSSL証明書の有効期限は13ヶ月です。そのため、1年程経過したらSSL証明書の更新作業が発生します。これはSSL証明書を運用されている人でしたら毎度のことなのですが、 証明書の更新時期を忘れないよう に通知の仕組みを入れたり、引き継ぎをしたり様々な工夫をされていることかと思います。ACM更新のプロセスまず、ACM\bのSSL証明書更新の全体の流れを\b抑えましょう。①AWS側によるACMの自動検証と自動更新ACM期限切れの60日前に自動更新可能なものかAWS側で検証し、検証に成功した場合には自動更新を実施してくれます。(自動更新の条件は後述します)②ドメイン管理者に催促メールを通知①の自動更新に失敗した場合には、証明書に記載されているドメインの管理者に対してメールが通知されます。(WHOISに記載されているメールアドレスもしくは、ドメイン名の前にadmin@を付加したメールアドレスになります)③AWSアカウントに催促メールを通知②のメールからも検証が確認されない場合、AWSアカウントに登録されているメールアドレスに対して通知されます。④手動でのACM検証作業メールに記載されたURLにアクセスし、承認ボタンを押すことでACMの検証が完了します。ただし、実際にACMが更新されるまでに数時間程度のタイムラグが発生することをAWSでは謳っています。①にも記載の通り、素晴らしいことにACMはSSL証明書を自動更新することができます。ただし、自動更新するためには条件がありますので、以下に説明します。E-mail検証の自動更新条件は複雑E-mailで検証したSSL証明書の自動更新の条件は以下になります。...","categories": ["aws"],
        "tags": ["AWS","ACM","route53","ssl","validate"],
        "url": "https://www.soudegesu.com/aws/validate-certification-manager",
        "teaser":"https://www.soudegesu.com/assets/images/soudegesu.jpg"},{
        "title": "JavaプロジェクトをModule System(Java9のProject Jigsaw)にマイグレーションするステップ",
        "excerpt":"はじめに 注意点 どうなる？これからのJava 半年に1度訪れるJava SEのリリース ウォッチすべき話題はJavaのサポート期限 Java8はいつまでサポートされるか 他にも気をつけておいた方が良いこと Module Systemへのマイグレーションに挑戦 Step 1. Module Systemの基礎を勉強する Step 2. 依存ライブラリのバージョンアップを行う ライブラリのリリース\bノートを読んで「大丈夫だな」と\b早合点するのは危険 Step 3. Unnamed Moduleにマイグレーションする Step 4. Named Moduelにマイグレーションする Step 5. 負荷試験とリソースモニタリングをする まとめ 参考にさせていただいたページはじめに今回はJava 9\bで追加されたModule System移行に関して説明します。自身で手を動かすことで、\b\bJavaのプロダクションコードをJPMSに適用するための作業手順の\b一定の目処がたったのでまとめておきます。実は 社内向けにも同様の発表 はしています。少し\b\bネガティブなニュアンスで資料を書いていますが、社内の(いろんな意味で)危機意識を煽るため、という背景もあったので、その点ご了承ください。\u001c注意点2018/1時点での情報を基に記載をしていますので、今後変更になる可能性があります。最新の情報と照らし合わせながら適宜情報の補填を行っていただければと思います。どうなる？これからのJavaここではまず最初に、足元のJPMSの話ではなく、Javaエンジニアが把握しておくべき今後の全体的な流れについて触れておきます。半年に1度訪れるJava SEのリリース昨年のJava Oneにて Java9 以降のJavaのリリースロードマップが発表\bされました。要点だけまとめると以下\bになります。 リリース頻度は半年に1度(次は2018/3、その次は2018/9) バージョニングは 9, 10, 11 Oracle社の\bページでは yy.MM 形式で記載されているで注意 \b\b\b時間軸でリリースがされていくため、\b\b期限までに実装終了したフィーチャーがリリース対象\bの機能として取り込まれる early access...","categories": ["java"],
        "tags": ["java","java9","modular","jigsaw","gradle","springboot","modulepath","classpath","JPMS"],
        "url": "https://www.soudegesu.com/java/java9-modularity/",
        "teaser":"https://www.soudegesu.com/assets/images/soudegesu.jpg"}]
