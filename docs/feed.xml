<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="https://www.soudegesu.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.soudegesu.com/" rel="alternate" type="text/html" /><updated>2018-05-02T21:29:45+09:00</updated><id>https://www.soudegesu.com/</id><title type="html">そうなんでげす</title><subtitle>soudegesuのtechブログ。普段仕事では使わない技術を中心に書いていくので入門系記事が多くなると思っていたけど、書き始めたらいい感じにいろいろまぜこぜになってきました。とりあえず、書きたくなったらいろいろ書きます。</subtitle><author><name>soudegesu</name></author><entry><title type="html">Colaboratoryは機械学習ライブラリ使いのための最高のツールだった</title><link href="https://www.soudegesu.com/python/colaboratory-is-a-good-tool-for-tensorflow-user/" rel="alternate" type="text/html" title="Colaboratoryは機械学習ライブラリ使いのための最高のツールだった" /><published>2018-05-02T00:00:00+09:00</published><updated>2018-05-02T00:00:00+09:00</updated><id>https://www.soudegesu.com/python/colaboratory-is-a-good-tool-for-tensorflow-user</id><content type="html" xml:base="https://www.soudegesu.com/python/colaboratory-is-a-good-tool-for-tensorflow-user/">&lt;p&gt;普段 &lt;a href=&quot;http://jupyter.org/&quot;&gt;Jupter notebook&lt;/a&gt; で統計処理や機械学習ライブラリを触っている開発者の方は多いはず。今回は巷で話題の &lt;a href=&quot;https://colab.research.google.com/&quot;&gt;Colaboratory&lt;/a&gt; を触ってみました。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#colaboratoryとは&quot; id=&quot;markdown-toc-colaboratoryとは&quot;&gt;Colaboratoryとは&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#colaboratoryの特徴&quot; id=&quot;markdown-toc-colaboratoryの特徴&quot;&gt;Colaboratoryの特徴&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#利用料がタダ&quot; id=&quot;markdown-toc-利用料がタダ&quot;&gt;利用料がタダ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#gpuも使える&quot; id=&quot;markdown-toc-gpuも使える&quot;&gt;GPUも使える&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#google-driveと連携できる&quot; id=&quot;markdown-toc-google-driveと連携できる&quot;&gt;Google Driveと連携できる&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#デフォルトでスニペットが揃っている&quot; id=&quot;markdown-toc-デフォルトでスニペットが揃っている&quot;&gt;デフォルトでスニペットが揃っている&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#実行環境が選択できる&quot; id=&quot;markdown-toc-実行環境が選択できる&quot;&gt;実行環境が選択できる&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#ローカルマシンの設定&quot; id=&quot;markdown-toc-ローカルマシンの設定&quot;&gt;ローカルマシンの設定&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#colaboratoryの設定&quot; id=&quot;markdown-toc-colaboratoryの設定&quot;&gt;Colaboratoryの設定&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#注意事項&quot; id=&quot;markdown-toc-注意事項&quot;&gt;注意事項&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#長時間の実行には向かない&quot; id=&quot;markdown-toc-長時間の実行には向かない&quot;&gt;長時間の実行には向かない&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#コードをクラウド環境に乗せることになる&quot; id=&quot;markdown-toc-コードをクラウド環境に乗せることになる&quot;&gt;コードをクラウド環境に乗せることになる&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ランタイム切り替え時にはモジュールの差分を意識する&quot; id=&quot;markdown-toc-ランタイム切り替え時にはモジュールの差分を意識する&quot;&gt;ランタイム切り替え時にはモジュールの差分を意識する&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考にさせていただいたサイト&quot; id=&quot;markdown-toc-参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;colaboratoryとは&quot;&gt;Colaboratoryとは&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://colab.research.google.com/&quot;&gt;Colaboratory&lt;/a&gt; はGoogleから提供されている&lt;a href=&quot;http://jupyter.org/&quot;&gt;Jupter notebook&lt;/a&gt; 環境です。&lt;/p&gt;

&lt;p&gt;実行環境はGoogle側のクラウドを使わせていただけるので、ユーザの &lt;strong&gt;環境構築は不要&lt;/strong&gt; です。&lt;/p&gt;

&lt;p&gt;ちなみに、Googleアカウントが無くても利用できますが、Googleアカウントと連携した方がメリットが大きいので、
作成することをオススメします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180502/colaboratory_top.png&quot; alt=&quot;colaboratory_top&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以降では、早速使ってみたColaboratoryの特徴をまとめました。&lt;/p&gt;

&lt;h2 id=&quot;colaboratoryの特徴&quot;&gt;Colaboratoryの特徴&lt;/h2&gt;
&lt;h3 id=&quot;利用料がタダ&quot;&gt;利用料がタダ&lt;/h3&gt;

&lt;p&gt;まず、これが最大のメリットと言えるでしょう。
&lt;a href=&quot;https://research.google.com/colaboratory/faq.html&quot;&gt;よくある質問&lt;/a&gt; にも記載があったので引用します。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Is it free to use?&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;Yes. Colaboratory is a research project that is free to use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;無料です。最高です。&lt;/p&gt;

&lt;p&gt;なお、特に記載が見当たらなかったので、後述の &lt;strong&gt;GPU利用も無料&lt;/strong&gt; で利用できると思います。これは有りがたい。&lt;/p&gt;

&lt;h3 id=&quot;gpuも使える&quot;&gt;GPUも使える&lt;/h3&gt;

&lt;p&gt;なんと、&lt;strong&gt;実行環境にGPUも選択できるのです&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;ローカルマシンだと、全力でファンが回転して、ブラウジングにすら支障が出ます。&lt;/p&gt;

&lt;p&gt;ただでさえクラウド上に計算リソースを逃がせるだけでもありがたいのに、GPUを使わせてもらえるなんて最高です。&lt;/p&gt;

&lt;p&gt;設定の手順としては以下の2ステップで終了です。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;メニューから [Runtime] &amp;gt; [Change runtime type] を選択&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180502/switch_to_gpu_1.png&quot; alt=&quot;switch_to_gpu_1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Hardware accelerator を「GPU」に変更して「Save」&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180502/switch_to_gpu_2.png&quot; alt=&quot;switch_to_gpu_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;notebook上で以下のコードを実行すれば、GPUに変更されたことを確認できます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import tensorflow as tf
tf.test.gpu_device_name()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;デバイス名が表示されていますね。(CPUの場合は空文字が返ってきます)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180502/switch_to_gpu_3.png&quot; alt=&quot;switch_to_gpu_3&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;google-driveと連携できる&quot;&gt;Google Driveと連携できる&lt;/h3&gt;

&lt;p&gt;Google のサービスだけあって、Google Driveとの連携も容易です。
notebookが &lt;code class=&quot;highlighter-rouge&quot;&gt;.ipynb&lt;/code&gt; 形式で連携できるのが嬉しいポイントです。&lt;/p&gt;

&lt;p&gt;Colaboratoryで作成したプログラムは自分のGoogle Driveに &lt;code class=&quot;highlighter-rouge&quot;&gt;.ipynb&lt;/code&gt; で保存されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180502/save_to_drive.png&quot; alt=&quot;save_to_drive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;逆に、既にローカルマシン上に存在する &lt;code class=&quot;highlighter-rouge&quot;&gt;.ipynb&lt;/code&gt; ファイルのアップロードには メニューから [Upload notebook] を選択し、
ファイルをドラッグ&amp;amp;ドロップするだけで読み込むことができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180502/upload_notebook.png&quot; alt=&quot;upload_notebook&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;もちろん、Google Drive上にアップロードした &lt;code class=&quot;highlighter-rouge&quot;&gt;.ipynb&lt;/code&gt; ファイルをColaboratoryで開くことも可能です。
Google Drive上のアイコンが見た目的に違いますし、開こうとするとポップアップが出たりしますが、大丈夫でした。&lt;/p&gt;

&lt;h3 id=&quot;デフォルトでスニペットが揃っている&quot;&gt;デフォルトでスニペットが揃っている&lt;/h3&gt;

&lt;p&gt;Colaboratory はJupyter notebookのGUIを少し拡張していて、コードスニペットの機能を持っています。
コードスニペットを呼び出して、notebookのcellに埋め込むことができます。
特にGoogle Driveと連携する場合などには、Google APIの呼び出しのコード片を貼り付けるだけで済むので重宝します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180502/use_snipet.png&quot; alt=&quot;use_snipet&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ショートカットキーもバインドされていて、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Command/Ctrl + Alt + P&lt;/code&gt; でスニペットウィンドウが表示されるので
覚えておくのが良さそうです。&lt;/p&gt;

&lt;h3 id=&quot;実行環境が選択できる&quot;&gt;実行環境が選択できる&lt;/h3&gt;

&lt;p&gt;少し特殊なユースケースですが、ランタイムをColaboratoryからローカルマシンに切り替えることができます。
例えば、Colaboratoryで作成したコードをローカルマシンのGPUで動かしたい場合などが該当します。&lt;/p&gt;

&lt;p&gt;設定手順は少し特殊なので以下にまとめます。&lt;/p&gt;

&lt;h4 id=&quot;ローカルマシンの設定&quot;&gt;ローカルマシンの設定&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;jupyter notebookをインストールしておく&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install jupyter\[notebook\]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;serverextensionを有効にする&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install jupyter_http_over_ws
jupyter serverextension enable --py jupyter_http_over_ws
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Colaboratoryのアクセスを許可する&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jupyter notebook --NotebookApp.allow_origin='https://colab.research.google.com' --port=8888
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;colaboratoryの設定&quot;&gt;Colaboratoryの設定&lt;/h4&gt;

&lt;p&gt;上の手順でローカルマシン上でJupyter notebookが起動している状態にします。&lt;/p&gt;

&lt;p&gt;その後、画面右上側の「Connect」 メニューで「Connect to local runtime…」 を選択します。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180502/switch_runtime.png&quot; alt=&quot;switch_runtime&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;これでローカルマシンをランタイムとして実行できます。&lt;/p&gt;

&lt;h2 id=&quot;注意事項&quot;&gt;注意事項&lt;/h2&gt;

&lt;p&gt;Colaboratory を使う上での注意点を少しまとめました。&lt;/p&gt;

&lt;h3 id=&quot;長時間の実行には向かない&quot;&gt;長時間の実行には向かない&lt;/h3&gt;

&lt;p&gt;ColaboratoryではGPUも使うことができて大変ありがたいのですが、長時間専有して使うことは推奨されていないようです。
&lt;a href=&quot;https://research.google.com/colaboratory/faq.html&quot;&gt;よくある質問&lt;/a&gt; にも、
長時間の実行、特に仮想通貨のマイニングには使わないように、と記載がされていました。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;How may I use GPUs and why are they sometimes unavailable?&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;Colaboratory is intended for interactive use. Long-running background computations, particularly on
GPUs, may be stopped. Please do not use Colaboratory for cryptocurrency mining. Doing so is
unsupported and may result in service unavailability. We encourage users who wish to run continuous
or long-running computations through Colaboratory’s UI to use a local runtime.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ちなみに、 &lt;a href=&quot;https://stackoverflow.com/questions/49438284/google-colaboratory-with-gpu&quot;&gt;GPUを12時間以上実行しようとしたツワモノ&lt;/a&gt; の存在を確認しましたが、
連続稼働時間については公式から具体的な言及がなされていないので、Colaboratoryを商用環境的な用途では使わない方が懸命かもしれません。&lt;/p&gt;

&lt;h3 id=&quot;コードをクラウド環境に乗せることになる&quot;&gt;コードをクラウド環境に乗せることになる&lt;/h3&gt;

&lt;p&gt;これはColaboratoryに限らず、クラウドサービス利用における一般的な話になりますが、
ソースコード管理やデータの取扱いのガバナンスが厳しい企業では利用は難しいかもしれません。&lt;/p&gt;

&lt;p&gt;たとえ、用途が一時的であっても、クラウド上に自社の貴重な資産がアップロードされることになるからです。&lt;/p&gt;

&lt;h3 id=&quot;ランタイム切り替え時にはモジュールの差分を意識する&quot;&gt;ランタイム切り替え時にはモジュールの差分を意識する&lt;/h3&gt;

&lt;p&gt;当たり前ですが、ランタイムをColaboratoryからローカル環境に切り替える場合には、
ローカル環境にインストールしているPython モジュールとColaboratoryに差分があることを理解しておきましょう。&lt;/p&gt;

&lt;p&gt;具体的に言うと、以下のコードをColaboratoryとローカルのJupyter notebook上の両方で実行してみるとわかります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import pkg_resources
[pkg for pkg in pkg_resources.working_set]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ColaboratoryにデフォルトでインストールされているPythonモジュール&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[xgboost 0.7.post4 (/usr/local/lib/python3.6/dist-packages),
 wheel 0.31.0 (/usr/local/lib/python3.6/dist-packages),
 Werkzeug 0.14.1 (/usr/local/lib/python3.6/dist-packages),
 webencodings 0.5.1 (/usr/local/lib/python3.6/dist-packages),
 wcwidth 0.1.7 (/usr/local/lib/python3.6/dist-packages),
 urllib3 1.22 (/usr/local/lib/python3.6/dist-packages),
 uritemplate 3.0.0 (/usr/local/lib/python3.6/dist-packages),
 traitlets 4.3.2 (/usr/local/lib/python3.6/dist-packages),
 tornado 4.5.3 (/usr/local/lib/python3.6/dist-packages),
 testpath 0.3.1 (/usr/local/lib/python3.6/dist-packages),
 terminado 0.8.1 (/usr/local/lib/python3.6/dist-packages),
 termcolor 1.1.0 (/usr/local/lib/python3.6/dist-packages),
 tensorflow 1.7.0 (/usr/local/lib/python3.6/dist-packages),
 tensorboard 1.7.0 (/usr/local/lib/python3.6/dist-packages),
 sympy 1.1.1 (/usr/local/lib/python3.6/dist-packages),
 statsmodels 0.8.0 (/usr/local/lib/python3.6/dist-packages),
 six 1.11.0 (/usr/local/lib/python3.6/dist-packages),
 simplegeneric 0.8.1 (/usr/local/lib/python3.6/dist-packages),
 setuptools 39.1.0 (/usr/local/lib/python3.6/dist-packages),
 seaborn 0.7.1 (/usr/local/lib/python3.6/dist-packages),
 scipy 0.19.1 (/usr/local/lib/python3.6/dist-packages),
 scikit-learn 0.19.1 (/usr/local/lib/python3.6/dist-packages),
 scikit-image 0.13.1 (/usr/local/lib/python3.6/dist-packages),
 rsa 3.4.2 (/usr/local/lib/python3.6/dist-packages),
 requests 2.18.4 (/usr/local/lib/python3.6/dist-packages),
 requests-oauthlib 0.8.0 (/usr/local/lib/python3.6/dist-packages),
 pyzmq 16.0.4 (/usr/local/lib/python3.6/dist-packages),
 PyYAML 3.12 (/usr/local/lib/python3.6/dist-packages),
 PyWavelets 0.5.2 (/usr/local/lib/python3.6/dist-packages),
 pytz 2018.4 (/usr/local/lib/python3.6/dist-packages),
 python-dateutil 2.5.3 (/usr/local/lib/python3.6/dist-packages),
 pyparsing 2.2.0 (/usr/local/lib/python3.6/dist-packages),
 Pygments 2.1.3 (/usr/local/lib/python3.6/dist-packages),
 pyasn1 0.4.2 (/usr/local/lib/python3.6/dist-packages),
 pyasn1-modules 0.2.1 (/usr/local/lib/python3.6/dist-packages),
 ptyprocess 0.5.2 (/usr/local/lib/python3.6/dist-packages),
 psutil 5.4.5 (/usr/local/lib/python3.6/dist-packages),
 protobuf 3.5.2.post1 (/usr/local/lib/python3.6/dist-packages),
 prompt-toolkit 1.0.15 (/usr/local/lib/python3.6/dist-packages),
 portpicker 1.2.0 (/usr/local/lib/python3.6/dist-packages),
 plotly 1.12.12 (/usr/local/lib/python3.6/dist-packages),
 pip 10.0.1 (/usr/local/lib/python3.6/dist-packages),
 Pillow 4.0.0 (/usr/local/lib/python3.6/dist-packages),
 pickleshare 0.7.4 (/usr/local/lib/python3.6/dist-packages),
 pexpect 4.5.0 (/usr/local/lib/python3.6/dist-packages),
 patsy 0.5.0 (/usr/local/lib/python3.6/dist-packages),
 pandocfilters 1.4.2 (/usr/local/lib/python3.6/dist-packages),
 pandas 0.22.0 (/usr/local/lib/python3.6/dist-packages),
 pandas-gbq 0.4.1 (/usr/local/lib/python3.6/dist-packages),
 opencv-python 3.4.0.12 (/usr/local/lib/python3.6/dist-packages),
 olefile 0.45.1 (/usr/local/lib/python3.6/dist-packages),
 oauthlib 2.0.7 (/usr/local/lib/python3.6/dist-packages),
 oauth2client 4.1.2 (/usr/local/lib/python3.6/dist-packages),
 numpy 1.14.3 (/usr/local/lib/python3.6/dist-packages),
 notebook 5.2.2 (/usr/local/lib/python3.6/dist-packages),
 nltk 3.2.5 (/usr/local/lib/python3.6/dist-packages),
 networkx 2.1 (/usr/local/lib/python3.6/dist-packages),
 nbformat 4.4.0 (/usr/local/lib/python3.6/dist-packages),
 nbconvert 5.3.1 (/usr/local/lib/python3.6/dist-packages),
 mpmath 1.0.0 (/usr/local/lib/python3.6/dist-packages),
 mistune 0.8.3 (/usr/local/lib/python3.6/dist-packages),
 matplotlib 2.1.2 (/usr/local/lib/python3.6/dist-packages),
 MarkupSafe 1.0 (/usr/local/lib/python3.6/dist-packages),
 Markdown 2.6.11 (/usr/local/lib/python3.6/dist-packages),
 Keras 2.1.6 (/usr/local/lib/python3.6/dist-packages),
 jupyter-core 4.4.0 (/usr/local/lib/python3.6/dist-packages),
 jupyter-client 5.2.3 (/usr/local/lib/python3.6/dist-packages),
 jsonschema 2.6.0 (/usr/local/lib/python3.6/dist-packages),
 Jinja2 2.10 (/usr/local/lib/python3.6/dist-packages),
 ipython 5.5.0 (/usr/local/lib/python3.6/dist-packages),
 ipython-genutils 0.2.0 (/usr/local/lib/python3.6/dist-packages),
 ipykernel 4.6.1 (/usr/local/lib/python3.6/dist-packages),
 idna 2.6 (/usr/local/lib/python3.6/dist-packages),
 httplib2 0.11.3 (/usr/local/lib/python3.6/dist-packages),
 html5lib 0.9999999 (/usr/local/lib/python3.6/dist-packages),
 h5py 2.7.1 (/usr/local/lib/python3.6/dist-packages),
 grpcio 1.11.0 (/usr/local/lib/python3.6/dist-packages),
 googleapis-common-protos 1.5.3 (/usr/local/lib/python3.6/dist-packages),
 google-resumable-media 0.3.1 (/usr/local/lib/python3.6/dist-packages),
 google-colab 0.0.1a1 (/usr/local/lib/python3.6/dist-packages),
 google-cloud-translate 1.3.1 (/usr/local/lib/python3.6/dist-packages),
 google-cloud-storage 1.8.0 (/usr/local/lib/python3.6/dist-packages),
 google-cloud-language 1.0.1 (/usr/local/lib/python3.6/dist-packages),
 google-cloud-core 0.28.1 (/usr/local/lib/python3.6/dist-packages),
 google-cloud-bigquery 1.1.0 (/usr/local/lib/python3.6/dist-packages),
 google-auth 1.4.1 (/usr/local/lib/python3.6/dist-packages),
 google-auth-oauthlib 0.2.0 (/usr/local/lib/python3.6/dist-packages),
 google-auth-httplib2 0.0.3 (/usr/local/lib/python3.6/dist-packages),
 google-api-python-client 1.6.7 (/usr/local/lib/python3.6/dist-packages),
 google-api-core 1.1.1 (/usr/local/lib/python3.6/dist-packages),
 gast 0.2.0 (/usr/local/lib/python3.6/dist-packages),
 future 0.16.0 (/usr/local/lib/python3.6/dist-packages),
 entrypoints 0.2.3 (/usr/local/lib/python3.6/dist-packages),
 decorator 4.3.0 (/usr/local/lib/python3.6/dist-packages),
 cycler 0.10.0 (/usr/local/lib/python3.6/dist-packages),
 crcmod 1.7 (/usr/local/lib/python3.6/dist-packages),
 chardet 3.0.4 (/usr/local/lib/python3.6/dist-packages),
 certifi 2018.4.16 (/usr/local/lib/python3.6/dist-packages),
 cachetools 2.0.1 (/usr/local/lib/python3.6/dist-packages),
 bleach 1.5.0 (/usr/local/lib/python3.6/dist-packages),
 beautifulsoup4 4.6.0 (/usr/local/lib/python3.6/dist-packages),
 astor 0.6.2 (/usr/local/lib/python3.6/dist-packages),
 absl-py 0.2.0 (/usr/local/lib/python3.6/dist-packages)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Jupyter notebookにデフォルトでインストールされているPythonモジュール&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[widgetsnbextension 3.2.1 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 webencodings 0.5.1 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 wcwidth 0.1.7 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 traitlets 4.3.2 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 tornado 5.0.2 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 testpath 0.3.1 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 terminado 0.8.1 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 six 1.11.0 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 simplegeneric 0.8.1 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 setuptools 28.8.0 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 Send2Trash 1.5.0 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 qtconsole 4.3.1 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 pyzmq 17.0.0 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 python-dateutil 2.7.2 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 Pygments 2.2.0 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 ptyprocess 0.5.2 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 prompt-toolkit 1.0.15 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 pip 10.0.1 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 pickleshare 0.7.4 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 pexpect 4.5.0 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 parso 0.2.0 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 pandocfilters 1.4.2 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 notebook 5.4.1 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 nbformat 4.4.0 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 nbconvert 5.3.1 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 mistune 0.8.3 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 MarkupSafe 1.0 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 jupyter 1.0.0 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 jupyter-core 4.4.0 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 jupyter-console 5.2.0 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 jupyter-client 5.2.3 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 jsonschema 2.6.0 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 Jinja2 2.10 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 jedi 0.12.0 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 ipywidgets 7.2.1 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 ipython 6.3.1 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 ipython-genutils 0.2.0 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 ipykernel 4.8.2 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 html5lib 1.0.1 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 entrypoints 0.2.3 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 decorator 4.3.0 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 bleach 2.1.3 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 backcall 0.1.0 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages),
 appnope 0.1.0 (/Users/soudegesu/.pyenv/versions/3.6.1/envs/test/lib/python3.6/site-packages)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;機械学習ライブラリや数値計算系ライブラリ、Google APIなどがColaboratoryには入っていますね。
必要に応じてローカル環境にもライブラリをインストールしましょう。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回はColaboratoryの特徴をまとめてみました。
実行環境として必要な基盤はほとんど揃っているため、簡単に開発をスタートできるのが大変嬉しいです。
加えて、従来と比較して、Googleのサービスと容易に連携させることができるので、例えば、Google Spread Sheetに基データをストアしている方などは大変重宝するでしょう。
ただし、Googleのクラウドサービスですから、仕事での利用を視野に入れている人は、所属企業のガバナンスを確認した上で使うと良いでしょう。&lt;/p&gt;

&lt;h2 id=&quot;参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://research.google.com/colaboratory/faq.html&quot;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://research.google.com/colaboratory/local-runtimes.html&quot;&gt;Local runtimes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.co.jp/gp/product/4873118344/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873118344&amp;amp;linkCode=as2&amp;amp;tag=soudegesu-22&amp;amp;linkId=972efa59090adfce72f22528173f3769&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=4873118344&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=soudegesu-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;//ir-jp.amazon-adsystem.com/e/ir?t=soudegesu-22&amp;amp;l=am2&amp;amp;o=9&amp;amp;a=4873118344&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
&lt;/div&gt;</content><author><name>soudegesu</name></author><category term="colaboratory" /><category term="machine-learning" /><category term="tensorflow" /><category term="python" /><summary type="html">普段 Jupter notebook で統計処理や機械学習ライブラリを触っている開発者の方は多いはず。今回は巷で話題の Colaboratory を触ってみました。</summary></entry><entry><title type="html">「ティール組織」はこれからの経営者に読んで欲しい一冊</title><link href="https://www.soudegesu.com/book/reinventing-organizations/" rel="alternate" type="text/html" title="「ティール組織」はこれからの経営者に読んで欲しい一冊" /><published>2018-05-01T00:00:00+09:00</published><updated>2018-05-01T00:00:00+09:00</updated><id>https://www.soudegesu.com/book/reinventing-organizations</id><content type="html" xml:base="https://www.soudegesu.com/book/reinventing-organizations/">&lt;p&gt;巷で話題の「ティール組織（洋書名:Reinventing Organizations）」をついに読むことができました。
簡単な書評と所感を書きたいと思います。
以降の内容は &lt;strong&gt;若干のネタバレを含みます&lt;/strong&gt; ので、本をまだ読まれていない方は、先に本を読むことをオススメします。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#超分厚い一冊には今どき組織論のエッセンスが詰まっていた&quot; id=&quot;markdown-toc-超分厚い一冊には今どき組織論のエッセンスが詰まっていた&quot;&gt;超分厚い一冊には今どき組織論のエッセンスが詰まっていた&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#この本は経営者向けの本&quot; id=&quot;markdown-toc-この本は経営者向けの本&quot;&gt;この本は経営者向けの本&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#最後に&quot; id=&quot;markdown-toc-最後に&quot;&gt;最後に&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.co.jp/gp/product/4862762263/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4862762263&amp;amp;linkCode=as2&amp;amp;tag=soudegesu-22&amp;amp;linkId=43e663f0a957755b99c435f78312862e&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=4862762263&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=soudegesu-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;//ir-jp.amazon-adsystem.com/e/ir?t=soudegesu-22&amp;amp;l=am2&amp;amp;o=9&amp;amp;a=4862762263&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;超分厚い一冊には今どき組織論のエッセンスが詰まっていた&quot;&gt;超分厚い一冊には今どき組織論のエッセンスが詰まっていた&lt;/h2&gt;
&lt;p&gt;この書籍は500ページを超える分厚めの書籍です。私は通勤電車の中で毎日これを読んでいたのですが、持ち運びには向きませんね笑。私はKindle Paperwhiteを所有しているので、Kindle版を購入すれば良かったと後悔しました。&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.co.jp/gp/product/B00QJDOM6U/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=B00QJDOM6U&amp;amp;linkCode=as2&amp;amp;tag=soudegesu-22&amp;amp;linkId=66b7a77610b78e915e749c4b63d7cfc4&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=B00QJDOM6U&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=soudegesu-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;//ir-jp.amazon-adsystem.com/e/ir?t=soudegesu-22&amp;amp;l=am2&amp;amp;o=9&amp;amp;a=B00QJDOM6U&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;ただし、そのページ分量に見合うだけのエッセンスは詰まっています。
特に今どきの組織論系の本でよく語られている内容は所々に散りばめられており、説明も一貫かつ丁寧になされているため、
この一冊を読めば組織論に関する知識がない読者でも一から体系的に知識を抑えることができるでしょう。
過去にリーダーシップ論、組織論、自己啓発の類を読んだことがある人は、自己の知識とマッピングされる箇所が多数あるでしょう。&lt;/p&gt;

&lt;p&gt;雑な言い方をすると、&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;組織の基本概念はホラクラシー&lt;/li&gt;
  &lt;li&gt;管理職の役割はManagement3.0&lt;/li&gt;
  &lt;li&gt;従業員の行動原理はアンソニー・ロビンズ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と共通する部分をいくつか感じました。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
また、本書のコンテンツはおおまかに以下のような流れにて構成されています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;組織モデルの移り変わり&lt;/li&gt;
  &lt;li&gt;ティールとはどのような組織か&lt;/li&gt;
  &lt;li&gt;ティール組織に必要なもの&lt;/li&gt;
  &lt;li&gt;ティール組織における、経営役員、管理職、従業員の役割&lt;/li&gt;
  &lt;li&gt;ティール組織を作るには&lt;/li&gt;
  &lt;li&gt;組織の社会的存在意義を明確にする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;途中からは実際にティール組織として機能している会社事例を織り交ぜながら話が進んでいきます。
どの企業も組織内の信頼関係に下支えされた経営を行っており、企業として機能していること自体に凄さを感じえませんでした。&lt;/p&gt;

&lt;h2 id=&quot;この本は経営者向けの本&quot;&gt;この本は経営者向けの本&lt;/h2&gt;

&lt;p&gt;一通り読んで、本書からのメッセージを一言で表現するなら &lt;strong&gt;「『個人』も『組織』も内発的な動機づけによって行動すべきだ」&lt;/strong&gt; といったところでしょう。&lt;/p&gt;

&lt;p&gt;その理論を実現するための柱となる考え方は以下の3つです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;個人は内発的動機付けによって行動を起こし、周囲と協調しつつ(コンセンサスではない)、自身で意思決定を行う&lt;/li&gt;
  &lt;li&gt;組織(企業)は個人を活かすために心理的安全性を確保しなければならない&lt;/li&gt;
  &lt;li&gt;組織(企業)は自分達の社会的存在意義を認識すること&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;この3つのポイントを組織に根付かせるために、ブレークダウンされた論展開がなされていくのですが、
読めば読むほど、 &lt;strong&gt;「とても良い理論だけど、かなり地ならしが必要」&lt;/strong&gt; と感じてしまいます。&lt;/p&gt;

&lt;p&gt;そして、その「地ならし」を行えるのは &lt;strong&gt;経営者だけ&lt;/strong&gt; だと悟るのです。ボトムアップ式では無理である、と。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
ゆえに、この本は &lt;strong&gt;「経営者向けの本である」&lt;/strong&gt; と私は考えています。
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;なお、「どのような企業がティール組織に向いているか」「既存の組織をティール型にするには」という点に関して、
本書の中で筆者もきちんと触れています。&lt;/p&gt;

&lt;p&gt;その項も納得する部分が多く、納得する部分が多いからこそ、読者が「うちじゃ無理かも」と思わせる。
特に &lt;strong&gt;日系の大手企業では導入は難しい&lt;/strong&gt; と言わざるを得ません。&lt;/p&gt;

&lt;p&gt;大体の企業はトップダウン式の階層構造型であり、特に意思決定や権限に対してティール組織の概ね対極に位置するモデルといえます。
ティールを適用した場合、中間管理職の層が最も不利益を被りやすく、その不公平感から、結果的に社内の心理的安全性が失われ、導入に失敗するのではないか、と私は推察しました。&lt;/p&gt;

&lt;p&gt;これが中盤以降に発覚するので、いわば「上げて落とす」ような構成になっています。&lt;/p&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;いろいろとネガティブなことも書いてしまいましたが、学ぶ所は多い書物です。
これを読むと、一瞬、「独立して、社長やってみようかな」とすら思ってしまうほど、心清らかな組織論です。&lt;/p&gt;

&lt;p&gt;従業員個人の内発的動機を最大限に活かすことをエンジンとしているので、雇われ社長ではなく、
内発的動機を持った社長で、かつワンマンでない方にとっては心強い転ばぬ先の杖になるのではないでしょうか。&lt;/p&gt;

&lt;p&gt;また、私のような一介の従業員の目線としては &lt;strong&gt;「やらされ仕事ではなく、自身の内発的動機に基づく仕事に従事したい」&lt;/strong&gt; 
という意味で、ティールな組織で働いてみたいと思わせてくれました。
少なくとも、今後の社会人人生の次のステージに向けて、良い影響を与えてくれた良書であることは間違いありません。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://rcm-fe.amazon-adsystem.com/e/cm?ref=qf_sp_asin_til&amp;amp;t=soudegesu-22&amp;amp;m=amazon&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as1&amp;amp;IS2=1&amp;amp;detail=1&amp;amp;asins=4862762263&amp;amp;linkId=b694c3ce45ccea6c53975ef370c6bb7d&amp;amp;bc1=ffffff&amp;amp;lt1=_blank&amp;amp;fc1=333333&amp;amp;lc1=0066c0&amp;amp;bg1=ffffff&amp;amp;f=ifr&quot;&gt;
&lt;/iframe&gt;
&lt;/div&gt;</content><author><name>soudegesu</name></author><category term="book" /><summary type="html">巷で話題の「ティール組織（洋書名:Reinventing Organizations）」をついに読むことができました。 簡単な書評と所感を書きたいと思います。 以降の内容は 若干のネタバレを含みます ので、本をまだ読まれていない方は、先に本を読むことをオススメします。</summary></entry><entry><title type="html">「人質の経済学」を読んだ</title><link href="https://www.soudegesu.com/book/economics-of-hostages/" rel="alternate" type="text/html" title="「人質の経済学」を読んだ" /><published>2018-04-27T00:00:00+09:00</published><updated>2018-04-27T00:00:00+09:00</updated><id>https://www.soudegesu.com/book/economics-of-hostages</id><content type="html" xml:base="https://www.soudegesu.com/book/economics-of-hostages/">&lt;p&gt;ロレッタ・ナポリオーニ著の「人質の経済学」を読んだのでざっくり書評をまとめたいと思います。
エンジニアだからと、&lt;a href=&quot;https://www.oreilly.co.jp/index.shtml&quot;&gt;オライリー本&lt;/a&gt; ばかり読んでいてはいけないですね。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#購入の経緯&quot; id=&quot;markdown-toc-購入の経緯&quot;&gt;購入の経緯&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#人質ビジネス時代の変遷&quot; id=&quot;markdown-toc-人質ビジネス時代の変遷&quot;&gt;人質ビジネス時代の変遷&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#人質解放交渉のリアル&quot; id=&quot;markdown-toc-人質解放交渉のリアル&quot;&gt;人質解放交渉のリアル&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#著者のロレッタナポリオーニさんについて&quot; id=&quot;markdown-toc-著者のロレッタナポリオーニさんについて&quot;&gt;著者のロレッタ・ナポリオーニさんについて&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#最後に&quot; id=&quot;markdown-toc-最後に&quot;&gt;最後に&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.co.jp/gp/product/4163905804/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4163905804&amp;amp;linkCode=as2&amp;amp;tag=soudegesu-22&amp;amp;linkId=7fcab04a4c51902e13a9c5d1d697eadc&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=4163905804&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=soudegesu-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;//ir-jp.amazon-adsystem.com/e/ir?t=soudegesu-22&amp;amp;l=am2&amp;amp;o=9&amp;amp;a=4163905804&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;購入の経緯&quot;&gt;購入の経緯&lt;/h2&gt;

&lt;p&gt;「人質」が「経済」に結びつきそうなのは、世界中のどの地域でしょうか。&lt;/p&gt;

&lt;p&gt;おそらく大半の人が思い浮かべるのは、中東、とりわけイスラム教圏の国々なのではないでしょうか。&lt;/p&gt;

&lt;p&gt;最近は日本のメディアでの報道が減りましたが、一時はイスラム過激派が中心となった武力闘争をはじめ、
日本人の人質騒動もあったことで、 &lt;strong&gt;「イスラム圏 = 危ない国」というイメージを持ち&lt;/strong&gt; 、
人命が日常的に危険に晒される地帯においては、言われてみれば確かに、人質ビジネスが成立しそうです。&lt;/p&gt;

&lt;p&gt;たまたま、&lt;a href=&quot;https://www.amazon.co.jp/&quot;&gt;amazon&lt;/a&gt; をネットサーフィンしていたらこの本を見つけ、
戦火とは程遠い国に住んでいる人間が国際社会の予備知識を蓄える目的も込めて購入しました。&lt;/p&gt;

&lt;h2 id=&quot;人質ビジネス時代の変遷&quot;&gt;人質ビジネス時代の変遷&lt;/h2&gt;

&lt;p&gt;本書の特徴は一つは &lt;strong&gt;人質ビジネスの変遷&lt;/strong&gt; を抑えている点です。&lt;/p&gt;

&lt;p&gt;そもそも、世間一般の「ビジネス」にはトレンドがあります。お金の流通するプラットフォームに流行り廃りがあるのと同様に、&lt;strong&gt;人質ビジネスも一過性のブームに過ぎない&lt;/strong&gt; のです。
本書では、「人質」が『商材』として機能していた一時代だけではなく、その前後の時代の『お金を産む種』にも十分に触れられているため、論展開に一貫性があります。&lt;/p&gt;

&lt;p&gt;いかに、&lt;strong&gt;地域経済が世界情勢の波に翻弄されながらも、合理的な方向へ変化を遂げていくか&lt;/strong&gt; を垣間見ることが出来ます。&lt;/p&gt;

&lt;h2 id=&quot;人質解放交渉のリアル&quot;&gt;人質解放交渉のリアル&lt;/h2&gt;

&lt;p&gt;もう一つの特徴は、&lt;strong&gt;実際の人質解放交渉の事例&lt;/strong&gt; が多く取り上げていることです。&lt;/p&gt;

&lt;p&gt;人命が商材になる一連の時代には、多くの被害者がいるわけで、各時代の章で様々な被害者の事例が紹介されてきます。
もちろん、命が助かった事例、残念ながら命を奪われた事例の両方が扱われます。
&lt;strong&gt;被害者の命運を分けたのは何か&lt;/strong&gt; 、とりわけ、一度に複数人が誘拐されたケースでは &lt;strong&gt;なぜこの人は助かったのに、この人は助からなかったのか&lt;/strong&gt; が筆者の考察や関係者の取材によって明らかになります。&lt;/p&gt;

&lt;p&gt;また、人質解放交渉にあたって、交渉人、政府、実行犯、教唆犯等の &lt;strong&gt;関心事が異なる人間同士の思惑と、複雑な駆け引き&lt;/strong&gt; 
には、&lt;strong&gt;道徳的観点がスッポリ抜け落ちるリアルさ&lt;/strong&gt; を感じざるを得ませんでした。&lt;/p&gt;

&lt;p&gt;なお、事例ベースの展開が本書の大半を占めるため、事例嫌いの読者の方にはあまり向かないかもしれません。&lt;/p&gt;

&lt;h2 id=&quot;著者のロレッタナポリオーニさんについて&quot;&gt;著者のロレッタ・ナポリオーニさんについて&lt;/h2&gt;

&lt;p&gt;過去には &lt;a href=&quot;https://www.ted.com/talks/loretta_napoleoni_the_intricate_economics_of_terrorism/transcript?language=ja#t-79189&quot;&gt;TED Talk&lt;/a&gt; での登壇経験もあるようです。&lt;/p&gt;

&lt;p&gt;本書を執筆するにあたり、多くの交渉人や被害者等への取材をしています。&lt;/p&gt;

&lt;p&gt;交渉人は業務上人命を取り扱うことから、部外者に迂闊にセンシティブな情報を流すことはご法度なはずです。&lt;/p&gt;

&lt;p&gt;それにも関わらず、筆者にこれだけの協力をするのは、筆者への一定の信頼関係があり、
交渉人とのコネクションを構築できている筆者だからこそ表現できた内容も含まれています。&lt;/p&gt;

&lt;p&gt;一方で、 &lt;strong&gt;「イスラム過激派の変遷のルーツ」と「欧米の法律」の関連性&lt;/strong&gt; に対する筆者の見解には
「筆者のバイアスが入っているのではないかな？」と感じる部分もありました。&lt;/p&gt;

&lt;p&gt;もちろん、単純に彼女の方がプロで、私が素人だからかもしれません。&lt;/p&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;昨今は海外旅行への敷居も下がり、リッチシニアがリタイア後に僻地へ海外旅行三昧のようなケースもよくありますが、
訪問国への治安も含めた下調べは必要だと感じました。&lt;/p&gt;

&lt;p&gt;加えて、くれぐれも自分の幼い好奇心や正義感で国際社会に迷惑をかけるべきではないことを思い知らせてくれるオススメの良い一冊です。&lt;/p&gt;</content><author><name>soudegesu</name></author><category term="book" /><summary type="html">ロレッタ・ナポリオーニ著の「人質の経済学」を読んだのでざっくり書評をまとめたいと思います。 エンジニアだからと、オライリー本 ばかり読んでいてはいけないですね。</summary></entry><entry><title type="html">Pythonの2と3を切り替えて仮想環境を作る</title><link href="https://www.soudegesu.com/python/switch-python/" rel="alternate" type="text/html" title="Pythonの2と3を切り替えて仮想環境を作る" /><published>2018-04-26T00:00:00+09:00</published><updated>2018-04-26T00:00:00+09:00</updated><id>https://www.soudegesu.com/python/switch-python</id><content type="html" xml:base="https://www.soudegesu.com/python/switch-python/">&lt;p&gt;Python使いであれば、Python 2.x と Python 3.x では文法的な互換性がないため、バージョンを正しく使い分けることは最初の第一歩です。
今回はMac環境でのバージョン切り替えとLinux環境でのバージョンの共存について書きます。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#モチベーション&quot; id=&quot;markdown-toc-モチベーション&quot;&gt;モチベーション&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#python-2x-と-python-3x-を共存させたい&quot; id=&quot;markdown-toc-python-2x-と-python-3x-を共存させたい&quot;&gt;Python 2.x と Python 3.x を共存させたい&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#プロジェクト毎にモジュールを管理したい&quot; id=&quot;markdown-toc-プロジェクト毎にモジュールを管理したい&quot;&gt;プロジェクト毎にモジュールを管理したい&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mac-osの場合&quot; id=&quot;markdown-toc-mac-osの場合&quot;&gt;Mac OSの場合&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#homebrew-のインストール&quot; id=&quot;markdown-toc-homebrew-のインストール&quot;&gt;Homebrew のインストール&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pyenvのインストール&quot; id=&quot;markdown-toc-pyenvのインストール&quot;&gt;pyenvのインストール&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#bashrc-を書き換える&quot; id=&quot;markdown-toc-bashrc-を書き換える&quot;&gt;.bashrc を書き換える&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pythonをインストールして仮想環境を作る&quot; id=&quot;markdown-toc-pythonをインストールして仮想環境を作る&quot;&gt;pythonをインストールして仮想環境を作る&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#サーバの場合&quot; id=&quot;markdown-toc-サーバの場合&quot;&gt;サーバの場合&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考にさせていただいたサイト&quot; id=&quot;markdown-toc-参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;モチベーション&quot;&gt;モチベーション&lt;/h2&gt;
&lt;h3 id=&quot;python-2x-と-python-3x-を共存させたい&quot;&gt;Python 2.x と Python 3.x を共存させたい&lt;/h3&gt;

&lt;p&gt;Python 3.x は言語のバージョンアップに伴い、2.x 系との後方互換性をサポートしていません。
&lt;code class=&quot;highlighter-rouge&quot;&gt;__future__&lt;/code&gt; モジュールや &lt;a href=&quot;https://hhsprings.bitbucket.io/docs/translations/python/six-doc-ja/&quot;&gt;six&lt;/a&gt; を使えば、
Python 2で書かれたコードをPython 3のランタイムで動かすことができる場合もありますが、基本的には書き直した方が好ましいと考えています。&lt;/p&gt;

&lt;p&gt;互換性に纏わる話は、 バージョン・アップして第2版となって帰ってきた書籍「エキスパートPython」にも触れられていますので、そちらを見た方が良いかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.co.jp/gp/product/4048930613/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4048930613&amp;amp;linkCode=as2&amp;amp;tag=soudegesu-22&amp;amp;linkId=a3d62631d025b73bac36ad1a91b2fb13&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=4048930613&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=soudegesu-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;//ir-jp.amazon-adsystem.com/e/ir?t=soudegesu-22&amp;amp;l=am2&amp;amp;o=9&amp;amp;a=4048930613&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;プロジェクト毎にモジュールを管理したい&quot;&gt;プロジェクト毎にモジュールを管理したい&lt;/h3&gt;

&lt;p&gt;プロジェクト毎にpythonのライブラリを管理したい(プロジェクト毎に依存モジュールが混ざらないようにしたい)ケースが多いので、
仮想環境を簡単に管理できる仕組みも欲しいです。&lt;/p&gt;

&lt;h2 id=&quot;mac-osの場合&quot;&gt;Mac OSの場合&lt;/h2&gt;

&lt;p&gt;MacOSの場合には &lt;a href=&quot;https://github.com/pyenv/pyenv&quot;&gt;pyenv&lt;/a&gt; を使って複数バージョンをインストールしつつ
&lt;a href=&quot;https://github.com/pyenv/pyenv-virtualenv&quot;&gt;pyenv-virtualenv&lt;/a&gt; で仮想環境を管理することをオススメします。
もちろん、&lt;code class=&quot;highlighter-rouge&quot;&gt;pyenv&lt;/code&gt; の代わりとしてawsome的な &lt;a href=&quot;https://github.com/riywo/anyenv&quot;&gt;anyenv&lt;/a&gt; でも構いません。&lt;/p&gt;

&lt;h3 id=&quot;homebrew-のインストール&quot;&gt;Homebrew のインストール&lt;/h3&gt;

&lt;p&gt;入っていなければ、 &lt;a href=&quot;https://brew.sh/index_ja&quot;&gt;Homebrew&lt;/a&gt; をインストールしましょう。&lt;/p&gt;

&lt;p&gt;TOPページに「このスクリプトをターミナルで叩きなさい」とコマンドが記載されている超親切設計なツールなので、問題なくインストールできるはずです。&lt;/p&gt;

&lt;h3 id=&quot;pyenvのインストール&quot;&gt;pyenvのインストール&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pyenv&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;pyenv-virtualenv&lt;/code&gt; をインストールします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install pyenv pyenv-virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bashrc-を書き換える&quot;&gt;.bashrc を書き換える&lt;/h3&gt;

&lt;p&gt;bashであれば &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; 、 zsh であれば &lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; に以下を追記します。
ターミナルを起動する時に &lt;code class=&quot;highlighter-rouge&quot;&gt;rehash&lt;/code&gt; してほしくなければ &lt;code class=&quot;highlighter-rouge&quot;&gt;--no-rehash&lt;/code&gt; を入れます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export PYENV_ROOT=&quot;${HOME}/.pyenv&quot;
export PATH=&quot;$PATH:${PYENV_ROOT}/bin:${PYENV_ROOT}/shims&quot;

eval &quot;$(pyenv init --no-rehash -)&quot;
eval &quot;$(pyenv virtualenv-init -)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pythonをインストールして仮想環境を作る&quot;&gt;pythonをインストールして仮想環境を作る&lt;/h3&gt;

&lt;p&gt;ベースになるPythonをインストールします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pyenv install 3.6.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;その後、対象のプロジェクト専用の仮想環境を準備します。
仮想環境の名前は &lt;code class=&quot;highlighter-rouge&quot;&gt;test_project&lt;/code&gt; にしておきます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pyenv virtualenv 3.6.1 test_project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;次に &lt;code class=&quot;highlighter-rouge&quot;&gt;test_project&lt;/code&gt; ディレクトリを作成して、
そのディレクトリ配下では &lt;code class=&quot;highlighter-rouge&quot;&gt;Python 3.6.1&lt;/code&gt; のである仮想環境 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_project&lt;/code&gt; を使うように設定します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir test_project
cd test_project

pyenv local 3.6.1/envs/test_project

python -V
&amp;gt;&amp;gt; Python 3.6.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;試しにディレクトリから出てみましょう。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ../
python -V
&amp;gt;&amp;gt; Python 2.7.14
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;できました。&lt;/p&gt;

&lt;h2 id=&quot;サーバの場合&quot;&gt;サーバの場合&lt;/h2&gt;

&lt;p&gt;私の場合、大抵Linux系OSをサーバ用途で使う事が多く、開発用のローカル環境的な使い方はあまりしません。&lt;/p&gt;

&lt;p&gt;もう少し具体的に言うと、 &lt;a href=&quot;https://www.packer.io/&quot;&gt;Packer&lt;/a&gt; や &lt;a href=&quot;https://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt; でPython入りのマシンイメージを焼いて使っています。&lt;/p&gt;

&lt;p&gt;このようなユースケースの場合には &lt;code class=&quot;highlighter-rouge&quot;&gt;pyenv&lt;/code&gt; を使うのではなくて、 &lt;strong&gt;特定のバージョンを予めインストールしておく&lt;/strong&gt; 方が適しています。(Jenkinsのようなビルドサーバ用途では &lt;code class=&quot;highlighter-rouge&quot;&gt;pyenv&lt;/code&gt; の方が良いかもしれません)&lt;/p&gt;

&lt;p&gt;今回は &lt;a href=&quot;https://docs.python.org/ja/3/using/unix.html#getting-and-installing-the-latest-version-of-python&quot;&gt;Pythonの公式ドキュメント&lt;/a&gt; にも記載がある方法で、Pythonをソースからビルドするやり方を個人的にはオススメします。&lt;/p&gt;

&lt;p&gt;例えば、CentOSであれば以下のようなになります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pythonのダウンロード&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -O https://www.python.org/ftp/python/(バージョン)/Python-(バージョン).tgz
tar zxf Python-(バージョン).tgz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ソースからインストール&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd Python-(バージョン)

./configure --prefix=/opt/local
make
make altinstall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ただし、警告のところに書かれているように &lt;strong&gt;Linuxには予めPythonがインストールされているため、それを破壊しないように&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;make altinstall&lt;/code&gt; の方が良いです。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;警告 make install は python3 バイナリを上書きまたはリンクを破壊してしまうかもしれません。
そのため、make install の代わりに exec_prefix/bin/pythonversion のみインストールする make altinstall が推奨されています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回は異なるバージョンのPythonをインストールし、切り替える方法をまとめました。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ローカル環境(Mac)は &lt;code class=&quot;highlighter-rouge&quot;&gt;pyenv&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;pyenv-virtualenv&lt;/code&gt; で &lt;strong&gt;Pythonのバージョンと仮想環境を切り替える&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;サーバは Pythonを &lt;strong&gt;ソースから &lt;code class=&quot;highlighter-rouge&quot;&gt;altinsall&lt;/code&gt;&lt;/strong&gt; して複数バージョンが共存できるようにしてあげる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;のがいいかな、と考えています。&lt;/p&gt;

&lt;h2 id=&quot;参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/ja/3/using/unix.html#getting-and-installing-the-latest-version-of-python&quot;&gt;Python 3.6.5 ドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.co.jp/gp/offer-listing/479738946X/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=479738946X&amp;amp;linkCode=am2&amp;amp;tag=soudegesu-22&amp;amp;linkId=4d6041eaf55821514ce2f3c16f0b9a5c&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=479738946X&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=soudegesu-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;//ir-jp.amazon-adsystem.com/e/ir?t=soudegesu-22&amp;amp;l=am2&amp;amp;o=9&amp;amp;a=479738946X&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
&lt;/div&gt;</content><author><name>soudegesu</name></author><category term="python" /><summary type="html">Python使いであれば、Python 2.x と Python 3.x では文法的な互換性がないため、バージョンを正しく使い分けることは最初の第一歩です。 今回はMac環境でのバージョン切り替えとLinux環境でのバージョンの共存について書きます。</summary></entry><entry><title type="html">MySQL/PostgreSQLの脆弱性が発表された時に、RDS Aurora使いはどう対処すべきか</title><link href="https://www.soudegesu.com/aws/aurora-security/" rel="alternate" type="text/html" title="MySQL/PostgreSQLの脆弱性が発表された時に、RDS Aurora使いはどう対処すべきか" /><published>2018-04-24T00:00:00+09:00</published><updated>2018-04-24T00:00:00+09:00</updated><id>https://www.soudegesu.com/aws/aurora-security</id><content type="html" xml:base="https://www.soudegesu.com/aws/aurora-security/">&lt;p&gt;アプリケーションの脆弱性対応は調査にも時間がかかりますし、大変ですよね。RDS Auroraのようなマネージドサービスの場合、互換性のあるデータベースエンジン(MySQLやPostrgeSQL)の脆弱性が発表されたら、どうしたらよいのでしょうか。少し気になったので調べてみました。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#経緯セキュリティバスターズからの依頼&quot; id=&quot;markdown-toc-経緯セキュリティバスターズからの依頼&quot;&gt;[経緯]セキュリティバスターズからの依頼&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#auroraの仕組み&quot; id=&quot;markdown-toc-auroraの仕組み&quot;&gt;Auroraの仕組み&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#サポートに聞いてみよう&quot; id=&quot;markdown-toc-サポートに聞いてみよう&quot;&gt;サポートに聞いてみよう&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#latest-bulletins-を見てみよう&quot; id=&quot;markdown-toc-latest-bulletins-を見てみよう&quot;&gt;Latest Bulletins を見てみよう&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考にさせていただいたサイト&quot; id=&quot;markdown-toc-参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;経緯セキュリティバスターズからの依頼&quot;&gt;[経緯]セキュリティバスターズからの依頼&lt;/h2&gt;
&lt;p&gt;そこそこ大きい会社になってくると、セキュリティを専門とする部署があって、
&lt;a href=&quot;http://cve.mitre.org/&quot;&gt;CVE&lt;/a&gt; の情報を収集しては&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「こんな脆弱性が発表されたぞ！君たちのプロダクトは大丈夫なのか！？報告したまえ！」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;みたいなやりとりが発生します。情報を展開してくれるのは大変ありがたいのですが、やりたまえって、なんかそういうエージェント仕込むやつでもいいから少しは手伝ってくだされ。&lt;/p&gt;

&lt;p&gt;例のごとく、&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「MySQLの脆弱性が発表されたぞ！これな！」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;というお達しと共に&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CVE-2018-XXXX
CVE-2018-XXXX
CVE-2018-XXXX
(以下略)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;対象と思しきCVEのリストが展開されるのです。&lt;/p&gt;

&lt;p&gt;純粋なMySQL/PostgreSQLでないにせよ、OSSのデータベースエンジンに互換性のあるAuroraを使用している場合、我々は公表された脆弱性にどう対処するのが良いのか？とふと思ったわけです。&lt;/p&gt;

&lt;p&gt;なお、私の使っているAuroraのバージョンは &lt;code class=&quot;highlighter-rouge&quot;&gt;1.15.1&lt;/code&gt; 、互換のあるMySQLのバージョンは &lt;code class=&quot;highlighter-rouge&quot;&gt;5.6.10-log&lt;/code&gt; でした。&lt;/p&gt;

&lt;h2 id=&quot;auroraの仕組み&quot;&gt;Auroraの仕組み&lt;/h2&gt;

&lt;p&gt;そもそも「互換性がある」 からと言って、内部的な仕組みは違うので、一概に言えないのが難しい所です。&lt;/p&gt;

&lt;p&gt;例えば、下のスライドを見ると少しわかるのですが、ストレージ部分のアーキテクチャはAurora独自な感があるので、&lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-2755&quot;&gt;CVE-2018-2755&lt;/a&gt; みたいなレプリケーションに関連する脆弱性は対象にならないのではないか、と推察したりもできます。&lt;/p&gt;

&lt;div class=&quot;embed-container rich &quot;&gt;&lt;iframe src=&quot;https://www.slideshare.net/slideshow/embed_code/key/m7BMjMqJzXfMzf&quot; width=&quot;427&quot; height=&quot;356&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/AmazonWebServicesJapan/amazon-aurora-aurora&quot; title=&quot;Amazon Aurora - Auroraの止まらない進化とその中身&quot; target=&quot;_blank&quot;&gt;Amazon Aurora - Auroraの止まらない進化とその中身&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/AmazonWebServicesJapan&quot; target=&quot;_blank&quot;&gt;Amazon Web Services Japan&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;/div&gt;

&lt;h2 id=&quot;サポートに聞いてみよう&quot;&gt;サポートに聞いてみよう&lt;/h2&gt;

&lt;p&gt;ただ、推察の域を出ないので、AWSのサポートに聞いてみました。&lt;/p&gt;

&lt;p&gt;結果、結論を簡単にまとめると、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MySQLのバージョンに存在する脆弱性は一概にAuroraにもあるとは限らない&lt;/li&gt;
  &lt;li&gt;AWSのセキュリティ適用状況は &lt;a href=&quot;https://aws.amazon.com/security/security-bulletins/&quot;&gt;Latest Bulletins&lt;/a&gt; を確認して欲しい&lt;/li&gt;
  &lt;li&gt;インスタンスへのセキュリティパッチの適用状況についてはユーザが確認することはできない&lt;/li&gt;
  &lt;li&gt;メンテナンスウィンドウにて必須のパッチの適用がスケジューリングされ、時限的に適用される(緊急の場合にはその限りではない)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;マネージドサービスだし、「まかせておけ」ということか。&lt;/p&gt;

&lt;h2 id=&quot;latest-bulletins-を見てみよう&quot;&gt;Latest Bulletins を見てみよう&lt;/h2&gt;

&lt;p&gt;過去にどのような対応があったかを見てみます。
&lt;a href=&quot;https://aws.amazon.com/security/security-bulletins/&quot;&gt;Latest Bulletins&lt;/a&gt; はRDSだけでなく、
他のAWSサービス全般のセキュリティアップデートが表示されます。&lt;/p&gt;

&lt;p&gt;その中から、過去のRDSの対応した脆弱性を探してみます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/security/security-bulletins/amazon-rds-security-advisory-cve-2016-6663-cve-2016-6664/&quot;&gt;Amazon RDS Security Advisory (CVE-2016-6663 and CVE-2016-6664)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/security/security-bulletins/amazon-rds-mysql-security-advisory-cve-2016-6662/&quot;&gt;Amazon RDS - MySQL Security Advisory (CVE-2016-6662)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/security/security-bulletins/cve-2014-2478/&quot;&gt;Amazon RDS for Oracle Security Advisory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/security/security-bulletins/mysql-5-5-and-5-6-security-advisory/&quot;&gt;Amazon RDS – MySQL Security Advisory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Auroraのものは見つかりませんでした。&lt;/p&gt;

&lt;p&gt;CVEの脆弱性とリンクされている上の2つを確認してみると、CVEがアップデートされてから半年後くらいに対応した感じでしょうか。
AWSサービス単位でまとめられているわけでもないので、とりあえず、この情報だけでは脆弱性対処の早い/遅いの判断もできなさそうです。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回はRDS Auroraのセキュリティへの対応を調べてみました。
結論を言うと、&lt;strong&gt;ユーザはAWS側におまかせする形になる&lt;/strong&gt; ので、ブラックボックスになってしまいます。&lt;/p&gt;

&lt;p&gt;もし特定の脆弱性が気になるようなら、サポートセンター経由で個別に相談するのもよいでしょうし、
MySQLエンジンのバージョンを上げれそうであれば、それで対処してしまう、という割り切りもありかな、とぼんやり思いました。&lt;/p&gt;

&lt;p&gt;逆に、脆弱性と思しき事象がある場合には、メールにて報告をする窓口も設けられていたので(調査のお手伝いをする必要がありますが)、がっぷりおつで対峙するのも手かもしれませんね。&lt;/p&gt;

&lt;h2 id=&quot;参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/blogs/database/introducing-the-aurora-storage-engine/&quot;&gt;Introducing the Aurora Storage Engine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/AmazonWebServicesJapan/amazon-aurora-aurora&quot;&gt;Amazon Aurora - Auroraの止まらない進化とその中身&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.co.jp/gp/product/486594043X/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=486594043X&amp;amp;linkCode=as2&amp;amp;tag=soudegesu-22&amp;amp;linkId=aa4c69d72db754bc626b9aa59c0d415a&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=486594043X&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=soudegesu-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;//ir-jp.amazon-adsystem.com/e/ir?t=soudegesu-22&amp;amp;l=am2&amp;amp;o=9&amp;amp;a=486594043X&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
&lt;/div&gt;</content><author><name>soudegesu</name></author><category term="aurora" /><summary type="html">アプリケーションの脆弱性対応は調査にも時間がかかりますし、大変ですよね。RDS Auroraのようなマネージドサービスの場合、互換性のあるデータベースエンジン(MySQLやPostrgeSQL)の脆弱性が発表されたら、どうしたらよいのでしょうか。少し気になったので調べてみました。</summary></entry><entry><title type="html">AWS LambdaでCasperJSを実行してファイルアップロードを自動化する</title><link href="https://www.soudegesu.com/aws/casperjs-on-lambda/" rel="alternate" type="text/html" title="AWS LambdaでCasperJSを実行してファイルアップロードを自動化する" /><published>2018-04-23T00:00:00+09:00</published><updated>2018-04-23T00:00:00+09:00</updated><id>https://www.soudegesu.com/aws/casperjs-on-lambda</id><content type="html" xml:base="https://www.soudegesu.com/aws/casperjs-on-lambda/">&lt;p&gt;AWS上のデータを別サービスに連携するために、AWS LambdaからCasperJSを使ってファイル配置を自動化する仕組みを作ってみました。
APIでデータをPOSTできれば簡単なのですが、今回はGUI上からファイルをアップロードしないといけないため、技術の無駄遣いをしてみます。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#日次でファイルをアップロードしたい&quot; id=&quot;markdown-toc-日次でファイルをアップロードしたい&quot;&gt;日次でファイルをアップロードしたい&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#casperjsとは&quot; id=&quot;markdown-toc-casperjsとは&quot;&gt;CasperJSとは&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lambda--casperjs-で実現してみよう&quot; id=&quot;markdown-toc-lambda--casperjs-で実現してみよう&quot;&gt;Lambda + CasperJS で実現してみよう&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#実装時のポイント&quot; id=&quot;markdown-toc-実装時のポイント&quot;&gt;実装時のポイント&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#lambdaに割り当てるリソースは大きめにタイムアウトは長く設定する&quot; id=&quot;markdown-toc-lambdaに割り当てるリソースは大きめにタイムアウトは長く設定する&quot;&gt;Lambdaに割り当てるリソースは大きめに、タイムアウトは長く設定する&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#aws-lambdaにphantomjsのパスを通す&quot; id=&quot;markdown-toc-aws-lambdaにphantomjsのパスを通す&quot;&gt;AWS LambdaにPhantomJSのパスを通す&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#s3オブジェクトを一度lambdaのコンテナ上にダウンロードする&quot; id=&quot;markdown-toc-s3オブジェクトを一度lambdaのコンテナ上にダウンロードする&quot;&gt;S3オブジェクトを一度Lambdaのコンテナ上にダウンロードする&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#lambda実行の最後にs3バケットへ画面キャプチャをアップロードする&quot; id=&quot;markdown-toc-lambda実行の最後にs3バケットへ画面キャプチャをアップロードする&quot;&gt;Lambda実行の最後にS3バケットへ画面キャプチャをアップロードする&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ブラウザの言語設定を英語にした&quot; id=&quot;markdown-toc-ブラウザの言語設定を英語にした&quot;&gt;ブラウザの言語設定を英語にした&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考にさせていただいたサイト&quot; id=&quot;markdown-toc-参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;日次でファイルをアップロードしたい&quot;&gt;日次でファイルをアップロードしたい&lt;/h2&gt;

&lt;p&gt;ことの発端は以前書いた記事 「&lt;a href=&quot;/aws/s3-cross-account/&quot;&gt;クロスアカウントで共有されたS3バケットはAWSコンソール上から参照可能なのか&lt;/a&gt;」 にて、
&lt;strong&gt;S3のバケット共有の機能を使ってファイルの提供をしようと試みた&lt;/strong&gt; のですが、社内のセキュリティ統制的にNGを喰らってしまいましたので、
指定のファイルストレージサービスを経由してファイルの授受を行う必要が出てきました。&lt;/p&gt;

&lt;p&gt;そのファイルストレージサービスというのが若干レガシーなシステムで、APIを使ったファイルのアップロードができません。
そのため、ヘッドレスブラウザでのGUI操作ができるライブラリを使用してファイルアップロードをしようと考えた次第です。&lt;/p&gt;

&lt;p&gt;これを実装しないと、私が毎朝システムにログインしてファイルをアップロードするという苦行が発生するため、是が非でも作る必要がありました。&lt;/p&gt;

&lt;p&gt;退屈なことはプログラムにやらせましょう。&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.co.jp/gp/product/487311778X/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=487311778X&amp;amp;linkCode=as2&amp;amp;tag=soudegesu-22&amp;amp;linkId=22f6b91a2296dc4b4344bbc4b08fc5dd&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=487311778X&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL160_&amp;amp;tag=soudegesu-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;//ir-jp.amazon-adsystem.com/e/ir?t=soudegesu-22&amp;amp;l=am2&amp;amp;o=9&amp;amp;a=487311778X&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;casperjsとは&quot;&gt;CasperJSとは&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://casperjs.org/&quot;&gt;CasperJS&lt;/a&gt; は &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt; のラッパーライブラリです。
PhantomJS 自体はwebkitをベースとしたヘッドレスブラウザです。
実ブラウザを起動するSeleniumよりも高速に動作するので、GUIを持つ必要のない処理（例えばGUIの自動テストや、今回のような機械的な処理)に向いています。
昨年頃に &lt;a href=&quot;https://developers.google.com/web/updates/2017/04/headless-chrome?hl=ja&quot;&gt;Chromeもヘッドレスで起動できる&lt;/a&gt; ようになっているため、
PhantomJSでなくても良いのですが、過去にPhantomJSを使った経験があったため、再びこれを採用しています。&lt;/p&gt;

&lt;p&gt;ラッパーであるCasperJSを使う利点は、ブラウザ操作のユーティリティが揃っていることです。
セレクタに対するwaitや、イベントの発火、データ入力等のコードをシンプルに書くことができます。&lt;/p&gt;

&lt;p&gt;というか、PhantomJS単体だと自前定義のfunctionが多くなるためオススメできません。&lt;/p&gt;

&lt;h2 id=&quot;lambda--casperjs-で実現してみよう&quot;&gt;Lambda + CasperJS で実現してみよう&lt;/h2&gt;

&lt;p&gt;早速実装してみましょう。今回作成したプログラムは &lt;a href=&quot;https://github.com/soudegesu/casper-lambda-test&quot;&gt;こちら&lt;/a&gt; です。
なお、このプログラム自体は &lt;a href=&quot;https://github.com/narainsagar/node-casperjs-aws-lambda&quot;&gt;node-casperjs-aws-lambda&lt;/a&gt; を参考にしています。&lt;/p&gt;

&lt;p&gt;今回実装したアーキテクチャはざっくり以下のようなイメージです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180423/casperjs.png&quot; alt=&quot;casper_architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;実行環境やライブラリは以下になります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Node 6.10&lt;/li&gt;
  &lt;li&gt;CasperJS 1.1.4&lt;/li&gt;
  &lt;li&gt;PhantomJS 2.1.1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、処理の流れは以下になります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;LambdaがETL処理をする&lt;/li&gt;
  &lt;li&gt;ETL処理終了後にS3にファイルをアップロード&lt;/li&gt;
  &lt;li&gt;BucketのPUTイベントを基にファイルアップロード用のLambdaが実行される&lt;/li&gt;
  &lt;li&gt;LambdaでCasperJSが動き、他サービスにファイルをアップロードする&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;実装時のポイント&quot;&gt;実装時のポイント&lt;/h2&gt;

&lt;h3 id=&quot;lambdaに割り当てるリソースは大きめにタイムアウトは長く設定する&quot;&gt;Lambdaに割り当てるリソースは大きめに、タイムアウトは長く設定する&lt;/h3&gt;
&lt;p&gt;ヘッドレスとは言え、CasperJSを実行するために、Lambdaに割り当てるメモリは大きめにした方が良いです。&lt;/p&gt;

&lt;p&gt;加えて、Lambdaのタイムアウト値は最大値の5分に設定しておきましょう。もちろん、これらは実装する処理の重さに依存します。&lt;/p&gt;

&lt;h3 id=&quot;aws-lambdaにphantomjsのパスを通す&quot;&gt;AWS LambdaにPhantomJSのパスを通す&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node_module&lt;/code&gt; 内のPhantomJSはLambda上ではいい感じに見てくれなかったので、&lt;a href=&quot;http://phantomjs.org/download.html&quot;&gt;PhantomJSのバイナリをダウンロード&lt;/a&gt;して直接パスを通してあげました。&lt;/p&gt;

&lt;p&gt;余談ですが、AWS Lambdaの環境変数一覧は &lt;a href=&quot;https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/current-supported-versions.html&quot;&gt;ここ&lt;/a&gt; に纏められています。はじめて知りました。&lt;/p&gt;

&lt;h3 id=&quot;s3オブジェクトを一度lambdaのコンテナ上にダウンロードする&quot;&gt;S3オブジェクトを一度Lambdaのコンテナ上にダウンロードする&lt;/h3&gt;

&lt;p&gt;S3のPUTイベントをトリガーに処理が実行されるのですが、&lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt; オブジェクトにはバケットの情報やオブジェクトキーの情報しかないため、
そこから一度、Lambdaコンテナの &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/&lt;/code&gt; 配下とかに一度ダウンロードします。&lt;/p&gt;

&lt;h3 id=&quot;lambda実行の最後にs3バケットへ画面キャプチャをアップロードする&quot;&gt;Lambda実行の最後にS3バケットへ画面キャプチャをアップロードする&lt;/h3&gt;

&lt;p&gt;CasperJSのデバッグはコンソールに情報を出力するよりも &lt;code class=&quot;highlighter-rouge&quot;&gt;caputure&lt;/code&gt; 関数を呼び出して、その瞬間の画面キャプチャを取得する方が捗ります。
ただ、Lambda上で実行している場合には、Lambdaの処理が終了するとコンテナも終了するため、処理の最後に任意のS3にアップロードしてあげます。&lt;/p&gt;

&lt;p&gt;なお、キャプチャファイルはカレントディレクトリ( &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/task&lt;/code&gt; 配下)に出力しようとすると、書き込み権限がないエラーになってしまいましたので、 &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/&lt;/code&gt; に吐き出しています。&lt;/p&gt;

&lt;p&gt;また、キャプチャーした画像ファイルは大抵複数できあがるので、&lt;code class=&quot;highlighter-rouge&quot;&gt;aws-sdk&lt;/code&gt; でS3アップロードする処理は &lt;code class=&quot;highlighter-rouge&quot;&gt;Promisse&lt;/code&gt; を使って書きました。&lt;/p&gt;

&lt;h3 id=&quot;ブラウザの言語設定を英語にした&quot;&gt;ブラウザの言語設定を英語にした&lt;/h3&gt;

&lt;p&gt;CasperJSで操作するWebコンテンツがi18n対応されていたため、ヘッドレスブラウザの設定を英語にしました。
&lt;strong&gt;CSSセレクタではなくてエレメント内のテキスト情報で要素を引きたい&lt;/strong&gt; ことが発生した場合に、マルチバイト文字だと引っかからなかったからです。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Change browser lang
casper.on('started', function () {
    this.page.customHeaders = {
        &quot;Accept-Language&quot;: &quot;en-US&quot;
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;ランタイムに依存しない&lt;/strong&gt; という意味でも設定しておいた方が良いと思います。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;今回はAWS Lambda上でCasperJSを実行することで、S3上のファイルを別のストレージサービスへアップロードすることができました。
CasperJSからPhantomJSを呼び出せるようにPATHに追加したり、キャプチャ画像をアップロードするためのバケットを準備したり、
下準備に若干時間がかかりますが、一度作れば動きが理解できると思います。&lt;/p&gt;

&lt;p&gt;Lambdaのタイムアウト時間の最大値である5分以内に処理を終了させる必要があるため、最初はタイムアウトしないか心配でした。
しかし、メモリも大きめに割り当てて上げると実行自体は数十秒くらいで終了したので、ヘッドレスブラウザ最強です。
CasperJSのコードも短かったのが良かったのかもしれません。&lt;/p&gt;

&lt;p&gt;と、これを書きながら、「CasperJSのコードを複数のLambdaで分担してGUIのテストできたらかっこいいな」と感じました。&lt;/p&gt;

&lt;h2 id=&quot;参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://casperjs.org/&quot;&gt;CasperJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/narainsagar/node-casperjs-aws-lambda&quot;&gt;node-casperjs-aws-lambda&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.co.jp/gp/offer-listing/4883379930/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4883379930&amp;amp;linkCode=am2&amp;amp;tag=soudegesu-22&amp;amp;linkId=ae79fa81d72604fbe4a1f4f71e97c369&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=4883379930&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=soudegesu-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;//ir-jp.amazon-adsystem.com/e/ir?t=soudegesu-22&amp;amp;l=am2&amp;amp;o=9&amp;amp;a=4883379930&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
&lt;/div&gt;</content><author><name>soudegesu</name></author><category term="aws" /><category term="lambda" /><category term="casperjs" /><summary type="html">AWS上のデータを別サービスに連携するために、AWS LambdaからCasperJSを使ってファイル配置を自動化する仕組みを作ってみました。 APIでデータをPOSTできれば簡単なのですが、今回はGUI上からファイルをアップロードしないといけないため、技術の無駄遣いをしてみます。</summary></entry><entry><title type="html">Pythonで日付文字列からのdatetime変換やタイムゾーンの変更などをいい加減覚えたい</title><link href="https://www.soudegesu.com/python/python-datetime/" rel="alternate" type="text/html" title="Pythonで日付文字列からのdatetime変換やタイムゾーンの変更などをいい加減覚えたい" /><published>2018-04-22T00:00:00+09:00</published><updated>2018-04-22T00:00:00+09:00</updated><id>https://www.soudegesu.com/python/python-datetime</id><content type="html" xml:base="https://www.soudegesu.com/python/python-datetime/">&lt;p&gt;仕事がらpythonを使って、データのコンバータを作成することも度々あるのですが、&lt;strong&gt;pythonのdatetimeを使った文字列から日時への変換&lt;/strong&gt; や &lt;strong&gt;タイムゾーンの変更&lt;/strong&gt; を毎回ネットで調べているので、いい加減覚えないと業務効率上差し支えそうです。&lt;/p&gt;

&lt;p&gt;今回は自分の備忘録的な意味も込めて書こうと思います。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#環境情報&quot; id=&quot;markdown-toc-環境情報&quot;&gt;環境情報&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#頻繁に使う変換&quot; id=&quot;markdown-toc-頻繁に使う変換&quot;&gt;頻繁に使う変換&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#epochtimeからdatetime&quot; id=&quot;markdown-toc-epochtimeからdatetime&quot;&gt;epochtimeからdatetime&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#epochtimeからdatetime-1&quot; id=&quot;markdown-toc-epochtimeからdatetime-1&quot;&gt;epochtimeからdatetime&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#ミリ秒を含むepochtimeからdatetime&quot; id=&quot;markdown-toc-ミリ秒を含むepochtimeからdatetime&quot;&gt;ミリ秒を含むepochtimeからdatetime&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#エポックミリ秒からdatetime&quot; id=&quot;markdown-toc-エポックミリ秒からdatetime&quot;&gt;エポックミリ秒からdatetime&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#文字列からdatetime&quot; id=&quot;markdown-toc-文字列からdatetime&quot;&gt;文字列からdatetime&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#タイムゾーンあり日付文字列からdatetime&quot; id=&quot;markdown-toc-タイムゾーンあり日付文字列からdatetime&quot;&gt;タイムゾーンあり日付文字列からdatetime&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#タイムゾーンなし日付文字列からdatetime&quot; id=&quot;markdown-toc-タイムゾーンなし日付文字列からdatetime&quot;&gt;タイムゾーンなし日付文字列からdatetime&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#日時データを扱う上で注意すべきこと&quot; id=&quot;markdown-toc-日時データを扱う上で注意すべきこと&quot;&gt;日時データを扱う上で注意すべきこと&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#naiveとaware&quot; id=&quot;markdown-toc-naiveとaware&quot;&gt;naiveとaware&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#マシン上のタイムゾーンで処理しないように注意する&quot; id=&quot;markdown-toc-マシン上のタイムゾーンで処理しないように注意する&quot;&gt;マシン上のタイムゾーンで処理しないように注意する&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考にさせていただいたサイト&quot; id=&quot;markdown-toc-参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;環境情報&quot;&gt;環境情報&lt;/h2&gt;

&lt;p&gt;今回のPythonの実行環境は以下になります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;python 3.6&lt;/li&gt;
  &lt;li&gt;pytz&lt;/li&gt;
  &lt;li&gt;jupyter notebook&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;頻繁に使う変換&quot;&gt;頻繁に使う変換&lt;/h2&gt;

&lt;p&gt;データのクレンジング作業などで時系列データを取り扱う場合には、特定のミドルウェアや他人のコンバータが出力するデータ仕様を調査した上で加工処理を施すことが多いです。&lt;/p&gt;

&lt;p&gt;Pythonでは日付時刻の処理を行う場合に &lt;code class=&quot;highlighter-rouge&quot;&gt;datetime&lt;/code&gt; や &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt;、 &lt;code class=&quot;highlighter-rouge&quot;&gt;time&lt;/code&gt; などの型を使って処理をしますが、今回は &lt;code class=&quot;highlighter-rouge&quot;&gt;datetime&lt;/code&gt; を使います。&lt;/p&gt;

&lt;h3 id=&quot;epochtimeからdatetime&quot;&gt;epochtimeからdatetime&lt;/h3&gt;
&lt;p&gt;epochtimeを表す &lt;code class=&quot;highlighter-rouge&quot;&gt;数値型&lt;/code&gt; から &lt;code class=&quot;highlighter-rouge&quot;&gt;datetime&lt;/code&gt; に変換します。&lt;/p&gt;

&lt;p&gt;epochtimeはUnix時間とも言われますが、世界標準時の1970年1月1日午前0時0分0秒からの経過秒数を整数値で表したものです。
詳細はwikipediaを見た方が早いと思いますので、 &lt;a href=&quot;https://ja.wikipedia.org/wiki/UNIX%E6%99%82%E9%96%93&quot;&gt;こちら&lt;/a&gt; をみてください。&lt;/p&gt;

&lt;p&gt;UTCからの経過秒数を表現していることから、その数字からタイムゾーン付きのデータに変換することは容易です。&lt;/p&gt;

&lt;p&gt;強いて言えば、epochtimeの数値データが &lt;strong&gt;エポック秒&lt;/strong&gt; なのか &lt;strong&gt;エポックミリ秒&lt;/strong&gt; なのかの確認をしておくと良いでしょう。
桁数を見るか、関数に実データを放り込んで判別することが多いです。&lt;/p&gt;

&lt;p&gt;datetime型の &lt;code class=&quot;highlighter-rouge&quot;&gt;fromtimestamp&lt;/code&gt; 関数を使えば記述もシンプルに済ませることができます。&lt;/p&gt;

&lt;h4 id=&quot;epochtimeからdatetime-1&quot;&gt;epochtimeからdatetime&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fromtimestamp&lt;/code&gt; 関数を使った変換のサンプルは以下になります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import datetime

e = 1524349374
dt = datetime.datetime.fromtimestamp(e)
print(dt)

# &amp;gt;&amp;gt; 2018-04-22 07:22:54
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;ミリ秒を含むepochtimeからdatetime&quot;&gt;ミリ秒を含むepochtimeからdatetime&lt;/h4&gt;

&lt;p&gt;少数点以下にミリ秒を含んでいても問題なく変換できます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# epochtimeからdatetime(ミリ秒含む)
import datetime

mills = 1524349374.099776
dt2 = datetime.datetime.fromtimestamp(mills)
print(dt2)

# &amp;gt;&amp;gt; 2018-04-22 07:22:54.099776
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;エポックミリ秒からdatetime&quot;&gt;エポックミリ秒からdatetime&lt;/h4&gt;

&lt;p&gt;整数部分でミリ秒部分が表現されている(エポックミリ秒表記)場合には、何桁までがミリ秒を表しているのか確認した後、割ってあげます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# epochmillitimeからdatetime
import datetime

mills = 1524349374099
dt3 = datetime.datetime.fromtimestamp(mills / 1000)
print(dt3)

# &amp;gt;&amp;gt; 2018-04-22 07:22:54.099000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;文字列からdatetime&quot;&gt;文字列からdatetime&lt;/h3&gt;

&lt;p&gt;次に文字列からdatetimeに変換します。&lt;/p&gt;

&lt;h4 id=&quot;タイムゾーンあり日付文字列からdatetime&quot;&gt;タイムゾーンあり日付文字列からdatetime&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;strptime&lt;/code&gt; 関数を使えば簡単に変換できます。
ミリ秒は &lt;code class=&quot;highlighter-rouge&quot;&gt;%f&lt;/code&gt; 、 タイムゾーンは &lt;code class=&quot;highlighter-rouge&quot;&gt;%z&lt;/code&gt; を使えばパースしてくれます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# タイムゾーンあり
import datetime

utc_date_str = '2018-04-01 20:10:56.123+0900'
dt = datetime.datetime.strptime(utc_date_str, '%Y-%m-%d %H:%M:%S.%f%z')

print(dt)
# &amp;gt;&amp;gt; 2018-04-01 20:10:56.123000+09:00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;タイムゾーンなし日付文字列からdatetime&quot;&gt;タイムゾーンなし日付文字列からdatetime&lt;/h4&gt;

&lt;p&gt;厄介なのが、 &lt;strong&gt;タイムゾーンのない日付文字列をdatetimeに変換する&lt;/strong&gt; 場合です。
&lt;strong&gt;日付文字列がどのタイムゾーンのデータを表しているか&lt;/strong&gt; を調べる必要があります。
少し邪道感ありますが、データ仕様（タイムゾーンが何か）を確認した後に文字列結合してしまうのが楽ちんです。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# タイムゾーンなし日付文字列(文字列結合)
import datetime

utc_date_str = '2018-04-01 20:10:56'
# JSTとして取扱う
dt = datetime.datetime.strptime(utc_date_str + '+0900', '%Y-%m-%d %H:%M:%S%z')

print(dt)
print(dt.tzinfo)
# &amp;gt;&amp;gt; 2018-04-01 20:10:56+09:00
# &amp;gt;&amp;gt; UTC+09:00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;別パターンは &lt;code class=&quot;highlighter-rouge&quot;&gt;dateutil&lt;/code&gt; を使うパターンも書いておきます。
&lt;code class=&quot;highlighter-rouge&quot;&gt;dateutil&lt;/code&gt; の &lt;code class=&quot;highlighter-rouge&quot;&gt;parse&lt;/code&gt; 関数を使用する際に &lt;code class=&quot;highlighter-rouge&quot;&gt;tzinfos&lt;/code&gt; を引数に与えることで指定のtimezoneで処理をしてくれる書き方です。
先程の例と比べて、パッと見でどこのタイムゾーンかが識別しやすくなる、という利点があります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# タイムゾーンなし日付文字列(dateutilを使う)
import datetime
from dateutil.parser import parse
from dateutil.tz import gettz

tzinfos = {'JST' : gettz('Asia/Tokyo')}
date_str = '2018-04-01 20:10:56'
str_to_dt = parse(date_str + ' JST', tzinfos=tzinfos)
print(str_to_dt)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;日時データを扱う上で注意すべきこと&quot;&gt;日時データを扱う上で注意すべきこと&lt;/h2&gt;
&lt;h3 id=&quot;naiveとaware&quot;&gt;naiveとaware&lt;/h3&gt;

&lt;p&gt;そもそもPythonで日時データを扱う場合には、&lt;strong&gt;naive&lt;/strong&gt; と &lt;strong&gt;aware&lt;/strong&gt; の2種類のオブジェクトがあることに注意が必要です。&lt;/p&gt;

&lt;p&gt;以下、Pythonの公式ドキュメントから引用します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;aware オブジェクト&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;aware オブジェクトは他の aware オブジェクトとの相対関係を把握出来るように、
タイムゾーンや夏時間の情報のような、アルゴリズム的で政治的な適用可能な時間調節に関する知識を持っています。
aware オブジェクトは解釈の余地のない特定の実時刻を表現するのに利用されます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;naive オブジェクト&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;naive オブジェクトには他の日付時刻オブジェクトとの相対関係を把握するのに足る情報が含まれません。
あるプログラム内の数字がメートルを表わしているのか、マイルなのか、それとも質量なのかがプログラムによって異なるように、
naive オブジェクトが協定世界時 (UTC) なのか、現地時間なのか、それとも他のタイムゾーンなのかはそのプログラムに依存します。
Naive オブジェクトはいくつかの現実的な側面を無視してしまうというコストを無視すれば、簡単に理解でき、うまく利用することができます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;つまり、タイムゾーンに依存したデータを扱いたい場合には &lt;code class=&quot;highlighter-rouge&quot;&gt;aware&lt;/code&gt; オブジェクトが必要なことを意味します。&lt;/p&gt;

&lt;p&gt;しかし厄介なのが、型とaware/naiveオブジェクトの関係です。型に対して利用するオブジェクトが一意に決まりません。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;型&lt;/td&gt;
      &lt;td&gt;オブジェクト&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;date&lt;/td&gt;
      &lt;td&gt;naive&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;time&lt;/td&gt;
      &lt;td&gt;naive または aware&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;datetime&lt;/td&gt;
      &lt;td&gt;naive または aware&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;time&lt;/code&gt; 型と &lt;code class=&quot;highlighter-rouge&quot;&gt;datetime&lt;/code&gt; 型がそれぞれ、 &lt;code class=&quot;highlighter-rouge&quot;&gt;aware&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;naive&lt;/code&gt; かは以下で確認できます。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;オブジェクト&lt;/td&gt;
      &lt;td&gt;awareになる条件&lt;/td&gt;
      &lt;td&gt;naiveになる条件&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;time&lt;/td&gt;
      &lt;td&gt;オブジェクト tの &lt;code class=&quot;highlighter-rouge&quot;&gt;t.tzinfo&lt;/code&gt; が None でなく &lt;code class=&quot;highlighter-rouge&quot;&gt;t.tzinfo.utcoffset(None)&lt;/code&gt; が None を返さない場合&lt;/td&gt;
      &lt;td&gt;aware以外の場合&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;datetime&lt;/td&gt;
      &lt;td&gt;オブジェクト dの &lt;code class=&quot;highlighter-rouge&quot;&gt;d.tzinfo&lt;/code&gt; が None でなく &lt;code class=&quot;highlighter-rouge&quot;&gt;d.tzinfo.utcoffset(d)&lt;/code&gt; が None を返さない場合&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;d.tzinfo&lt;/code&gt; が None であるか &lt;code class=&quot;highlighter-rouge&quot;&gt;d.tzinfo&lt;/code&gt; が None でないが &lt;code class=&quot;highlighter-rouge&quot;&gt;d.tzinfo.utcoffset(d)&lt;/code&gt; が None を返す場合&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
&lt;/table&gt;

&lt;h3 id=&quot;マシン上のタイムゾーンで処理しないように注意する&quot;&gt;マシン上のタイムゾーンで処理しないように注意する&lt;/h3&gt;

&lt;p&gt;awareとnaiveに留意せずにタイムゾーン変換の処理を書くと、動作環境によって得られる結果が変わってしまうため、注意が必要です。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 文字列から日付(実行マシン上のタイムゾーンに引きずられる)
import datetime
from pytz import timezone
import pytz

# タイムゾーンなし文字列からdatetimeに変換する
date_str = '2018-04-01 20:10:56'
# この処理で得られるstr_to_dtはnaive
str_to_dt = datetime.datetime.strptime(date_str, '%Y-%m-%d %H:%M:%S')
print(&quot;Str to dt&quot;)
print(str_to_dt)                      # 2018-04-01 20:10:56
print(str_to_dt.timestamp())          # 1522581056.0
print(str_to_dt.tzname())             # None

# 以下、naiveな時刻をベースに演算すると、ずれる
utc = timezone('UTC')
utc_dt = str_to_dt.astimezone(utc)
print(&quot;UTC dt&quot;)
print(utc_dt)                         # 2018-04-01 11:10:56+00:00
print(utc_dt.timestamp())             # 1522581056.0
print(utc_dt.tzname())                # UTC
print(utc_dt.tzinfo.utcoffset(utc_dt))# 0:00:00

jst = timezone('Asia/Tokyo');
jst_dt = str_to_dt.astimezone(jst);
print(&quot;JST dt&quot;)
print(jst_dt)                         # 2018-04-01 20:10:56+09:00
print(jst_dt.timestamp())             # 1522581056.0
print(jst_dt.tzname())                # JST
print(jst_dt.tzinfo.utcoffset(jst_dt))# 9:00:00

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この例ではタイムゾーンなしの文字列からdatetime型の &lt;code class=&quot;highlighter-rouge&quot;&gt;str_to_dt&lt;/code&gt; を作成するのですが、
そこから &lt;code class=&quot;highlighter-rouge&quot;&gt;astimezone&lt;/code&gt; 関数を使って任意のタイムゾーンへ変換しようとする際に、
実行環境上のタイムゾーンから、変換先のタイムゾーンへの相対的な計算が行われます。&lt;/p&gt;

&lt;p&gt;そのため、パブリッククラウドで複数リージョンを使っている場合などには、
プログラムの展開先によって振る舞いが異なる可能性があるため、注意が必要でしょう。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回はPythonで日付文字列からdatetime型に変換するときの方法を書きました。&lt;/p&gt;

&lt;p&gt;日付文字列を変換する場合には &lt;strong&gt;文字列の中にタイムゾーン情報が含まれているか&lt;/strong&gt; を気をつけて処理をすると良いです。&lt;/p&gt;

&lt;p&gt;得られるオブジェクトが &lt;code class=&quot;highlighter-rouge&quot;&gt;aware&lt;/code&gt; か &lt;code class=&quot;highlighter-rouge&quot;&gt;naive&lt;/code&gt; なのかを意識した上でタイムゾーン変換の処理を行わないと、うっかり手痛い変換ミスになってしまうので注意が必要だからです。&lt;/p&gt;

&lt;p&gt;私の場合、基本的には「データ仕様を確認して、タイムゾーンあり文字列として変換してしまう」方で処理をしようと思いました。&lt;/p&gt;

&lt;h2 id=&quot;参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.jp/3/library/datetime.html&quot;&gt;Python docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.co.jp/gp/offer-listing/479738946X/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=479738946X&amp;amp;linkCode=am2&amp;amp;tag=soudegesu-22&amp;amp;linkId=4d6041eaf55821514ce2f3c16f0b9a5c&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=479738946X&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=soudegesu-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;//ir-jp.amazon-adsystem.com/e/ir?t=soudegesu-22&amp;amp;l=am2&amp;amp;o=9&amp;amp;a=479738946X&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
&lt;/div&gt;</content><author><name>soudegesu</name></author><category term="python" /><summary type="html">仕事がらpythonを使って、データのコンバータを作成することも度々あるのですが、pythonのdatetimeを使った文字列から日時への変換 や タイムゾーンの変更 を毎回ネットで調べているので、いい加減覚えないと業務効率上差し支えそうです。</summary></entry><entry><title type="html">継続的デリバリのためにfeatureのリリースと改善系アイテムのリリースは分けよう</title><link href="https://www.soudegesu.com/continuous-delivery/separate-improvement-and-feature/" rel="alternate" type="text/html" title="継続的デリバリのためにfeatureのリリースと改善系アイテムのリリースは分けよう" /><published>2018-04-16T00:00:00+09:00</published><updated>2018-04-16T00:00:00+09:00</updated><id>https://www.soudegesu.com/continuous-delivery/separate-improvement-and-feature</id><content type="html" xml:base="https://www.soudegesu.com/continuous-delivery/separate-improvement-and-feature/">&lt;p&gt;&lt;a href=&quot;http://www.ryuzee.com/contents/blog/4241&quot;&gt;継続的デリバリ(Continuous Delivery)&lt;/a&gt;はITの現場で一般的なものと浸透してきました。
継続的デリバリを実現するためには、継続的インテグレーションの仕組みと
再現性のあるデプロイメントパイプライン基盤の整備が必要です。
これにより出荷可能なプロダクトを頻繁にリリースすることが可能になります。
今回は頻繁にリリース可能な環境下において、より安全にサービスをデリバリするための個人的な考えをまとめたものです。&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#デプロイの失敗を考える&quot; id=&quot;markdown-toc-デプロイの失敗を考える&quot;&gt;デプロイの失敗を考える&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#decoupling-deployment-from-releaseデプロイとリリースは分離しよう&quot; id=&quot;markdown-toc-decoupling-deployment-from-releaseデプロイとリリースは分離しよう&quot;&gt;Decoupling deployment from release(デプロイとリリースは分離しよう)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#失敗した時の被ダメージ&quot; id=&quot;markdown-toc-失敗した時の被ダメージ&quot;&gt;失敗した時の「被ダメージ」&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#失敗したときの被ダメージを軽減する&quot; id=&quot;markdown-toc-失敗したときの被ダメージを軽減する&quot;&gt;失敗したときの被ダメージを「軽減」する&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#一度にリリースする量を減らす&quot; id=&quot;markdown-toc-一度にリリースする量を減らす&quot;&gt;一度にリリースする量を減らす&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#decoupling-improvement-from-feature改善とフィーチャーは分離しよう&quot; id=&quot;markdown-toc-decoupling-improvement-from-feature改善とフィーチャーは分離しよう&quot;&gt;Decoupling improvement from feature(改善とフィーチャーは分離しよう)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#失敗リスクを細分化する&quot; id=&quot;markdown-toc-失敗リスクを細分化する&quot;&gt;失敗リスクを細分化する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;デプロイの失敗を考える&quot;&gt;デプロイの失敗を考える&lt;/h2&gt;
&lt;h3 id=&quot;decoupling-deployment-from-releaseデプロイとリリースは分離しよう&quot;&gt;Decoupling deployment from release(デプロイとリリースは分離しよう)&lt;/h3&gt;

&lt;p&gt;かつて、Technology Readerのtechniquesに &lt;a href=&quot;https://www.thoughtworks.com/radar/techniques/decoupling-deployment-from-release&quot;&gt;Decoupling deployment from release&lt;/a&gt; というものが紹介されていました。
これは、ITの現場で「商用作業」または「本番リリース」と言われている作業を2つのプロセスに分割して行うことを提案しています。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;商用環境へのシステムの展開(デプロイ)&lt;/li&gt;
  &lt;li&gt;デプロイされたシステムをサービスインさせる(リリース)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;デプロイしてもエンドユーザに成果物は提供されません。リリースして初めて利用可能になります。
つまり、リリースしない限りはビジネスに与える影響がないのです。デプロイ後に成果物の動作確認をし、問題があれば切り戻せば良いのです。&lt;/p&gt;

&lt;p&gt;これはビジネス上のリスクを軽減するための方法としてとても画期的な発想で、私もプロダクト開発に携わる時には可能な限り &lt;a href=&quot;https://www.thoughtworks.com/radar/techniques/decoupling-deployment-from-release&quot;&gt;Decoupling deployment from release&lt;/a&gt; ができるシステム構成やデプロイメント基盤の構築を心がけています。&lt;/p&gt;

&lt;p&gt;チームのメンバーにも「デプロイ」と「リリース」という単語を明確に意味を分けて使うようにお願いしているし、彼らも納得してそうしてくれているので有り難い限りです。&lt;/p&gt;

&lt;p&gt;エンジニアが「自分の行っている行為がビジネスラインに与える影響」を意識するのはとても良いことで、
単にビジネスインパクトといっても、&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「新しいfeatureを提供する」というポジティブなビジネスインパクト&lt;/strong&gt; もあれば、&lt;br /&gt;
&lt;strong&gt;「システム障害」「セキュリティインシデント」のようなネガティブなビジネスインパクト&lt;/strong&gt; もありますから、&lt;/p&gt;

&lt;p&gt;ポジティブなものは「どうやって最大化するか」を、ネガティブなものは「どうやって最小化するか」を
考えながら仕事をするのはエンジニア冥利に尽きるわけです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.thoughtworks.com/radar/techniques/decoupling-deployment-from-release&quot;&gt;Decoupling deployment from release&lt;/a&gt; はどちらかと言えば後者の、ネガティブなビジネスインパクトを軽減するためのテクニックに分類できると私は理解しています。&lt;/p&gt;

&lt;h3 id=&quot;失敗した時の被ダメージ&quot;&gt;失敗した時の「被ダメージ」&lt;/h3&gt;
&lt;p&gt;仮にデプロイ後の動作確認で何らか問題が見つかったとします。&lt;br /&gt;
その場合、サービスされているシステムはそのままに、デプロイしたリソースを切り戻すことになるでしょう。&lt;br /&gt;
問題が発生したリソースは撤収され、ビジネスにネガティブなインパクトを与えることはありませんでした。&lt;/p&gt;

&lt;p&gt;あー良かった良かった。&lt;/p&gt;

&lt;p&gt;…本当にそうなのでしょうか？&lt;/p&gt;

&lt;p&gt;もし、今回リリースする成果物のfeatureが&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;プレスリリースを打っていたら？&lt;/li&gt;
  &lt;li&gt;法人のお客様に約束をしていたら？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どうなるでしょうか。&lt;/p&gt;

&lt;p&gt;そうですね。プロダクトにおける重要なマイルストーンを含む場合、「新しいfeatureを提供する」というポジティブなビジネスインパクトを妨げる &lt;strong&gt;機会損失&lt;/strong&gt; というネガティブなビジネスインパクトを与えているはずです。&lt;/p&gt;

&lt;p&gt;優れたアジャイル開発チームであれば「&lt;a href=&quot;https://matome.naver.jp/odai/2133468389280396901&quot;&gt;顧客が本当に必要だったもの&lt;/a&gt;」
を肌でも感じていますが、&lt;strong&gt;取り組むべき価値のあるfeatureから順次提供している&lt;/strong&gt; はずです。この観点を踏まえると、「マイルストン通りfeatureを提供できないこと」は「重度のシステム障害が起こる」よりはマシですが、問題に変わりはありません。&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.co.jp/gp/offer-listing/4873117321/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873117321&amp;amp;linkCode=am2&amp;amp;tag=soudegesu-22&amp;amp;linkId=ca20d76273c1a09d878e5bd16acf1f2e&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=4873117321&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=soudegesu-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;//ir-jp.amazon-adsystem.com/e/ir?t=soudegesu-22&amp;amp;l=am2&amp;amp;o=9&amp;amp;a=4873117321&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;失敗したときの被ダメージを軽減する&quot;&gt;失敗したときの被ダメージを「軽減」する&lt;/h2&gt;

&lt;p&gt;結局、エンジニアは自分の置かれた環境と判断材料を基にして &lt;strong&gt;リスクの発生のしやすさ&lt;/strong&gt; と &lt;strong&gt;顕在化した時の被ダメージ&lt;/strong&gt; を頭の片隅において仕事をしているのです。
先程の例は更に突き詰めていくと、 &lt;strong&gt;「デプロイ作業の工数が無駄になった」&lt;/strong&gt; とか、会社によっては &lt;strong&gt;「障害報告の工数が発生した」&lt;/strong&gt; みたいな人件費の話も出てきて、&lt;strong&gt;失敗による被ダメージは「軽減する」ことしかできない&lt;/strong&gt; ことが伺えます。&lt;/p&gt;

&lt;p&gt;ではダメージを軽減するにはどうするか。いくつかのヒントを以下に書きます。&lt;/p&gt;

&lt;h3 id=&quot;一度にリリースする量を減らす&quot;&gt;一度にリリースする量を減らす&lt;/h3&gt;

&lt;p&gt;1回にリリースする成果物の量(バッチサイズ)を減らすことです。featureを2つも3つも入れないことです。
例えば、3つのfeatureのうち1つ問題があったら、もれなく3つ分の機会損失が発生します。
そのため、リリース可能な1つずつのfeatureをシリアルに提供し、シリアルになる分、短いサイクルで提供するのです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180416/separate.png&quot; alt=&quot;separate&quot; /&gt;&lt;/p&gt;

&lt;p&gt;これはDevOps界隈でもフィードバックループを循環させる方法としてよく聞きます。&lt;/p&gt;

&lt;h3 id=&quot;decoupling-improvement-from-feature改善とフィーチャーは分離しよう&quot;&gt;Decoupling improvement from feature(改善とフィーチャーは分離しよう)&lt;/h3&gt;

&lt;p&gt;バッチサイズを調整するという観点で、リリースされる成果物の性質にも目を向けてみます。
「&lt;strong&gt;その成果物自体にビジネスインパクトがあるかどうか&lt;/strong&gt;」 という判断軸で分割してみましょう。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ポジティブなビジネスインパクトを与える
    &lt;ul&gt;
      &lt;li&gt;プロダクトにおけるfeature&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;直接的なビジネスインパクトをもたらさない
    &lt;ul&gt;
      &lt;li&gt;セキュリティパッチ適用&lt;/li&gt;
      &lt;li&gt;ライブラリバージョンアップ&lt;/li&gt;
      &lt;li&gt;OS差し替え&lt;/li&gt;
      &lt;li&gt;システム構成変更&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ここで言いたいのは、「いわゆる&lt;strong&gt;feature&lt;/strong&gt;と、いわゆる&lt;strong&gt;システム改善&lt;/strong&gt;はリリースタイミングを分割した方が良い」ということです。
なぜならば、システム改善のデプロイに失敗して切り戻したとしても、既に提供されているfeatureには影響を出さずに済むからです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180416/os_patch.png&quot; alt=&quot;os_patch&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;失敗リスクを細分化する&quot;&gt;失敗リスクを細分化する&lt;/h2&gt;

&lt;p&gt;Decoupling improvement from feature のような考え方でリリース物に色分けをすると、リスクの分散構造が理解しやすくなるという副産物があります。
例えば、 &lt;strong&gt;feature開発のために、ライブラリをこっそりバージョンアップしてしまう現象&lt;/strong&gt; は現場でよく見かけます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180416/feature_stone.png&quot; alt=&quot;feature_stone&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ライブラリのバージョンアップ自体は改善アイテムに分類することができ、 &lt;strong&gt;個別のタイミングでデプロイすべき&lt;/strong&gt; なのです。
(時系列的にはfeatureの前にデプロイされているべきです)&lt;/p&gt;

&lt;p&gt;デプロイを分割することによって、featureのリリースを行う時点では、既にライブラリのバージョンアップやDBマイグレーションは成功しているので、これらの失敗リスクを加味する必要がなくなります。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;継続的デリバリを安定して行うための考え方をまとめました。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;デプロイとリリースのプロセスは分ける&lt;/li&gt;
  &lt;li&gt;一回のリリース物のサイズを小さくする&lt;/li&gt;
  &lt;li&gt;「直接的なビジネスインパクトがあるかどうか」という判断軸でリリース物を分割するのもアリ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;小さな変化を積み重ねることで、最終的には大きな変更を成し遂げることができると考えています。&lt;/p&gt;

&lt;p&gt;今後の個人的なタスクとしては &lt;code class=&quot;highlighter-rouge&quot;&gt;Springbootの1.5→2.x系へのバージョンアップ&lt;/code&gt; や、&lt;code class=&quot;highlighter-rouge&quot;&gt;Amazon Linux → Amazon Linux2&lt;/code&gt;への移行、&lt;code class=&quot;highlighter-rouge&quot;&gt;Java 11以降へのマイグレーション&lt;/code&gt; といったイベントが目白押しなので、意識しながら作業していきたいです。&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.co.jp/gp/offer-listing/4873118352/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873118352&amp;amp;linkCode=am2&amp;amp;tag=soudegesu-22&amp;amp;linkId=e1b8ecca6e0185cd2701dc949c301805&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=4873118352&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=soudegesu-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;//ir-jp.amazon-adsystem.com/e/ir?t=soudegesu-22&amp;amp;l=am2&amp;amp;o=9&amp;amp;a=4873118352&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
&lt;/div&gt;</content><author><name>soudegesu</name></author><category term="continuous-delivery" /><category term="agile" /><summary type="html">継続的デリバリ(Continuous Delivery)はITの現場で一般的なものと浸透してきました。 継続的デリバリを実現するためには、継続的インテグレーションの仕組みと 再現性のあるデプロイメントパイプライン基盤の整備が必要です。 これにより出荷可能なプロダクトを頻繁にリリースすることが可能になります。 今回は頻繁にリリース可能な環境下において、より安全にサービスをデリバリするための個人的な考えをまとめたものです。</summary></entry><entry><title type="html">クロスアカウントで共有されたS3バケットはAWSコンソール上から参照可能なのか</title><link href="https://www.soudegesu.com/aws/s3-cross-account/" rel="alternate" type="text/html" title="クロスアカウントで共有されたS3バケットはAWSコンソール上から参照可能なのか" /><published>2018-04-13T00:00:00+09:00</published><updated>2018-04-13T00:00:00+09:00</updated><id>https://www.soudegesu.com/aws/s3-cross-account</id><content type="html" xml:base="https://www.soudegesu.com/aws/s3-cross-account/">&lt;p&gt;AWS S3はバケットポリシーを設定することで、クロスアカウントでのバケット共有ができます。
設定により、複数のアカウントからバケットに対して操作を行うことができるため、大変便利な機能です。
しかし、バケットのオーナーアカウントではAWSコンソール上でバケットを確認できるのですが、
共有された側ではS3バケットのコンソールにバケットが表示されません。
今回はなんとかして閲覧する方法はないものかと試行錯誤してみました。&lt;/p&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#やりたいこと&quot; id=&quot;markdown-toc-やりたいこと&quot;&gt;やりたいこと&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#s3をファイルストレージサービス的にファイル共有に使いたい&quot; id=&quot;markdown-toc-s3をファイルストレージサービス的にファイル共有に使いたい&quot;&gt;S3をファイルストレージサービス的にファイル共有に使いたい&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#でもバケットのあるawsアカウントにログインさせたくない&quot; id=&quot;markdown-toc-でもバケットのあるawsアカウントにログインさせたくない&quot;&gt;でもバケットのあるAWSアカウントにログインさせたくない&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#課題&quot; id=&quot;markdown-toc-課題&quot;&gt;課題&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ユーザはブラウザしか使えない&quot; id=&quot;markdown-toc-ユーザはブラウザしか使えない&quot;&gt;ユーザはブラウザしか使えない&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#コンソール上のバケットリストはバケットのオーナーアカウント側でしか見れない&quot; id=&quot;markdown-toc-コンソール上のバケットリストはバケットのオーナーアカウント側でしか見れない&quot;&gt;コンソール上のバケットリストはバケットのオーナーアカウント側でしか見れない&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#案1-バケットのurlを直接叩かせる非公式&quot; id=&quot;markdown-toc-案1-バケットのurlを直接叩かせる非公式&quot;&gt;案1 バケットのURLを直接叩かせる[非公式]&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#案2-switch-roleを使う正攻法&quot; id=&quot;markdown-toc-案2-switch-roleを使う正攻法&quot;&gt;案2 Switch Roleを使う[正攻法]&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;やりたいこと&quot;&gt;やりたいこと&lt;/h2&gt;
&lt;h3 id=&quot;s3をファイルストレージサービス的にファイル共有に使いたい&quot;&gt;S3をファイルストレージサービス的にファイル共有に使いたい&lt;/h3&gt;

&lt;p&gt;今回やろうとしていたことを簡単に説明します。
以下の図にまとめました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180413/share_bucket.png&quot; alt=&quot;share_bucket&quot; /&gt;&lt;/p&gt;

&lt;p&gt;既に本番環境で稼働しているサービスがあり(アカウントA)、
アカウントA内にあるS3バケットにストアしているデータを他部門に提供する必要が出てきました。&lt;/p&gt;

&lt;h3 id=&quot;でもバケットのあるawsアカウントにログインさせたくない&quot;&gt;でもバケットのあるAWSアカウントにログインさせたくない&lt;/h3&gt;
&lt;p&gt;普通に考えれば、アカウントAで他部門向けのIAM GroupとIAM Userを作成する、というのが簡易な解になるのですが、少し事情があります。
アカウントA自体が社内のセキュリティレベルが高めに規定されているため、他部門のIAM UserをアカウントAの中に作るのが難しいのです。
そのため、 他部門向けの &lt;strong&gt;別のAWSアカウントBを作成し、アカウントBに対して対象のバケットのみを共有するようにすれば要求が充足されるのではないか&lt;/strong&gt;、という話になり、その方法を中心に検討をすることになりました。&lt;/p&gt;

&lt;h2 id=&quot;課題&quot;&gt;課題&lt;/h2&gt;
&lt;h3 id=&quot;ユーザはブラウザしか使えない&quot;&gt;ユーザはブラウザしか使えない&lt;/h3&gt;

&lt;p&gt;今回のケースでは他部門の人間がエンジニアではないため、&lt;strong&gt;ブラウザでのファイルダウンロードしかできない&lt;/strong&gt; という制約がありました。 
AWS CLIのインストールも嫌がられてしまったため、 &lt;strong&gt;「AWSのS3コンソールからファイルを見せる」&lt;/strong&gt; 必要がありました。&lt;/p&gt;

&lt;h3 id=&quot;コンソール上のバケットリストはバケットのオーナーアカウント側でしか見れない&quot;&gt;コンソール上のバケットリストはバケットのオーナーアカウント側でしか見れない&lt;/h3&gt;

&lt;p&gt;アカウントAで &lt;code class=&quot;highlighter-rouge&quot;&gt;soudegesu-bucket-foo&lt;/code&gt; というS3バケットを作成し、以下のようにバケットポリシーを作成することで
アカウントBにバケット共有の設定をしました。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;Version&quot;: &quot;2012-10-17&quot;,
    &quot;Statement&quot;: [
        {
            &quot;Sid&quot;: &quot;GetObject&quot;,
            &quot;Action&quot;: [
                &quot;s3:GetObject&quot;
            ],
            &quot;Effect&quot;: &quot;Allow&quot;,
            &quot;Resource&quot;: &quot;arn:aws:s3:::soudegesu-bucket-foo/*&quot;,
            &quot;Principal&quot;: {
                &quot;AWS&quot;: [
                    &quot;アカウントBのAWSアカウントID&quot;
                ]
            }
        },
        {
            &quot;Sid&quot;: &quot;ListBucket&quot;,
            &quot;Action&quot;: [
                &quot;s3:ListBucket&quot;
            ],
            &quot;Effect&quot;: &quot;Allow&quot;,
            &quot;Resource&quot;: &quot;arn:aws:s3:::soudegesu-bucket-foo&quot;,
            &quot;Principal&quot;: {
                &quot;AWS&quot;: [
                    &quot;アカウントBのAWSアカウントID&quot;
                ]
            }
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;アカウントAのS3コンソールからは共有対象のバケットを確認できるのですが、&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180413/account_a_bucket_list.png&quot; alt=&quot;account_a_bucket_list&quot; /&gt;&lt;/p&gt;

&lt;p&gt;アカウントBでのS3コンソールから共有されたバケットを確認できないのです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180413/account_b_bucket_list.png&quot; alt=&quot;account_b_bucket_list&quot; /&gt;&lt;/p&gt;

&lt;p&gt;実は &lt;strong&gt;S3のバケットリストはバケットを作成したオーナー側にしか表示されない&lt;/strong&gt; というAWSのS3の仕様があります。
これは AWS CLIでも同様で、 &lt;code class=&quot;highlighter-rouge&quot;&gt;aws s3 ls&lt;/code&gt; コマンドを実行しても、自分のアカウントで作成されたバケットの一覧しか取得できません。&lt;/p&gt;

&lt;p&gt;なんてこったい。&lt;/p&gt;

&lt;h3 id=&quot;案1-バケットのurlを直接叩かせる非公式&quot;&gt;案1 バケットのURLを直接叩かせる[非公式]&lt;/h3&gt;

&lt;p&gt;一瞬「やばい」と思いましたが、どうにかなりそうな方法が見つかりました。
それは &lt;strong&gt;共有バケットのURLを直接をブラウザに入力する&lt;/strong&gt; という方法です。&lt;/p&gt;

&lt;p&gt;AWSコンソール上のS3のURLのルールは以下のようになっていて、
AWSコンソールにログインしたセッション上で直叩きするとブラウザ上で表示することができます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://s3.console.aws.amazon.com/s3/buckets/{バケット名}/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;今回の例で言えば、AWSアカウントBにログインした状態で下のURLを直叩きします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://s3.console.aws.amazon.com/s3/buckets/soudegesu-bucket-foo/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180413/find_bucket_b.png&quot; alt=&quot;find_bucket&quot; /&gt;&lt;/p&gt;

&lt;p&gt;見えました。やったぜ。&lt;/p&gt;

&lt;p&gt;ただし、この方法は現時点(2018年4月現在)でのS3コンソールの仕様ということらしく、公式でサポートされている仕様ではありません。
一応AWSのサポートにも聞いてみましたが、結果的に見えているけど、今後変わるかもしれない、ということでした。&lt;/p&gt;

&lt;h3 id=&quot;案2-switch-roleを使う正攻法&quot;&gt;案2 Switch Roleを使う[正攻法]&lt;/h3&gt;

&lt;p&gt;結局、マルチアカウント間でコンソール上でいい感じに見せたい場合の正攻法はSwitch Roleになりそうです。
Switch Roleを使ったアカウントの切り替えは記事にされている方がいっぱいいらっしゃるのでそちらを参考にいただいた方が良いです。&lt;/p&gt;

&lt;p&gt;参考までにいくつかリンクを貼っておきます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/yoshidashingo/items/d13a9b17f111d5d91a2e&quot;&gt;Swith Roleで複数のAWSアカウント間を切替える&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_roles_use_switch-role-console.html&quot;&gt;ロールの切り替え（AWS マネジメントコンソール）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;「クロスアカウントで共有されたS3バケットはAWSコンソール上から閲覧可能なのか」&lt;/strong&gt; というタイトルで今回書きましたが、
結論を言うと&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;可能&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;しかし、以下の条件を知っておく必要がありそうです。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;共有されたバケットがS3コンソールのバケット一覧で参照可能なのは&lt;strong&gt;バケットのオーナーアカウント&lt;/strong&gt;のみ&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;バケットのURLを直接入力する&lt;/strong&gt;ことで、共有先のアカウントでもブラウザ上で確認ができる&lt;/li&gt;
  &lt;li&gt;ただし、URL直接入力の方法は公式サポートされていないので、真面目にやるならSwitch Roleで対応する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回はURLを直接入力する方法で大丈夫そうだったので、よかったよかった。&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.co.jp/gp/offer-listing/4797392568/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4797392568&amp;amp;linkCode=am2&amp;amp;tag=soudegesu-22&amp;amp;linkId=2317c39300679077409ccb55e8076219&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=4797392568&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=soudegesu-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;//ir-jp.amazon-adsystem.com/e/ir?t=soudegesu-22&amp;amp;l=am2&amp;amp;o=9&amp;amp;a=4797392568&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
&lt;/div&gt;</content><author><name>soudegesu</name></author><category term="aws" /><category term="s3" /><summary type="html">AWS S3はバケットポリシーを設定することで、クロスアカウントでのバケット共有ができます。 設定により、複数のアカウントからバケットに対して操作を行うことができるため、大変便利な機能です。 しかし、バケットのオーナーアカウントではAWSコンソール上でバケットを確認できるのですが、 共有された側ではS3バケットのコンソールにバケットが表示されません。 今回はなんとかして閲覧する方法はないものかと試行錯誤してみました。</summary></entry><entry><title type="html">AWS LambdaのコードをTerraformでデプロイする</title><link href="https://www.soudegesu.com/aws/deploy-lambda-with-terraform/" rel="alternate" type="text/html" title="AWS LambdaのコードをTerraformでデプロイする" /><published>2018-04-11T00:00:00+09:00</published><updated>2018-04-11T00:00:00+09:00</updated><id>https://www.soudegesu.com/aws/deploy-lambda-with-terraform</id><content type="html" xml:base="https://www.soudegesu.com/aws/deploy-lambda-with-terraform/">&lt;p&gt;今更感もありますが、今日はTerraformでのAWS Lambdaのコード化について書きます。
AWS Lambdaは &lt;a href=&quot;https://aws.amazon.com/jp/cloud9/&quot;&gt;Cloud9&lt;/a&gt; がコンソール上に組み込まれたこともあり、開発がさらに容易になりました。
ブラウザエディタは &lt;strong&gt;そのままwebにつながる&lt;/strong&gt; というのが最大の強みですが、まだまだ手元のリポジトリでコードを管理している手前、AWSのサービスだけで完結できていないのが現状です。
今回はAWS LambdaのコードをTerraformを使ってデプロイする方法を説明しようと思います。&lt;/p&gt;

&lt;p&gt;↓ちなみに下が組み込まれたCloud9&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180411/cloud9_lambda.png&quot; alt=&quot;cloud9_lambda&quot; /&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#terraformでaws-lambdaをデプロイしたい&quot; id=&quot;markdown-toc-terraformでaws-lambdaをデプロイしたい&quot;&gt;TerraformでAWS Lambdaをデプロイしたい&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#やってみる&quot; id=&quot;markdown-toc-やってみる&quot;&gt;やってみる&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#コードのエントリータイプはzipにしよう&quot; id=&quot;markdown-toc-コードのエントリータイプはzipにしよう&quot;&gt;コードのエントリータイプはzipにしよう&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#シェルでzip圧縮したいソース一式を作成する&quot; id=&quot;markdown-toc-シェルでzip圧縮したいソース一式を作成する&quot;&gt;シェルでzip圧縮したいソース一式を作成する&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#terraformでzip圧縮デプロイ&quot; id=&quot;markdown-toc-terraformでzip圧縮デプロイ&quot;&gt;Terraformでzip圧縮&amp;amp;デプロイ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ビルドデプロイをつなげる&quot; id=&quot;markdown-toc-ビルドデプロイをつなげる&quot;&gt;ビルド&amp;amp;デプロイをつなげる&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考にさせていただいたサイト&quot; id=&quot;markdown-toc-参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;terraformでaws-lambdaをデプロイしたい&quot;&gt;TerraformでAWS Lambdaをデプロイしたい&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Infrastructure as Code&lt;/code&gt; はクラウド界隈でバズってだいぶ時間も立っていますので、あまりここでは触れません。
必要に応じて界隈の方のブログや以下の書籍を読んでください。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.co.jp/gp/offer-listing/4873117968/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873117968&amp;amp;linkCode=am2&amp;amp;tag=soudegesu-22&amp;amp;linkId=e5283797d3bbc22eb4a74f9cee8af948&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=4873117968&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=soudegesu-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;//ir-jp.amazon-adsystem.com/e/ir?t=soudegesu-22&amp;amp;l=am2&amp;amp;o=9&amp;amp;a=4873117968&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;AWS Lambdaがサービスとして登場した頃は、簡易なバッチ的な仕組みとしての用途が多く、作り捨てなコードが多かったです。
その後、連携可能な他のAWSサービスも増えて、VPC内に立ち上げることも可能になり(起動時間はかなり遅いですけど)、用途の幅に広がりが出てきました。
そんな &lt;strong&gt;「まぁ、Lambdaでいっか」&lt;/strong&gt; ケースが増えると同時に、一度デプロイしたLambdaのコードを修正して再デプロイするというケースも増えてきました。&lt;/p&gt;

&lt;p&gt;業務上 &lt;code class=&quot;highlighter-rouge&quot;&gt;Terraform&lt;/code&gt; を使ってAWSリソースをコード化しているので、Lambdaもその管理の対象にしようと思ったのが契機です。&lt;/p&gt;

&lt;h2 id=&quot;やってみる&quot;&gt;やってみる&lt;/h2&gt;

&lt;p&gt;実際にLambdaをTerraformでデプロイするコード化してみました。
コードサンプルは &lt;a href=&quot;https://github.com/soudegesu/terraform-lambda-practice&quot;&gt;こちら&lt;/a&gt; にあります。&lt;/p&gt;

&lt;p&gt;簡単にリポジトリの説明をしておきます。&lt;/p&gt;

&lt;p&gt;デプロイ用のマシンに必要なライブラリ等は以下になります。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Terraform&lt;/li&gt;
  &lt;li&gt;Python 3.6&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;またディレクトリ構成はこんな感じです。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── Makefile
├── README.md
├── build.sh
├── lambda-src
│   ├── __init__.py
│   └── main.py
├── requirements.txt
└── terraform
    ├── backend.tf
    ├── dev.tfvars
    ├── lambda.tf
    ├── provider.tf
    └── variables.tf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lambda-src&lt;/code&gt; ディレクトリにはLambdaで実行するPythonコード、 &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform&lt;/code&gt; ディレクトリにはLmabdaのデプロイに使用するterraformの設定が格納されています。
めんどい前処理の類はシェル(&lt;code class=&quot;highlighter-rouge&quot;&gt;build.sh&lt;/code&gt;)でラップしてあって、開発者は &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; のサブコマンドだけ意識しておけば良い、という作りにしています。
この方法自体は我流なので、よりスマートな方法はあると思います。&lt;/p&gt;

&lt;p&gt;以降は実装する上でのポイントだけ記載していきます。&lt;/p&gt;

&lt;h3 id=&quot;コードのエントリータイプはzipにしよう&quot;&gt;コードのエントリータイプはzipにしよう&lt;/h3&gt;

&lt;p&gt;Lambdaにソースコードを適用する方法は3種類存在します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180411/type_of_code_entry.png&quot; alt=&quot;code_entry_type&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Edit Code Inline
    &lt;ul&gt;
      &lt;li&gt;ブラウザ上のエディタに直接書く方法。デプロイ後のコードを突貫で修正したりする時によく使う。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Upload a .ZIP file
    &lt;ul&gt;
      &lt;li&gt;zipファイルでアップロードする方法。今回はこれを採用する。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Uplaod a file from Amazon S3
    &lt;ul&gt;
      &lt;li&gt;S3からファイルを読み込む方法。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;個人的には2番目の &lt;strong&gt;zipファイルでアップロードする方法&lt;/strong&gt; をオススメします。&lt;/p&gt;

&lt;p&gt;理由としては以下&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;依存モジュールを含めてアップロードできる&lt;/li&gt;
  &lt;li&gt;わざわざS3を積極的に経由するケースが思いつかない。(Lambdaに対して直接操作できない時とか？)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;シェルでzip圧縮したいソース一式を作成する&quot;&gt;シェルでzip圧縮したいソース一式を作成する&lt;/h3&gt;

&lt;p&gt;シェルを使えば何でもできてしまうので、Terraformで完結させたい方には興ざめかもしれませんが、低コストだったのでこれにしました。
&lt;code class=&quot;highlighter-rouge&quot;&gt;build.sh&lt;/code&gt; の処理を見ていただければわかるのですが、 zip圧縮させたいファイル郡を管理する必要があるので、
専用の &lt;code class=&quot;highlighter-rouge&quot;&gt;workspace&lt;/code&gt; ディレクリを作成し、そこに依存モジュールとソースコードをまるごと放り込みます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;build.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;SCRIPT_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;dirname &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;WORKSPACE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SCRIPT_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/workspace
&lt;span class=&quot;nv&quot;&gt;SRC_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SCRIPT_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/lambda-src

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WORKSPACE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WORKSPACE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi
&lt;/span&gt;mkdir &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WORKSPACE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

pip3 install &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SCRIPT_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/requirements.txt &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WORKSPACE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
cp &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SRC_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WORKSPACE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;terraformでzip圧縮デプロイ&quot;&gt;Terraformでzip圧縮&amp;amp;デプロイ&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;workspace&lt;/code&gt; ディレクトリのzip圧縮とデプロイを定義します。
terraformで &lt;code class=&quot;highlighter-rouge&quot;&gt;archive_file&lt;/code&gt; というデータリソースを使用することで、指定されたディレクトリをzip圧縮して出力することができます。
加えて、Lambda関数の作成の際に &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_lambda_function&lt;/code&gt; リソースの &lt;code class=&quot;highlighter-rouge&quot;&gt;source_code_hash&lt;/code&gt; プロパティに、zipアーカイブしたデータリソースのbase64エンコードを指定することができるので、これでzipのデプロイコードの完成です。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#####################################
#Lambda
#####################################
resource &quot;aws_lambda_function&quot; &quot;auth_log_monitoring&quot; {
    filename = &quot;../lambda.zip&quot;
    function_name = &quot;do_something&quot;
    role = &quot;arn:aws:iam::${var.account_id}:role/XXXXXXRole&quot;
    handler = &quot;main.lambda_handler&quot;
    source_code_hash = &quot;${data.archive_file.lambda_zip.output_base64sha256}&quot;
    runtime = &quot;python3.6&quot;
    timeout = 150
}

data &quot;archive_file&quot; &quot;lambda_zip&quot; {
    type = &quot;zip&quot;
    source_dir  = &quot;../workspace&quot;
    output_path = &quot;../lambda.zip&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ビルドデプロイをつなげる&quot;&gt;ビルド&amp;amp;デプロイをつなげる&lt;/h3&gt;
&lt;p&gt;あとは &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sh&lt;/code&gt; でのビルド処理とterraformでのデプロイをつなげてあげればOKです。
今回は &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt; に以下のような定義をして、コマンド一発で処理ができるようにラップしています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deploy:
	@${CD} &amp;amp;&amp;amp; \
		sh ../build.sh &amp;amp;&amp;amp; \
		terraform workspace select ${ENV} &amp;amp;&amp;amp; \
		terraform apply \
        -var-file=${VARS}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;あとは &lt;code class=&quot;highlighter-rouge&quot;&gt;make deploy&lt;/code&gt; を打てば実行できます。(リポジトリ的にはterraformのリモートバケットの初期化を先に行う必要はあります。)&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;Terraformを使用して、AWS Lambdaのソースコードのデプロイができるようになりました。
実際にはシェルを間にかませてビルドを行なっていますが、シェル内での処理自体はシンプルなので、横展開もしやすくなっています。
1点欠点としては、&lt;strong&gt;ランタイムがpythonの場合にはterraform実行時に毎回ハッシュにdiffが出てしまう&lt;/strong&gt; という点。つまり、毎度デプロイしてしまうという所です。
しかし、今あるコードを正としてデプロイし続けることに問題がなければ、目をつむっても良い欠点なので、今の所気にしていません。
ちなみにランタイムがNodeだとこれはおきませんでした。&lt;/p&gt;

&lt;h2 id=&quot;参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.terraform.io/docs/providers/aws/r/lambda_function.html&quot;&gt;Terraform:aws_lambda_function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.co.jp/gp/offer-listing/B06XKHGJHP/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=B06XKHGJHP&amp;amp;linkCode=am2&amp;amp;tag=soudegesu-22&amp;amp;linkId=c8ab2870b7378967fbf5fd25ce31da6c&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=B06XKHGJHP&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=soudegesu-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;//ir-jp.amazon-adsystem.com/e/ir?t=soudegesu-22&amp;amp;l=am2&amp;amp;o=9&amp;amp;a=B06XKHGJHP&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
&lt;/div&gt;</content><author><name>soudegesu</name></author><category term="aws" /><category term="lambda" /><category term="terraform" /><summary type="html">今更感もありますが、今日はTerraformでのAWS Lambdaのコード化について書きます。 AWS Lambdaは Cloud9 がコンソール上に組み込まれたこともあり、開発がさらに容易になりました。 ブラウザエディタは そのままwebにつながる というのが最大の強みですが、まだまだ手元のリポジトリでコードを管理している手前、AWSのサービスだけで完結できていないのが現状です。 今回はAWS LambdaのコードをTerraformを使ってデプロイする方法を説明しようと思います。</summary></entry></feed>