<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="https://www.soudegesu.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.soudegesu.com/" rel="alternate" type="text/html" /><updated>2018-06-13T07:51:41+09:00</updated><id>https://www.soudegesu.com/</id><title type="html">そうなんでげす</title><subtitle>soudegesuのtechブログ。普段仕事では使わない技術を中心に書いていくので入門系記事が多くなると思っていたけど、書き始めたらいい感じにいろいろまぜこぜになってきました。とりあえず、書きたくなったらいろいろ書きます。</subtitle><author><name>soudegesu</name></author><entry><title type="html">Amazon Linux2(systemd)のプロセス数やファイルディスクリプタ数を変更する</title><link href="https://www.soudegesu.com/linux/systemd_limits/" rel="alternate" type="text/html" title="Amazon Linux2(systemd)のプロセス数やファイルディスクリプタ数を変更する" /><published>2018-06-10T00:00:00+09:00</published><updated>2018-06-10T00:00:00+09:00</updated><id>https://www.soudegesu.com/linux/systemd_limits</id><content type="html" xml:base="https://www.soudegesu.com/linux/systemd_limits/">&lt;p&gt;今回はAmazon Linux から Amazon Linux2 への移行をする機会があったので、
プロセス数やファイルディスクリプタ数といったリソース制限の変更に関して備忘録として残しておきます。&lt;/p&gt;

&lt;p&gt;なお、以降の手順は公式の Amazon Linux2 のAMIをそのままブートした後に試しています。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#ソフトリミットとハードリミット&quot; id=&quot;markdown-toc-ソフトリミットとハードリミット&quot;&gt;ソフトリミットとハードリミット&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ログインユーザへの設定&quot; id=&quot;markdown-toc-ログインユーザへの設定&quot;&gt;ログインユーザへの設定&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#limitsconfを書き換える&quot; id=&quot;markdown-toc-limitsconfを書き換える&quot;&gt;limits.confを書き換える&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#limitsconfよりも優先されるファイル&quot; id=&quot;markdown-toc-limitsconfよりも優先されるファイル&quot;&gt;limits.confよりも優先されるファイル&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#設定値の確認方法&quot; id=&quot;markdown-toc-設定値の確認方法&quot;&gt;設定値の確認方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#デーモンへの設定&quot; id=&quot;markdown-toc-デーモンへの設定&quot;&gt;デーモンへの設定&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#全体へのデフォルト設定をする&quot; id=&quot;markdown-toc-全体へのデフォルト設定をする&quot;&gt;全体へのデフォルト設定をする&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#デーモンごとの設定をする&quot; id=&quot;markdown-toc-デーモンごとの設定をする&quot;&gt;デーモンごとの設定をする&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考にさせていただいたサイト&quot; id=&quot;markdown-toc-参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ソフトリミットとハードリミット&quot;&gt;ソフトリミットとハードリミット&lt;/h2&gt;

&lt;p&gt;まず、最初によく聞くソフトリミットとハードリミットの確認しましょう。
Linuxではユーザやプロセスごとに利用できるリソースを制限することできます。&lt;/p&gt;

&lt;p&gt;これらには &lt;strong&gt;ソフトリミット&lt;/strong&gt; と &lt;strong&gt;ハードリミット&lt;/strong&gt; の2種類が存在します。&lt;/p&gt;

&lt;p&gt;ソフトリミットはユーザの現在の設定値を指し、ハードリミットはユーザ側での変更可能なソフトリミットの上限値を意味します。&lt;/p&gt;

&lt;h2 id=&quot;ログインユーザへの設定&quot;&gt;ログインユーザへの設定&lt;/h2&gt;

&lt;h3 id=&quot;limitsconfを書き換える&quot;&gt;limits.confを書き換える&lt;/h3&gt;

&lt;p&gt;Linuxへのログインユーザへの設定は &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/security/limits.conf&lt;/code&gt; ファイルにて設定がなされます。
なお、これはPAM認証が適用されたログインに限られます。&lt;/p&gt;

&lt;p&gt;Ansibleの &lt;a href=&quot;https://docs.ansible.com/ansible/2.3/pam_limits_module.html&quot;&gt;pam_limits&lt;/a&gt; を使うと、このファイルに追記がされます。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/security/limits.conf

&lt;span class=&quot;c&quot;&gt;# /etc/security/limits.conf&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#This file sets the resource limits for the users logged in via PAM.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#It does not affect resource limits of the system services.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Also note that configuration files in /etc/security/limits.d directory,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#which are read in alphabetical order, override the settings in this&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#file in case the domain is the same or more specific.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#That means for example that setting a limit for wildcard domain here&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#can be overriden with a wildcard setting in a config file in the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#subdirectory, but a user specific setting here can be overriden only&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#with a user specific setting in the subdirectory.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Each line describes a limit for a user in the form:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&amp;lt;domain&amp;gt;        &amp;lt;type&amp;gt;  &amp;lt;item&amp;gt;  &amp;lt;value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Where:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&amp;lt;domain&amp;gt; can be:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - a user name&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - a group name, with @group syntax&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - the wildcard *, for default entry&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - the wildcard %, can be also used with %group syntax,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#                 for maxlogin limit&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&amp;lt;type&amp;gt; can have the two values:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - &quot;soft&quot; for enforcing the soft limits&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - &quot;hard&quot; for enforcing hard limits&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&amp;lt;item&amp;gt; can be one of the following:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - core - limits the core file size (KB)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - data - max data size (KB)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - fsize - maximum filesize (KB)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - memlock - max locked-in-memory address space (KB)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - nofile - max number of open file descriptors&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - rss - max resident set size (KB)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - stack - max stack size (KB)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - cpu - max CPU time (MIN)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - nproc - max number of processes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - as - address space limit (KB)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - maxlogins - max number of logins for this user&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - maxsyslogins - max number of logins on the system&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - priority - the priority to run user process with&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - locks - max number of file locks the user can hold&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - sigpending - max number of pending signals&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - msgqueue - max memory used by POSIX message queues (bytes)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - nice - max nice priority allowed to raise to values: [-20, 19]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - rtprio - max realtime priority&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&amp;lt;domain&amp;gt;      &amp;lt;type&amp;gt;  &amp;lt;item&amp;gt;         &amp;lt;value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#*               soft    core            0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#*               hard    rss             10000&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#@student        hard    nproc           20&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#@faculty        soft    nproc           20&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#@faculty        hard    nproc           50&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ftp             hard    nproc           0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#@student        -       maxlogins       4&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# End of file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;limitsconfよりも優先されるファイル&quot;&gt;limits.confよりも優先されるファイル&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/security/limits.conf&lt;/code&gt; のコメント内にも記載されていますが、 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/security/limits.d&lt;/code&gt; ディレクトリ内のファイルを読み取り、
デフォルト値として設定することができます。&lt;/p&gt;

&lt;p&gt;Amazon Linux2（CentOS系）の場合には &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/security/limits.d/20-nproc.conf&lt;/code&gt; がデフォルトで配備されており、
同ファイルにプロセスのソフトリミットがデフォルトで設定されていることがわかります。&lt;/p&gt;

&lt;p&gt;アクシデンタルなフォーク爆弾を防ぐために、とも書かれていますね。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/security/limits.d/20-nproc.conf

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Default limit for number of user's processes to prevent&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# accidental fork bombs.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# See rhbz #432903 for reasoning.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;          soft    nproc     4096
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; root       soft    nproc     unlimited
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;設定値の確認方法&quot;&gt;設定値の確認方法&lt;/h3&gt;

&lt;p&gt;設定された項目は &lt;code class=&quot;highlighter-rouge&quot;&gt;ulimit -a&lt;/code&gt; コマンドにて一覧表示して確認可能です。
&lt;code class=&quot;highlighter-rouge&quot;&gt;-H&lt;/code&gt; オプションでハードリミット、 &lt;code class=&quot;highlighter-rouge&quot;&gt;-S&lt;/code&gt; オプションでソフトリミットを確認できます。&lt;/p&gt;

&lt;p&gt;注意点として、&lt;code class=&quot;highlighter-rouge&quot;&gt;ulimit&lt;/code&gt; で表示されるのは、カレントユーザの設定値であることです。
別のユーザの設定値を確認したければ &lt;code class=&quot;highlighter-rouge&quot;&gt;su&lt;/code&gt; を使うなどする必要があります。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;ulimit&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; core file size          &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;blocks, &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 0
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; data seg size           &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;kbytes, &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; unlimited
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; scheduling priority             &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 0
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; file size               &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;blocks, &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; unlimited
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; pending signals                 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 3828
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; max locked memory       &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;kbytes, &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 64
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; max memory size         &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;kbytes, &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; unlimited
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; open files                      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 1024
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; pipe size            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;512 bytes, &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 8
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; POSIX message queues     &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;bytes, &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 819200
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; real-time priority              &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 0
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; stack size              &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;kbytes, &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 8192
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; cpu &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;seconds, &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; unlimited
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; max user processes              &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 3828
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; virtual memory          &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;kbytes, &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; unlimited
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; file locks                      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; unlimited
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;デーモンへの設定&quot;&gt;デーモンへの設定&lt;/h2&gt;

&lt;p&gt;次にサーバ上で動作させるデーモンプロセスのリソース制限をしましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.jp/index.php/Limits.conf&quot;&gt;archlinuxのlimits.confのページ&lt;/a&gt; を見ると興味深いことが書いてあります。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ノート: systemd を使っている場合 /etc/security/limits.conf の値は反映されません。/etc/systemd/system.conf, /etc/systemd/user.conf,/etc/systemd/&lt;systemd_unit&gt;/override.conf などを使ってリソースを制御することが可能です。詳しくは systemd-system.conf の man ページを見てください。&lt;/systemd_unit&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;デーモンに対する設定においては、systemd場合、 &lt;code class=&quot;highlighter-rouge&quot;&gt;limits.conf&lt;/code&gt; による設定はできないよ、ということです。&lt;/p&gt;

&lt;h3 id=&quot;全体へのデフォルト設定をする&quot;&gt;全体へのデフォルト設定をする&lt;/h3&gt;

&lt;p&gt;systemdにてコントロールされるプロセスのデフォルト値を変更するには &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/systemd/system.conf&lt;/code&gt; ファイルを編集します。
例えば、プロセス数やファイルディスクリプタ数を変更するには以下のように記述をします。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Manager]
&lt;span class=&quot;nv&quot;&gt;DefaultLimitNOFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;65536
&lt;span class=&quot;nv&quot;&gt;DefaultLimitNPROC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;65536
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;デーモンごとの設定をする&quot;&gt;デーモンごとの設定をする&lt;/h3&gt;

&lt;p&gt;本来、サービスを運用するのであれば、サービスに対して適切なリソースを割り当てるのが好ましいでしょう。&lt;/p&gt;

&lt;p&gt;その場合には &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/systemd/system/（サービス名）.service&lt;/code&gt; ファイルを作成して、 &lt;code class=&quot;highlighter-rouge&quot;&gt;[Service]&lt;/code&gt; ブロックに追加することができます。
なお、 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/systemd/system/（サービス名）.service&lt;/code&gt; が既に存在し、割当リソースだけ変更したいケースでは  &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/systemd/system/（サービス名）.service.d/override.conf&lt;/code&gt; によって上書きするのがよいでしょう。
なお、設定値は &lt;code class=&quot;highlighter-rouge&quot;&gt;（サービス名）.service&lt;/code&gt; の記述よりも &lt;code class=&quot;highlighter-rouge&quot;&gt;override.conf&lt;/code&gt; が優先されます。&lt;/p&gt;

&lt;p&gt;以下ではファイルディスクリプタの数を定義しています。&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;Service&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
LimitNOFILE&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;その後、デーモンを再起動して&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl daemon-reload

systemctl stop &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;サービス&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
systemctl start &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;サービス&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;設定が反映されているか確認しましょう。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /proc/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;プロセス番号&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/limits

Limit                     Soft Limit           Hard Limit           Units
Max cpu &lt;span class=&quot;nb&quot;&gt;time              &lt;/span&gt;unlimited            unlimited            seconds
Max file size             unlimited            unlimited            bytes
Max data size             unlimited            unlimited            bytes
Max stack size            8388608              unlimited            bytes
Max core file size        0                    unlimited            bytes
Max resident &lt;span class=&quot;nb&quot;&gt;set          &lt;/span&gt;unlimited            unlimited            bytes
Max processes             65536                65536                processes
Max open files            40000                40000                files
Max locked memory         65536                65536                bytes
Max address space         unlimited            unlimited            bytes
Max file locks            unlimited            unlimited            locks
Max pending signals       29779                29779                signals
Max msgqueue size         819200               819200               bytes
Max nice priority         0                    0
Max realtime priority     0                    0
Max realtime timeout      unlimited            unlimited            us
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ファルディスクリプタ（Max open files）が40000になっていますね。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;systemdでのリソース変更を行いました。
PAM認証でのユーザログインと、systemd上のデーモンプロセスでは設定の仕方が異なるので注意が必要です。&lt;/p&gt;

&lt;p&gt;くれぐれも &lt;code class=&quot;highlighter-rouge&quot;&gt;ulimit&lt;/code&gt; だけを変更して、 「Too many open files」 でアプリケーションが死亡しないように注意してくださいね！&lt;/p&gt;

&lt;h2 id=&quot;参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codezine.jp/article/detail/4836&quot;&gt;ファイルディスクリプタについて&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.jp/index.php/Limits.conf&quot;&gt;limits.conf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://rcm-fe.amazon-adsystem.com/e/cm?ref=qf_sp_asin_til&amp;amp;t=soudegesu-22&amp;amp;m=amazon&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as1&amp;amp;IS2=1&amp;amp;detail=1&amp;amp;asins=4798044911&amp;amp;linkId=ecbd4a37e5ba5b5255521397a806e73c&amp;amp;bc1=ffffff&amp;amp;lt1=_blank&amp;amp;fc1=333333&amp;amp;lc1=0066c0&amp;amp;bg1=ffffff&amp;amp;f=ifr&quot;&gt;
&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://rcm-fe.amazon-adsystem.com/e/cm?ref=qf_sp_asin_til&amp;amp;t=soudegesu-22&amp;amp;m=amazon&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as1&amp;amp;IS2=1&amp;amp;detail=1&amp;amp;asins=4797382686&amp;amp;linkId=72348c4f427aaabd31a6e84ed1928825&amp;amp;bc1=ffffff&amp;amp;lt1=_blank&amp;amp;fc1=333333&amp;amp;lc1=0066c0&amp;amp;bg1=ffffff&amp;amp;f=ifr&quot;&gt;
&lt;/iframe&gt;
&lt;/div&gt;</content><author><name>soudegesu</name></author><category term="systemd" /><summary type="html">今回はAmazon Linux から Amazon Linux2 への移行をする機会があったので、 プロセス数やファイルディスクリプタ数といったリソース制限の変更に関して備忘録として残しておきます。</summary></entry><entry><title type="html">Amazon Linux2(systemd)のシステム時刻を変更する</title><link href="https://www.soudegesu.com/linux/systemd_clock/" rel="alternate" type="text/html" title="Amazon Linux2(systemd)のシステム時刻を変更する" /><published>2018-06-09T00:00:00+09:00</published><updated>2018-06-09T00:00:00+09:00</updated><id>https://www.soudegesu.com/linux/systemd_clock</id><content type="html" xml:base="https://www.soudegesu.com/linux/systemd_clock/">&lt;p&gt;今回はAmazon Linux から Amazon Linux2 への移行をする機会があったので、
システム時刻の変更に関して備忘録として残しておきます。&lt;/p&gt;

&lt;p&gt;なお、以降の手順は公式の Amazon Linux2 のAMIをそのままブートした後に試しています。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#システムクロックを変更する&quot; id=&quot;markdown-toc-システムクロックを変更する&quot;&gt;システムクロックを変更する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ハードウェアクロックを確認する&quot; id=&quot;markdown-toc-ハードウェアクロックを確認する&quot;&gt;ハードウェアクロックを確認する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考にさせていただいたサイト&quot; id=&quot;markdown-toc-参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;システムクロックを変更する&quot;&gt;システムクロックを変更する&lt;/h2&gt;

&lt;p&gt;システムクロックは &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/adjtime&lt;/code&gt; を使ってハードウェアクロックから算出されます。
&lt;code class=&quot;highlighter-rouge&quot;&gt;systemd&lt;/code&gt; の場合、 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/adjtime&lt;/code&gt; が存在しないとデフォルトでUTCを使うそうですが、今回は存在していました。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /etc/adjtime

&amp;gt; 0.0 0 0.0
&amp;gt; 0
&amp;gt; UTC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;システムクロックを確認しましょう。 &lt;code class=&quot;highlighter-rouge&quot;&gt;timedatectl&lt;/code&gt; コマンドを実行してみます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;timedatectl

&amp;gt;       Local time: Sat 2018-06-09 05:16:29 UTC
&amp;gt;   Universal time: Sat 2018-06-09 05:16:29 UTC
&amp;gt;         RTC time: Sat 2018-06-09 05:16:28
&amp;gt;        Time zone: n/a (UTC, +0000)
&amp;gt;      NTP enabled: yes
&amp;gt; NTP synchronized: no
&amp;gt;  RTC in local TZ: no
&amp;gt;      DST active: n/a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;何もしていないので、UTCのままですね。&lt;/p&gt;

&lt;p&gt;次にtimezoneを &lt;code class=&quot;highlighter-rouge&quot;&gt;Asia/Tokyo&lt;/code&gt; にしてみましょう。こちらも &lt;code class=&quot;highlighter-rouge&quot;&gt;timedatectl&lt;/code&gt; コマンドで設定可能です。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;timedatectl set-timezone Asia/Tokyo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;設定がされたか確認してみましょう。 &lt;code class=&quot;highlighter-rouge&quot;&gt;timedatectl&lt;/code&gt; コマンドを実行したら、 Time zoneがJSTになっていることが確認できます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;timedatectl

&amp;gt;       Local time: Sat 2018-06-09 14:57:45 JST
&amp;gt;   Universal time: Sat 2018-06-09 05:57:45 UTC
&amp;gt;         RTC time: Sat 2018-06-09 05:57:45
&amp;gt;        Time zone: Asia/Tokyo (JST, +0900)
&amp;gt;      NTP enabled: yes
&amp;gt; NTP synchronized: no
&amp;gt;  RTC in local TZ: no
&amp;gt;       DST active: n/a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;タイムゾーンを変更すると、 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/localtime&lt;/code&gt; にその設定が反映されます。
ファイルを見てみましょう。 &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt; してみましょう。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /etc/localtime

&amp;gt; TZif2
&amp;gt;         ��&amp;gt;p��K����p��-���ۭ�����݌�����~~LMTJDTJSTTZif2
&amp;gt;
&amp;gt; �����e¤p�����&amp;gt;p������K��������p������-�����������ۭ�������������݌�����~~LMTJDTJST
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;文字化けしてしまいましたね。代わりに、 &lt;code class=&quot;highlighter-rouge&quot;&gt;zdump&lt;/code&gt; コマンドを使うことで &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/localtime&lt;/code&gt; が指すタイムゾーンの情報を確認してみましょう。
これで JST になっていることを確認できました。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zdump /etc/localtime

&amp;gt; /etc/localtime  Sat Jun  9 14:57:54 2018 JST
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ちなみに &lt;code class=&quot;highlighter-rouge&quot;&gt;timedatectl set-time　&quot;2018-06-09 12:00:00&quot;&lt;/code&gt; のように、
直接引数に与えられた時刻に設定することができますが、個人的に使った経験はありません。&lt;/p&gt;

&lt;h2 id=&quot;ハードウェアクロックを確認する&quot;&gt;ハードウェアクロックを確認する&lt;/h2&gt;

&lt;p&gt;Linuxが起動するときにシステムクロックを設定するため、ハードウェアクロックの情報が参照されます。&lt;/p&gt;

&lt;p&gt;ハードウェアクロックの情報は &lt;code class=&quot;highlighter-rouge&quot;&gt;hwclock&lt;/code&gt; コマンドで確認できます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hwclock --debug

&amp;gt; hwclock from util-linux 2.30.2
&amp;gt; Trying to open: /dev/rtc0
&amp;gt; Using the rtc interface to the clock.
&amp;gt; Last drift adjustment done at 0 seconds after 1969
&amp;gt; Last calibration done at 0 seconds after 1969
&amp;gt; Hardware clock is on UTC time
&amp;gt; Assuming hardware clock is kept in UTC time.
&amp;gt; Waiting for clock tick...
&amp;gt; ...got clock tick
&amp;gt; Time read from Hardware Clock: 2018/06/09 06:09:22
&amp;gt; Hw clock time : 2018/06/09 06:09:22 = 1528524562 seconds since 1969
&amp;gt; Time since last adjustment is 1528524562 seconds
&amp;gt; Calculated Hardware Clock drift is 0.000000 seconds
&amp;gt; 2018-06-09 15:09:21.645250+0900
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;デバッグオプションなしで、 &lt;code class=&quot;highlighter-rouge&quot;&gt;hwclock&lt;/code&gt; だけ実行すると、ハードウェアに記録されている時刻が表示されます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hwclock

&amp;gt; 2018-06-09 15:09:21.645250+0900
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.jp/index.php/%E6%99%82%E5%88%BB&quot;&gt;時刻 archlinux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://rcm-fe.amazon-adsystem.com/e/cm?ref=qf_sp_asin_til&amp;amp;t=soudegesu-22&amp;amp;m=amazon&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as1&amp;amp;IS2=1&amp;amp;detail=1&amp;amp;asins=4798044911&amp;amp;linkId=ecbd4a37e5ba5b5255521397a806e73c&amp;amp;bc1=ffffff&amp;amp;lt1=_blank&amp;amp;fc1=333333&amp;amp;lc1=0066c0&amp;amp;bg1=ffffff&amp;amp;f=ifr&quot;&gt;
&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://rcm-fe.amazon-adsystem.com/e/cm?ref=qf_sp_asin_til&amp;amp;t=soudegesu-22&amp;amp;m=amazon&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as1&amp;amp;IS2=1&amp;amp;detail=1&amp;amp;asins=4797382686&amp;amp;linkId=72348c4f427aaabd31a6e84ed1928825&amp;amp;bc1=ffffff&amp;amp;lt1=_blank&amp;amp;fc1=333333&amp;amp;lc1=0066c0&amp;amp;bg1=ffffff&amp;amp;f=ifr&quot;&gt;
&lt;/iframe&gt;
&lt;/div&gt;</content><author><name>soudegesu</name></author><category term="systemd" /><summary type="html">今回はAmazon Linux から Amazon Linux2 への移行をする機会があったので、 システム時刻の変更に関して備忘録として残しておきます。</summary></entry><entry><title type="html">「ピープルウェア」を読んでマネジメントを考える</title><link href="https://www.soudegesu.com/book/peopleware/" rel="alternate" type="text/html" title="「ピープルウェア」を読んでマネジメントを考える" /><published>2018-06-05T00:00:00+09:00</published><updated>2018-06-05T00:00:00+09:00</updated><id>https://www.soudegesu.com/book/peopleware</id><content type="html" xml:base="https://www.soudegesu.com/book/peopleware/">&lt;p&gt;今更ながらですが、「ピープルウェア」を読みました。人通り読み終えたので、所感を書きたいと思います。
以降の内容は &lt;strong&gt;若干のネタバレを含みます&lt;/strong&gt; ので、本をまだ読まれていない方は、先に本を読むことをオススメします。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#人間同士のコラボレーションの重要性を説いた本&quot; id=&quot;markdown-toc-人間同士のコラボレーションの重要性を説いた本&quot;&gt;人間同士のコラボレーションの重要性を説いた本&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#チーミングに関する話&quot; id=&quot;markdown-toc-チーミングに関する話&quot;&gt;チーミングに関する話&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#成功するチームのメンバー構成&quot; id=&quot;markdown-toc-成功するチームのメンバー構成&quot;&gt;成功するチームのメンバー構成&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#チームにマイナスをもたらす人物の危険性を考慮する&quot; id=&quot;markdown-toc-チームにマイナスをもたらす人物の危険性を考慮する&quot;&gt;チームにマイナスをもたらす人物の危険性を考慮する&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#マネジメント層の役割について&quot; id=&quot;markdown-toc-マネジメント層の役割について&quot;&gt;マネジメント層の役割について&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#マネジメントはナイスミドルがやるべきなのか&quot; id=&quot;markdown-toc-マネジメントはナイスミドルがやるべきなのか&quot;&gt;マネジメントはナイスミドルがやるべきなのか&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#マネジメント層をやめるべきだ&quot; id=&quot;markdown-toc-マネジメント層をやめるべきだ&quot;&gt;マネジメント「層」をやめるべきだ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#森と木を見てエンパワーするのが仕事&quot; id=&quot;markdown-toc-森と木を見てエンパワーするのが仕事&quot;&gt;森と木を見て、エンパワーするのが仕事&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.co.jp/gp/product/B00I96CJWO/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=B00I96CJWO&amp;amp;linkCode=as2&amp;amp;tag=soudegesu-22&amp;amp;linkId=6ae02fcebb6f0d35b7626bba2e51f880&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=B00I96CJWO&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=soudegesu-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;//ir-jp.amazon-adsystem.com/e/ir?t=soudegesu-22&amp;amp;l=am2&amp;amp;o=9&amp;amp;a=B00I96CJWO&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;人間同士のコラボレーションの重要性を説いた本&quot;&gt;人間同士のコラボレーションの重要性を説いた本&lt;/h2&gt;

&lt;p&gt;本書はソフトウェア開発における &lt;strong&gt;「人の問題」&lt;/strong&gt; にフォーカスした書籍である。&lt;/p&gt;

&lt;p&gt;以下はエンジニア間の会話でもよく引き合いに出るフレーズだが、これの出処は本書である。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;実際のところ、ソフトウェア開発上の問題の多くは、技術的というよりも社会学的なものである。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;人間がもたらす現場あるあるな残念事例も紹介されてくるのだが、基本的なスタンスとしては
&lt;strong&gt;チームやプロジェクトを失敗に導く方法と、それが引き起こす問題やリスクの指摘&lt;/strong&gt; をしてくれる。
一方で、課題への対処については、直接的な解決策の提示は少ない。
事例ベースでの成功したパターンの紹介とそれに対する解説が記載される程度だ。&lt;/p&gt;

&lt;p&gt;人間的な問題は要素が複雑であり一般化するのは難しいことから、解決策は状況に応じて現場で考えねばならない、ということかもしれない。&lt;/p&gt;

&lt;h2 id=&quot;チーミングに関する話&quot;&gt;チーミングに関する話&lt;/h2&gt;
&lt;p&gt;本書ではチーミングについても触れている。
単に良いチームを作り・維持するための話だけではなく、やはり課題・リスク中心の話題（これが原因で生産性が落ちている、等）が多かった気がする。&lt;/p&gt;

&lt;h3 id=&quot;成功するチームのメンバー構成&quot;&gt;成功するチームのメンバー構成&lt;/h3&gt;

&lt;p&gt;最近では &lt;a href=&quot;https://bizhint.jp/keyword/101187&quot;&gt;心理的安全性&lt;/a&gt; という言葉が良く取り上げられるが、チームも一概に成功する「構成」はないのであろう。&lt;/p&gt;

&lt;p&gt;個々が特定分野のプロフェッショナルとして自立し、チームで必要なケイパビリティを充足するようなチームは聞いたことがある。&lt;/p&gt;

&lt;p&gt;一方、本書ではチームメンバー間の活性化を得意とする「触媒」としての役割を持ったメンバーが所属している構成のチームを紹介している。
&lt;strong&gt;個人単体としての成果は低い（ほとんど無いに等しい）が、チームメンバーの成果に寄与する人&lt;/strong&gt; なわけであるから、触媒という表現は的を得ている。&lt;/p&gt;

&lt;p&gt;今思えば、私自身も触媒的な役割をするメンバーがいるチームで仕事をしたことがあるが、あの時は雰囲気も良く、アウトプットもあり、「最高のチームだ」と感じることができた。&lt;/p&gt;

&lt;p&gt;過去に &lt;a href=&quot;http://okutta.blog.jp/archives/18749840.html&quot;&gt;エンジニアのモチベーションを上げるために応援専門の女子を採用する中国企業&lt;/a&gt; の話題が
一時期バズった（軽く問題扱いすらされた）けど、解像度を粗くすれば、これも触媒としての役割を持ったチームカテゴリに分類されるような気がした。&lt;/p&gt;

&lt;h3 id=&quot;チームにマイナスをもたらす人物の危険性を考慮する&quot;&gt;チームにマイナスをもたらす人物の危険性を考慮する&lt;/h3&gt;

&lt;p&gt;成熟したチームを作り上げるのは時間もかかるし、必要な要素がたくさんある。
それに対し、チームを崩壊させるだけなら、いくつも手段はあるし、それらの中のいくつかを行使するだけだし、手間もかからない。&lt;/p&gt;

&lt;p&gt;とりわけ、 &lt;strong&gt;「微妙なメンバーをチームに招き入れる」&lt;/strong&gt; のは最大のリスクであろう。&lt;/p&gt;

&lt;p&gt;組織の活動を停滞させる原因はたった一人の人間であった、というのも私自身経験もしている。いわば、「プロのトラブルメーカー」だ。&lt;/p&gt;

&lt;p&gt;どこかの外資系企業の人事担当者の話を見聞きしたことがあるが、&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;優秀な人間を逃すリスク　＜　変な人間を会社に入れないリスク&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;が優先されると聞いた。&lt;/p&gt;

&lt;p&gt;だから、入り口を狭くする、と。&lt;/p&gt;

&lt;h2 id=&quot;マネジメント層の役割について&quot;&gt;マネジメント層の役割について&lt;/h2&gt;

&lt;p&gt;本書は人間のコラボレーションの話であるから、マネジメント層の話に触れないわけにはいくまい。
マネジメント層がチームの邪魔をしないのはもちろん、どうやってチームをエンパワーするか、というヒントが本書には含まれていた。&lt;/p&gt;

&lt;h3 id=&quot;マネジメントはナイスミドルがやるべきなのか&quot;&gt;マネジメントはナイスミドルがやるべきなのか&lt;/h3&gt;

&lt;p&gt;この手の本を読んでいると、より一層 &lt;strong&gt;「マネジメントという仕事の重要性」&lt;/strong&gt; を感じるわけだが、
現状の（少なくとも私の観測範囲の中の）マネジメント層は &lt;strong&gt;ナイスミドルより上&lt;/strong&gt; の年齢層が担っているケースが多い。これは問題ではないだろうか。&lt;/p&gt;

&lt;p&gt;これは偏見かもしれないが、時間的な人生経験が長いことがアドバンテージとされるのは、粘着質な人間関係が是とされた旧来の日本社会的な体質の上で成り立つ話だったのでは、と考えている。
情報伝達手段が発達していない中で、人との対面でのコミュニケーションを取る機会が多かったことも一つの要素かもしれない。&lt;/p&gt;

&lt;p&gt;いずれにせよ、「経験から得られるもの」とされていたものはエッセンスだけ抽出され、スキルとして規定された今、「年齢は関係ないね」となる。&lt;/p&gt;

&lt;p&gt;プログラミングや外国語と同じように、後天的に鍛えることもできるし、先天的なセンスを持った若者もいる。
そのため、もちろんナイスミドルがマネジメントしてもいいけど、 &lt;strong&gt;「ナイスミドルでないとマネジメントさせない」というのは好ましくない。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;マネジメント層をやめるべきだ&quot;&gt;マネジメント「層」をやめるべきだ&lt;/h3&gt;

&lt;p&gt;マネジメントもスキルであるならば、社内でイケているとされている人間がマネジメントに従事する、というパスには違和感がある。
マネジメント職は何かの上位職という前提になってしまっているからだ。&lt;/p&gt;

&lt;p&gt;上位職の概念は厄介で、様々なものが集約されてくる。
社内的な権力と報酬が良い例だ。&lt;/p&gt;

&lt;p&gt;まず権力の話をする。マネジメント職の人間には「人をマネージする」という範囲を超えた権限を与えられているケースが多い。&lt;/p&gt;

&lt;p&gt;身近な例で言うと、プロダクトマネジメントだ。
別にプロダクトに対して何の関与もないのに、「私の承認が必要だ」と踏み込んでくるのは  &lt;strong&gt;「マネジメントの範囲が分かっていないマネジメント」&lt;/strong&gt; に他ならない。&lt;/p&gt;

&lt;p&gt;これはもう少し深掘りしていくと &lt;strong&gt;「マネジメントの範囲を決めていないマネジメント業務が一律でマネジメント層に丸投げされる」&lt;/strong&gt; 、という組織的課題に昇華できるのではないだろうか。&lt;/p&gt;

&lt;p&gt;マネジメントには管理する対象が存在する。それを把握して、正しく制御するための権限だけを与えるべきだと思う。&lt;/p&gt;

&lt;p&gt;次に報酬の話だ。マネジメント職の方が報酬が高ければ、そちらの方が人気が出てくるだろう。
「マネジメントしたい人はこちらへどうぞ。ちなみにエンジニアと給料は一緒だからね。」と宣言するだけで、どれだけ不毛な足の引っ張りあいが無くなることか。&lt;/p&gt;

&lt;p&gt;マネジメント職を上位職と規定しないだけで、空き席待ちをするナイスミドルのストレスがどれだけ緩和されることか。&lt;/p&gt;

&lt;h3 id=&quot;森と木を見てエンパワーするのが仕事&quot;&gt;森と木を見て、エンパワーするのが仕事&lt;/h3&gt;

&lt;p&gt;個人の集合体がチームであり、組織である。&lt;/p&gt;

&lt;p&gt;だから、マネージするのは個人だと考えている。結果的にその個人たちが作り出したチームは「状態を把握する」だけで十分だ。&lt;/p&gt;

&lt;p&gt;間違っても、「チームをマネージ」し、そこから「個人をマネージする」という順序で思考してはいけない。&lt;/p&gt;

&lt;p&gt;チームには実体がないから、実体は個人の方にあるから。&lt;/p&gt;

&lt;p&gt;書きながら、そもそも、マネジメントという言葉自体が不適切な気がしてきた。 &lt;strong&gt;「管理する」というのはもはや本来期待すべき業務ではなくなってきている&lt;/strong&gt; と感じたからだ。&lt;/p&gt;

&lt;p&gt;どう個人をエンパワーするかを考え、個人とチームを観測し、個々人をより成長させるために足りないケイパビリティを充足するかを考えるのが仕事だと思った。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;最後の方はとても雑多になってしまったけど、マネジメントのあるべき姿を考え、チームをダメにしないための方法を考え、人への接し方を考えさせられた良い一冊でした。&lt;/p&gt;

&lt;p&gt;自分の中でマネジメントに対する軸となる考えを持つことは重要で、そのエッセンスを拾うことができました。&lt;/p&gt;

&lt;p&gt;マネジメント。自分の観測範囲の中でも良いから、少しづつ実践を繰り返し、鍛えておきたいスキルですね。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://rcm-fe.amazon-adsystem.com/e/cm?ref=qf_sp_asin_til&amp;amp;t=soudegesu-22&amp;amp;m=amazon&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as1&amp;amp;IS2=1&amp;amp;detail=1&amp;amp;asins=4822281108&amp;amp;linkId=374d5bb38701eaa66d7dbd61a6f404fc&amp;amp;bc1=ffffff&amp;amp;lt1=_blank&amp;amp;fc1=333333&amp;amp;lc1=0066c0&amp;amp;bg1=ffffff&amp;amp;f=ifr&quot;&gt;
&lt;/iframe&gt;
&lt;/div&gt;</content><author><name>soudegesu</name></author><category term="book" /><summary type="html">今更ながらですが、「ピープルウェア」を読みました。人通り読み終えたので、所感を書きたいと思います。 以降の内容は 若干のネタバレを含みます ので、本をまだ読まれていない方は、先に本を読むことをオススメします。</summary></entry><entry><title type="html">S3にエクスポートされたCloudWatch LogsのファイルをGlueのCrawlerでETLしようとして轟沈した話</title><link href="https://www.soudegesu.com/aws/glue-process-cloudwatchlogs/" rel="alternate" type="text/html" title="S3にエクスポートされたCloudWatch LogsのファイルをGlueのCrawlerでETLしようとして轟沈した話" /><published>2018-05-30T00:00:00+09:00</published><updated>2018-05-30T00:00:00+09:00</updated><id>https://www.soudegesu.com/aws/glue-process-cloudwatchlogs</id><content type="html" xml:base="https://www.soudegesu.com/aws/glue-process-cloudwatchlogs/">&lt;p&gt;S3にエクスポートした CloudWatch Logs のログストリームをAWS GlueでETLしようと挑戦してみました。
結論から言うと、GlueのCrawlerでログをいい感じにパースできなかったので、失敗しました、という話です。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#モチベーション&quot; id=&quot;markdown-toc-モチベーション&quot;&gt;モチベーション&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#s3のファイルをetlしたい&quot; id=&quot;markdown-toc-s3のファイルをetlしたい&quot;&gt;S3のファイルをETLしたい&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#etlといえばglue&quot; id=&quot;markdown-toc-etlといえばglue&quot;&gt;ETLといえばGlue&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#やってみよう&quot; id=&quot;markdown-toc-やってみよう&quot;&gt;やってみよう&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#基データのログフォーマット&quot; id=&quot;markdown-toc-基データのログフォーマット&quot;&gt;基データのログフォーマット&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#crawlerの設定でつまずく&quot; id=&quot;markdown-toc-crawlerの設定でつまずく&quot;&gt;Crawlerの設定でつまずく&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ログフォーマットが変わっている&quot; id=&quot;markdown-toc-ログフォーマットが変わっている&quot;&gt;ログフォーマットが変わっている？&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#grokも模索してみたが&quot; id=&quot;markdown-toc-grokも模索してみたが&quot;&gt;Grokも模索してみたが。。&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#サポートにも相談してみたが&quot; id=&quot;markdown-toc-サポートにも相談してみたが&quot;&gt;サポートにも相談してみたが。。&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考にさせていただいたサイト&quot; id=&quot;markdown-toc-参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;モチベーション&quot;&gt;モチベーション&lt;/h2&gt;

&lt;h3 id=&quot;s3のファイルをetlしたい&quot;&gt;S3のファイルをETLしたい&lt;/h3&gt;

&lt;p&gt;「 &lt;a href=&quot;/aws/export-cloudwatchlogs-to-s3/&quot;&gt;Step FunctionsでCloudWatch LogsのロググループをS3へエクスポートする&lt;/a&gt; 」 の記事にて、
CloudWatch LogsのログストリームをS3へエクスポートしました。&lt;/p&gt;

&lt;p&gt;次のステップとしては、データ分析しやすいようにETLしようというわけです。&lt;/p&gt;

&lt;h3 id=&quot;etlといえばglue&quot;&gt;ETLといえばGlue&lt;/h3&gt;

&lt;p&gt;AWS上でETL処理を行うのであれば、聞いたことがあるのはやはり &lt;a href=&quot;https://aws.amazon.com/jp/glue/&quot;&gt;AWS Glue&lt;/a&gt; でしょう。&lt;/p&gt;

&lt;p&gt;Apache Sparkをベースとしており、せっかくだから使ってみたかったわけです。&lt;/p&gt;

&lt;h2 id=&quot;やってみよう&quot;&gt;やってみよう&lt;/h2&gt;

&lt;p&gt;以下のような構成で処理させようと考えていました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180530/architecture.png&quot; alt=&quot;architecture&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;基データのログフォーマット&quot;&gt;基データのログフォーマット&lt;/h3&gt;

&lt;p&gt;CloudWatch LogsはログデータがJSONフォーマットになっていると、
JSON pathのような検索ができたり、ログを展開したときにpretty printしてくれるのでよく使ってしまいます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180530/cloudwatch_logs.png&quot; alt=&quot;cloudwatch_logs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今回処理させたいデータも、この &lt;strong&gt;JSONフォーマットのログをCloudWatch Logsのエクスポート機能でS3にファイル出力したもの&lt;/strong&gt; です。&lt;/p&gt;

&lt;h3 id=&quot;crawlerの設定でつまずく&quot;&gt;Crawlerの設定でつまずく&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/jp/blogs/news/build-a-data-lake-foundation-with-aws-glue-and-amazon-s3/&quot;&gt;AWS Glue と Amazon S3 を使用してデータレイクの基礎を構築する&lt;/a&gt; にも記載がありますが、
Glueには &lt;strong&gt;Crawler&lt;/strong&gt; という設定があり、指定したデータソースの更新を確認し、データカタログを &lt;strong&gt;よしなに作ってくれる機能&lt;/strong&gt; があります。&lt;/p&gt;

&lt;p&gt;ただ、どう「よしなに」作ってくれるかというと、 &lt;a href=&quot;https://docs.aws.amazon.com/ja_jp/glue/latest/dg/add-classifier.html&quot;&gt;公式ドキュメント&lt;/a&gt;
記載の通り、テキストのフォーマット毎に指定のロジックがあり、それに準じて処理するデータ形式を判断しているようです。&lt;/p&gt;

&lt;p&gt;これを見て &lt;strong&gt;「よっしゃ、いい感じにJSONになるのね」&lt;/strong&gt; と早合点して、ポチポチ設定を進めていったのが問題でした。&lt;/p&gt;

&lt;h3 id=&quot;ログフォーマットが変わっている&quot;&gt;ログフォーマットが変わっている？&lt;/h3&gt;

&lt;p&gt;Crawlerが S3バケットのファイルからデータカタログを作成してくれたわけですが、以下のように 「&lt;a href=&quot;http://amzn.github.io/ion-docs/&quot;&gt;ion&lt;/a&gt; でした」
という結果が出てきました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180530/ion.png&quot; alt=&quot;ion&quot; /&gt;&lt;/p&gt;

&lt;p&gt;「あれ？jsonではないの？」&lt;/p&gt;

&lt;p&gt;そう思って、S3上の .gz ファイルの中身を見てみると以下のような形式になっていました。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2018-05-27T00:00:00.107Z {ログのJSON文字列}
2018-05-27T00:01:36.107Z {ログのJSON文字列}
(以下略)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;CloudWatch Logsからログデータをエクスポートすると、タイムスタンプ情報も出力されてしまい、 JSON形式でなくなっていた&lt;/strong&gt; わけですね。&lt;/p&gt;

&lt;h3 id=&quot;grokも模索してみたが&quot;&gt;Grokも模索してみたが。。&lt;/h3&gt;

&lt;p&gt;Crawlerがログファイルを分類するために、自前の &lt;a href=&quot;https://docs.aws.amazon.com/ja_jp/glue/latest/dg/custom-classifier.html&quot;&gt;カスタム分類子&lt;/a&gt; を設定することもできます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180530/crawler_classifier.png&quot; alt=&quot;crawler_classifier&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Grok&lt;/li&gt;
  &lt;li&gt;XML&lt;/li&gt;
  &lt;li&gt;JSON&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の3つが定義されているのですが、XMLとJSONはすでにテキスト形式がそのフォーマットに加工されている必要があるので、使えそうにありません。
よく Log Stash などで使われる &lt;strong&gt;Grok形式&lt;/strong&gt; が一番カスタマイズ性が高いのですが、この設定を用いても
要素が可変になるJSONを処理することはできませんでした。&lt;/p&gt;

&lt;h3 id=&quot;サポートにも相談してみたが&quot;&gt;サポートにも相談してみたが。。&lt;/h3&gt;

&lt;p&gt;「私のGlueの設定が悪いのかも」と一縷の望みを託して、AWSのサポートにも聞いてみたのですが、「Glue単体で今回のログフォーマットは処理できない」と回答をいただきました。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;GlueのCrawlerでいい感じにデータカタログを作るのに失敗しました。&lt;/p&gt;

&lt;p&gt;デフォルトの分類子、または、自前で定義したカスタム分類子によってGlueのCrawlerはデータカタログを作成してくれます。
しかし、すべてのフォーマットに対して柔軟に処理できるわけではないので、フォーマットによってはGlueが処理しやすいように前段で自前ETLを挟んであげる必要がありそうです。&lt;/p&gt;

&lt;p&gt;特に今回のような、 &lt;strong&gt;CloudWatch LogsのログがJSON形式で、エクスポート機能でS3に外出ししたファイル（ログの一部がJSON形式）&lt;/strong&gt; の場合には相性が悪いということがわかりました。&lt;/p&gt;

&lt;h2 id=&quot;参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/jp/blogs/news/build-a-data-lake-foundation-with-aws-glue-and-amazon-s3/&quot;&gt;AWS Glue と Amazon S3 を使用してデータレイクの基礎を構築する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://rcm-fe.amazon-adsystem.com/e/cm?ref=qf_sp_asin_til&amp;amp;t=soudegesu-22&amp;amp;m=amazon&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as1&amp;amp;IS2=1&amp;amp;detail=1&amp;amp;asins=4798155160&amp;amp;linkId=e91e78f505e53d2986a0635db4aad1ce&amp;amp;bc1=ffffff&amp;amp;lt1=_blank&amp;amp;fc1=333333&amp;amp;lc1=0066c0&amp;amp;bg1=ffffff&amp;amp;f=ifr&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;</content><author><name>soudegesu</name></author><category term="s3" /><category term="cloudwatchlogs" /><category term="glue" /><summary type="html">S3にエクスポートした CloudWatch Logs のログストリームをAWS GlueでETLしようと挑戦してみました。 結論から言うと、GlueのCrawlerでログをいい感じにパースできなかったので、失敗しました、という話です。</summary></entry><entry><title type="html">Step FunctionsでCloudWatch LogsのロググループをS3へエクスポートする</title><link href="https://www.soudegesu.com/aws/export-cloudwatchlogs-to-s3/" rel="alternate" type="text/html" title="Step FunctionsでCloudWatch LogsのロググループをS3へエクスポートする" /><published>2018-05-23T00:00:00+09:00</published><updated>2018-05-23T00:00:00+09:00</updated><id>https://www.soudegesu.com/aws/export-cloudwatchlogs-to-s3</id><content type="html" xml:base="https://www.soudegesu.com/aws/export-cloudwatchlogs-to-s3/">&lt;p&gt;CloudWatch LogsにはロググループをS3にエクスポートする機能がついています。
しかし、エクスポート機能には同時実行数制限があるので、 今回は Step Functions を使ってS3へのログのエクスポートを実現しました。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#モチベーション&quot; id=&quot;markdown-toc-モチベーション&quot;&gt;モチベーション&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ログをs3にエクスポートしたい&quot; id=&quot;markdown-toc-ログをs3にエクスポートしたい&quot;&gt;ログをS3にエクスポートしたい&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#subscription-filterが使われているだと&quot; id=&quot;markdown-toc-subscription-filterが使われているだと&quot;&gt;Subscription Filterが使われている、、だと!?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#create-export-taskは同時に1実行まで&quot; id=&quot;markdown-toc-create-export-taskは同時に1実行まで&quot;&gt;Create Export Taskは同時に1実行まで&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#step-functionsで-create-export-task-apiを呼びまくる&quot; id=&quot;markdown-toc-step-functionsで-create-export-task-apiを呼びまくる&quot;&gt;Step Functionsで create export task APIを呼びまくる&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#s3バケットを準備する&quot; id=&quot;markdown-toc-s3バケットを準備する&quot;&gt;S3バケットを準備する&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#lambdaの実装&quot; id=&quot;markdown-toc-lambdaの実装&quot;&gt;Lambdaの実装&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#step-functionsの実装&quot; id=&quot;markdown-toc-step-functionsの実装&quot;&gt;Step Functionsの実装&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cloudwatch-eventsの設定&quot; id=&quot;markdown-toc-cloudwatch-eventsの設定&quot;&gt;CloudWatch Eventsの設定&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#動かしてみる&quot; id=&quot;markdown-toc-動かしてみる&quot;&gt;動かしてみる&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考にさせていただいたサイト&quot; id=&quot;markdown-toc-参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;モチベーション&quot;&gt;モチベーション&lt;/h2&gt;

&lt;h3 id=&quot;ログをs3にエクスポートしたい&quot;&gt;ログをS3にエクスポートしたい&lt;/h3&gt;

&lt;p&gt;CloudWatch Logsのコンソールは特定の文字列を含むログを検索するのは得意ですが、ログの集計や可視化には向いていません。
S3にログを集積し、そこをDWHにしてETL処理を施して可視化したりするのが事例としてよく見かけるので、
今回は &lt;strong&gt;Cloudwatch LogsのいくつかのログストリームをS3にエクスポートしたい&lt;/strong&gt; と考えました。&lt;/p&gt;

&lt;h3 id=&quot;subscription-filterが使われているだと&quot;&gt;Subscription Filterが使われている、、だと!?&lt;/h3&gt;

&lt;p&gt;CloudWatch LogsからS3へログストリームを転送する簡易な方法は &lt;a href=&quot;https://docs.aws.amazon.com/ja_jp/firehose/latest/dev/what-is-this-service.html&quot;&gt;Kinesis Firehose&lt;/a&gt; を使う方法です。&lt;/p&gt;

&lt;p&gt;リアルタイムでログを流し込めますし、処理中に Lambda 関数を挟むことができるので大変便利ですが、ここで一つ問題がありました。&lt;/p&gt;

&lt;p&gt;それは &lt;strong&gt;既に Subscription Filter が埋まっていた&lt;/strong&gt; ことです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180523/cloudwatchlogs_subscription.png&quot; alt=&quot;cloudwatchlogs_subscription&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（上は既にKinesis StreamにSubscription Filterを奪われた図）&lt;/p&gt;

&lt;p&gt;CloudWatch Logsを外部のAWSリソースにストリーム接続させるには &lt;code class=&quot;highlighter-rouge&quot;&gt;Subscription Filter&lt;/code&gt; を設定する必要があるのですが、仕様上、 &lt;strong&gt;1ログストリームに対して1Subscription Filterしか設定できません。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;大抵、CloudWatch Logsの重要なログストリームほど、Subscription Filterが既に何者かによって設定されていて、運用上すんなり引っ剥がせないのです。&lt;/p&gt;

&lt;h3 id=&quot;create-export-taskは同時に1実行まで&quot;&gt;Create Export Taskは同時に1実行まで&lt;/h3&gt;

&lt;p&gt;そこで、CloudWatch Logsの &lt;strong&gt;ログストリームをS3にエクスポートする機能&lt;/strong&gt; を使おうと考えるわけです。&lt;/p&gt;

&lt;p&gt;エクスポートする時間帯をUTCでレンジ指定することで、対象期間のログストリームを任意のバケットにエクスポートする &lt;strong&gt;タスク&lt;/strong&gt; を登録できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180523/export_task.png&quot; alt=&quot;export_task&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ただこれにも制約があります。&lt;strong&gt;エクスポート機能は1度に1回しか実行できない&lt;/strong&gt; のです。
エクスポートするためのタスクを生成した後、そのエクスポートタスクのステータスが &lt;code class=&quot;highlighter-rouge&quot;&gt;COMPLETED&lt;/code&gt; になるまで、
次のエクスポートを設定できません。&lt;/p&gt;

&lt;p&gt;実装目線で言えば、&lt;strong&gt;エクスポートタスクの終了を待ち合わせて、次のログストリームをエクスポートタスクを設定する&lt;/strong&gt; 必要がありそうです。&lt;/p&gt;

&lt;h2 id=&quot;step-functionsで-create-export-task-apiを呼びまくる&quot;&gt;Step Functionsで create export task APIを呼びまくる&lt;/h2&gt;

&lt;p&gt;というわけでやってみましょう。今回実装した処理の流れはざっくり以下です。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;CloudWatch Events で定期的に（Dailyとか） Step Functions を実行&lt;/li&gt;
  &lt;li&gt;Step Functionsから Lambda を キック&lt;/li&gt;
  &lt;li&gt;Lambda では CloudWatch Logs の create export task を実行&lt;/li&gt;
  &lt;li&gt;create export task で S3にログがエクスポートされる&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180523/export_to_s3.png&quot; alt=&quot;export_to_s3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;順を追って見ていきましょう。手順的には後段から作る必要があるので、それに準じて説明します。&lt;/p&gt;

&lt;h3 id=&quot;s3バケットを準備する&quot;&gt;S3バケットを準備する&lt;/h3&gt;

&lt;p&gt;まずは、ログがエクスポートされるS3バケットを作成しましょう。&lt;/p&gt;

&lt;p&gt;バケットは普通に作れば良いとして、 &lt;strong&gt;バケットポリシーを以下のように指定する&lt;/strong&gt; のがポイントです。&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Principal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Service&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;logs.${リージョン名}.amazonaws.com&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:PutObject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:s3:::${バケット名}/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Condition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;StringEquals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:x-amz-acl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bucket-owner-full-control&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Principal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Service&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;logs.${リージョン名}.amazonaws.com&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:GetBucketAcl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:s3:::${バケット名}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lambdaの実装&quot;&gt;Lambdaの実装&lt;/h3&gt;

&lt;p&gt;次に CloudWatch Logsのexport task apiをコールするためのLambda Functionを作成します。
以下にコードサンプルを載せます。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -*- coding:utf-8 -*-&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;boto3&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timedelta&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dateutil.parser&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pytz&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_is_executing_export_tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''
    export taskが実行中かどうかチェック
    '''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boto3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'logs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'PENDING'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'PENDING_CANCEL'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'RUNNING'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;describe_export_tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'exportTasks'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'exportTasks'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_get_target_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''
    CloudWatch Eventsの(実行日時 - 1)日をエクスポート対象にする
    '''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tokyo_timezone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pytz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Asia/Tokyo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;utc_dt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strptime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'time'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Y-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;m-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;dT&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;H:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;M:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;SZ'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tokyo_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utc_dt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;astimezone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokyo_timezone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokyo_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timedelta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;microsecond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;target_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;to_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timedelta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timedelta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;milliseconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_date&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_get_log_group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''
    ロググループを取得する
    '''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boto3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'logs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_token&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;describe_log_groups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# nextTokenは空文字を受け付けない&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;describe_log_groups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'logGroups'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'logGroups'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ロググループが多くて50件(最大)を超えるようなら再帰呼出し&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'nextToken'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_get_log_group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'nextToken'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_is_bucket_object_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bucket_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boto3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'s3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_objects_v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bucket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bucket_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Contents'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Contents'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_export_logs_to_s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bucket_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_group_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boto3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'logs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_export_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;taskName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logGroupName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_group_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destinationPrefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lambda_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bucket_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'BUCKET_NAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_get_target_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_is_executing_export_tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;running&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'time'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_group&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_get_log_group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bucket_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'logGroupName'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_date&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'logGroupName'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bucket_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'logGroupName'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_is_bucket_object_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bucket_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_export_logs_to_s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bucket_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_group_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'logGroupName'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;running&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'time'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;completed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'time'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ポイントは &lt;strong&gt;Lambdaに戻り値を設定する&lt;/strong&gt; ことです。
今までLamdaで戻り値を指定しても使いみちは殆ど無かったのですが、ここでは役に立つのです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step Functionsでは戻り値を受け取り、それを後段のタスクに渡すことができます。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-functionsの実装&quot;&gt;Step Functionsの実装&lt;/h3&gt;

&lt;p&gt;次にステートマシンを定義します。今回のメインはこれです。&lt;/p&gt;

&lt;p&gt;定義したステートマシンは以下のようになっています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180523/statemachine.png&quot; alt=&quot;statemachine&quot; /&gt;&lt;/p&gt;

&lt;p&gt;各ステートの説明はざっくり以下になります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Export Awslogs to S3&lt;/code&gt; ：create export taskをする&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Finished exporting?&lt;/code&gt; ：処理中または処理可能なログストリームが存在するかチェックする&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Success&lt;/code&gt; ：ステートマシンの終了&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Wait a minute&lt;/code&gt; ：export taskが終わりそうな時間を適当に待つ&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Comment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Export Cloudwatch LogStream recursively&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;StartAt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Export Awslogs to S3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TimeoutSeconds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;86400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;States&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Export Awslogs to S3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${Lambdaのarn}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Finished exporting?&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Finished exporting?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Choice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Choices&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Variable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$.status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;StringEquals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;running&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Wait a minute&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Variable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$.status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;StringEquals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;completed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Success&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Wait a minute&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Wait&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Seconds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Next&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Export Awslogs to S3&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Success&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Succeed&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ポイントとしては、&lt;strong&gt;Waitのステートを入れている&lt;/strong&gt; ところです。&lt;/p&gt;

&lt;p&gt;create export task のAPIは同時に実行できないので、&lt;code class=&quot;highlighter-rouge&quot;&gt;COMPLETE&lt;/code&gt; するまでの概算秒数を入れています。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lambdaには実行時間の上限があるのと、稼働時間に応じた課金になる&lt;/strong&gt; ので、Lambda関数の中でsleepするのは好ましくありません。&lt;/p&gt;

&lt;p&gt;もちろん、秒数は概算で問題なく、エクスポートが &lt;code class=&quot;highlighter-rouge&quot;&gt;COMPLETE&lt;/code&gt; 以外の場合には 
&lt;code class=&quot;highlighter-rouge&quot;&gt;Export Awslogs to S3&lt;/code&gt; → &lt;code class=&quot;highlighter-rouge&quot;&gt;Finished exporting?&lt;/code&gt; → &lt;code class=&quot;highlighter-rouge&quot;&gt;Wait a minute&lt;/code&gt; をぐるぐる回るようにしておくのが良いでしょう。
とは言え、無限ループにならないようにタイムアウト値 &lt;code class=&quot;highlighter-rouge&quot;&gt;TimeoutSeconds: 86400&lt;/code&gt; (24時間)を指定しています。 
少し長いかもしれないので、要調整です。&lt;/p&gt;

&lt;h3 id=&quot;cloudwatch-eventsの設定&quot;&gt;CloudWatch Eventsの設定&lt;/h3&gt;

&lt;p&gt;CloudWatch Eventsでタイムベースのトリガー指定をします。&lt;/p&gt;

&lt;p&gt;Step Functionsのarnを指定するだけなので、そこまで凝った所はありません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180523/cloudwatch_events.png&quot; alt=&quot;cloudwatch_events&quot; /&gt;&lt;/p&gt;

&lt;p&gt;このときに指定するロールには、信頼関係に &lt;code class=&quot;highlighter-rouge&quot;&gt;events.amazonaws.com&lt;/code&gt; を指定し、
最低限以下のポリシーが必要です。&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;states:StartExecution&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${Step Functionsのarn}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;動かしてみる&quot;&gt;動かしてみる&lt;/h3&gt;

&lt;p&gt;ロググループがたくさんエクスポートされていきます。
ちなみに、AWSアカウント内のロググループを全てエクスポートしたら、下のようになりました。
（表示列は設定変更しています）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180523/stacked_task.png&quot; alt=&quot;stacked_task&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回はStep Functionsを使って、複数のCloudWatch LogsのロググループをS3にエクスポートする機能を作りました。&lt;/p&gt;

&lt;p&gt;Lambdaを再帰的に実行する簡易なステートマシンですが、
Waitを外出ししているため、 &lt;strong&gt;Lambdaの実行時間制限をカバーしてくれています。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ステートマシンでは &lt;strong&gt;Lambdaの戻り値を使うことできる&lt;/strong&gt; ため、 &lt;strong&gt;Lambda関数自体も更に分割することが可能&lt;/strong&gt; です。
今までの重厚なLambda関数をより視覚的にもわかりやすくすることができるのは魅力ですね。&lt;/p&gt;

&lt;p&gt;Step FunctionsはLambda以外にも様々なAWSリソースと連携ができるので、
ステートマシンを軸としたサーバレスな事例が多く紹介されてくることでしょう。&lt;/p&gt;

&lt;h2 id=&quot;参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.classmethod.jp/cloud/aws/put-data-on-s3-through-firehose/&quot;&gt;[新機能]Amazon Kinesis FirehoseでS3にデータを送ってみた #reinvent&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/how-step-functions-works.html&quot;&gt;Step Functions の詳細&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://rcm-fe.amazon-adsystem.com/e/cm?ref=qf_sp_asin_til&amp;amp;t=soudegesu-22&amp;amp;m=amazon&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as1&amp;amp;IS2=1&amp;amp;detail=1&amp;amp;asins=4798155160&amp;amp;linkId=e91e78f505e53d2986a0635db4aad1ce&amp;amp;bc1=ffffff&amp;amp;lt1=_blank&amp;amp;fc1=333333&amp;amp;lc1=0066c0&amp;amp;bg1=ffffff&amp;amp;f=ifr&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;</content><author><name>soudegesu</name></author><category term="s3" /><category term="cloudwatchlogs" /><category term="stepfunction" /><category term="lambda" /><summary type="html">CloudWatch LogsにはロググループをS3にエクスポートする機能がついています。 しかし、エクスポート機能には同時実行数制限があるので、 今回は Step Functions を使ってS3へのログのエクスポートを実現しました。</summary></entry><entry><title type="html">TerraformでS3のバケットポリシーを書く方法</title><link href="https://www.soudegesu.com/aws/s3bucket-policy-with-terraform/" rel="alternate" type="text/html" title="TerraformでS3のバケットポリシーを書く方法" /><published>2018-05-21T00:00:00+09:00</published><updated>2018-05-21T00:00:00+09:00</updated><id>https://www.soudegesu.com/aws/s3bucket-policy-with-terraform</id><content type="html" xml:base="https://www.soudegesu.com/aws/s3bucket-policy-with-terraform/">&lt;p&gt;インフラのコード化を進める作業では、コード化のライブラリ作法に倣うため、ドキュメントを見ながら設定を書いていくことが多いです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt; も例外ではないのですが、S3バケットのポリシー設定の所でふと気付いたので書いておきます。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#terraform公式のs3のバケットポリシーが&quot; id=&quot;markdown-toc-terraform公式のs3のバケットポリシーが&quot;&gt;Terraform公式のS3のバケットポリシーが…&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#iamポリシードキュメントのデータソースaws_iam_policy_documentを使う&quot; id=&quot;markdown-toc-iamポリシードキュメントのデータソースaws_iam_policy_documentを使う&quot;&gt;IAMポリシードキュメントのデータソース（aws_iam_policy_document）を使う&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考にさせていただいたサイト&quot; id=&quot;markdown-toc-参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;terraform公式のs3のバケットポリシーが&quot;&gt;Terraform公式のS3のバケットポリシーが…&lt;/h2&gt;

&lt;p&gt;Terraform公式の &lt;a href=&quot;https://www.terraform.io/docs/providers/aws/r/s3_bucket_policy.html&quot;&gt;aws_s3_bucket_policy&lt;/a&gt;
のリソースは &lt;code class=&quot;highlighter-rouge&quot;&gt;policy&lt;/code&gt; の部分がヒアドキュメントで書かれています。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resource &quot;aws_s3_bucket&quot; &quot;b&quot; {
  bucket = &quot;my_tf_test_bucket&quot;
}

resource &quot;aws_s3_bucket_policy&quot; &quot;b&quot; {
  bucket = &quot;${aws_s3_bucket.b.id}&quot;
  policy =&amp;lt;&amp;lt;POLICY
{
  &quot;Version&quot;: &quot;2012-10-17&quot;,
  &quot;Id&quot;: &quot;MYBUCKETPOLICY&quot;,
  &quot;Statement&quot;: [
    {
      &quot;Sid&quot;: &quot;IPAllow&quot;,
      &quot;Effect&quot;: &quot;Deny&quot;,
      &quot;Principal&quot;: &quot;*&quot;,
      &quot;Action&quot;: &quot;s3:*&quot;,
      &quot;Resource&quot;: &quot;arn:aws:s3:::my_tf_test_bucket/*&quot;,
      &quot;Condition&quot;: {
         &quot;IpAddress&quot;: {&quot;aws:SourceIp&quot;: &quot;8.8.8.8/32&quot;}
      }
    }
  ]
}
POLICY
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;だめではないのですが、折角コード化を進めているので、ここもキレイにしたいですよね。&lt;/p&gt;

&lt;h2 id=&quot;iamポリシードキュメントのデータソースaws_iam_policy_documentを使う&quot;&gt;IAMポリシードキュメントのデータソース（aws_iam_policy_document）を使う&lt;/h2&gt;

&lt;p&gt;結論から言うと、 &lt;a href=&quot;https://www.terraform.io/docs/providers/aws/d/iam_policy_document.html&quot;&gt;aws_iam_policy_document&lt;/a&gt;
のデータソースを使用することができます。&lt;/p&gt;

&lt;p&gt;データソース名から 「IAMにしか適用できないのでは？」 と思うかもしれませんが、結局はポリシードキュメントなので使えます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resource &quot;aws_s3_bucket&quot; &quot;b&quot; {
  bucket = &quot;my_tf_test_bucket&quot;
}

resource &quot;aws_s3_bucket_policy&quot; &quot;b&quot; {
  bucket = &quot;${aws_s3_bucket.b.id}&quot;
  policy = &quot;${aws_iam_policy_document.bucket_policy_document.json}&quot;
}

data &quot;aws_iam_policy_document&quot; &quot;bucket_policy_document&quot; {

    statement {
        sid = &quot;IPAllow&quot;
        effect = &quot;Deny&quot;
        principals {
            type = &quot;*&quot;
            identifiers = [&quot;*&quot;]
        }
        actions = [
            &quot;s3:*&quot;
        ]
        resources = [
            &quot;arn:aws:s3:::my_tf_test_bucket/*&quot;
        ]
        condition {
            test = &quot;IpAddress&quot;
            variable = &quot;aws:SourceIp&quot;
            values = [
              &quot;8.8.8.8/32&quot;
            ]
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ポイントは &lt;code class=&quot;highlighter-rouge&quot;&gt;policy = &quot;${aws_iam_policy_document.bucket_policy_document.json}&quot;&lt;/code&gt; の所です。&lt;/p&gt;

&lt;p&gt;データソースをJSON文字列にしてくれます。&lt;/p&gt;

&lt;p&gt;AWS公式の &lt;a href=&quot;https://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html&quot;&gt;IAM JSON ポリシーエレメント: 条件演算子&lt;/a&gt; にもある通り、
&lt;code class=&quot;highlighter-rouge&quot;&gt;IpAddress&lt;/code&gt; も条件演算子のひとつとして定義されているので、ちゃんと &lt;code class=&quot;highlighter-rouge&quot;&gt;condition&lt;/code&gt; ブロックで使えます。&lt;/p&gt;

&lt;p&gt;強いてクセを挙げるとしたら、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;Principal&quot;: &quot;*&quot;,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;を表現するために&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;principals {
    type = &quot;*&quot;
    identifiers = [&quot;*&quot;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;と記述しないといけない所でしょうか。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;S3バケットのポリシードキュメントも &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_iam_policy_document&lt;/code&gt; を使えば、Terraformのコードとして管理できます。
HCLからポリシードキュメント（JSON）を生成するために、微妙に書き方が違う部分がありますが、それは普段通りTerraformの公式を読めばなんとかなるでしょう。
さらばヒアドキュメント！！&lt;/p&gt;

&lt;h2 id=&quot;参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.terraform.io/docs/providers/aws/d/iam_policy_document.html&quot;&gt;Terraform - Data Source:aws_iam_policy_document&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.terraform.io/docs/providers/aws/r/s3_bucket_policy.html&quot;&gt;Terraform - Data Source: aws_s3_bucket_policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=soudegesu-22&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B06XKHGJHP&amp;amp;linkId=a3a59917979f77c73643421d8d843a47&quot;&gt;&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=soudegesu-22&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=4844339265&amp;amp;linkId=81ad40d815fd96079a683238ffb6a249&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;</content><author><name>soudegesu</name></author><category term="terraform" /><category term="s3" /><category term="iam" /><summary type="html">インフラのコード化を進める作業では、コード化のライブラリ作法に倣うため、ドキュメントを見ながら設定を書いていくことが多いです。</summary></entry><entry><title type="html">micrometer-registry-datadogを使ったらDatadogのJVMのメトリックがわかりやすくなった</title><link href="https://www.soudegesu.com/java/datadog-with-springboot-micrometer/" rel="alternate" type="text/html" title="micrometer-registry-datadogを使ったらDatadogのJVMのメトリックがわかりやすくなった" /><published>2018-05-17T00:00:00+09:00</published><updated>2018-05-17T00:00:00+09:00</updated><id>https://www.soudegesu.com/java/datadog-with-springboot-micrometer</id><content type="html" xml:base="https://www.soudegesu.com/java/datadog-with-springboot-micrometer/">&lt;p&gt;以前書いた「 &lt;a href=&quot;/java/migrate-springboot-1-to-2/&quot;&gt;Spring Bootを1.5から2へマイグレーションするステップとポイント&lt;/a&gt; 」 にて、
&lt;a href=&quot;https://www.datadoghq.com/&quot;&gt;Datadog&lt;/a&gt;に対してメトリックを送信するの仕組みを &lt;a href=&quot;https://mvnrepository.com/artifact/io.micrometer/micrometer-registry-datadog&quot;&gt;micrometer-registry-datadog&lt;/a&gt; に変更したのですが、
Javaアプリケーションのメトリック取得がいい感じだったので、今回はそれを紹介します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180517/micrometer.png&quot; alt=&quot;micrometer&quot; /&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#micrometerって何&quot; id=&quot;markdown-toc-micrometerって何&quot;&gt;Micrometerって何&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-boot-アプリケーションに-micrometer-registry-datadog-を設定する&quot; id=&quot;markdown-toc-spring-boot-アプリケーションに-micrometer-registry-datadog-を設定する&quot;&gt;Spring Boot アプリケーションに micrometer-registry-datadog を設定する&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#buildgradleの修正&quot; id=&quot;markdown-toc-buildgradleの修正&quot;&gt;build.gradleの修正&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#applicationyamlの修正&quot; id=&quot;markdown-toc-applicationyamlの修正&quot;&gt;application.yamlの修正&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#メトリックに情報を付与する&quot; id=&quot;markdown-toc-メトリックに情報を付与する&quot;&gt;メトリックに情報を付与する&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#datadog上でjvmのメトリックを見てみよう&quot; id=&quot;markdown-toc-datadog上でjvmのメトリックを見てみよう&quot;&gt;Datadog上でJVMのメトリックを見てみよう&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#jvmの使用メモリ&quot; id=&quot;markdown-toc-jvmの使用メモリ&quot;&gt;JVMの使用メモリ&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#全体の使用量&quot; id=&quot;markdown-toc-全体の使用量&quot;&gt;全体の使用量&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#ヒープ領域のみ&quot; id=&quot;markdown-toc-ヒープ領域のみ&quot;&gt;ヒープ領域のみ&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#survivor領域&quot; id=&quot;markdown-toc-survivor領域&quot;&gt;Survivor領域&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#領域毎にグループ化する&quot; id=&quot;markdown-toc-領域毎にグループ化する&quot;&gt;領域毎にグループ化する&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#jvmメトリックの構成&quot; id=&quot;markdown-toc-jvmメトリックの構成&quot;&gt;JVMメトリックの構成&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#micrometer-registry-datadog使用時の注意点&quot; id=&quot;markdown-toc-micrometer-registry-datadog使用時の注意点&quot;&gt;micrometer-registry-datadog使用時の注意点&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#datadogへのメトリック送信に失敗した場合にはwarnログが出力される&quot; id=&quot;markdown-toc-datadogへのメトリック送信に失敗した場合にはwarnログが出力される&quot;&gt;Datadogへのメトリック送信に失敗した場合にはWARNログが出力される&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考にさせていただいたサイト&quot; id=&quot;markdown-toc-参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;micrometerって何&quot;&gt;Micrometerって何&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://micrometer.io/&quot;&gt;Micrometer&lt;/a&gt; はJVM上で動くアプリケーションのメトリックを取得するためのライブラリです。&lt;/p&gt;

&lt;p&gt;各種モニタリングツールとの連携が可能で、2018/05時点では以下のモニタリングツールに対応しています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Netflix/atlas/wiki&quot;&gt;Atlas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.datadoghq.com/&quot;&gt;Datadog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ganglia.sourceforge.net/&quot;&gt;Ganglia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://graphiteapp.org/&quot;&gt;Graphite&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.influxdata.com/&quot;&gt;Influx&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/tech/javamanagement-140525.html&quot;&gt;JMX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://newrelic.com/&quot;&gt;New Relic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://signalfx.com/&quot;&gt;SignalFx&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/etsy/statsd&quot;&gt;StatsD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.wavefront.com/&quot;&gt;Wavefront&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらのモニタリングツールと対になるライブラリを使用することで、取得したメトリックを容易に送ることができるのです。&lt;/p&gt;

&lt;h2 id=&quot;spring-boot-アプリケーションに-micrometer-registry-datadog-を設定する&quot;&gt;Spring Boot アプリケーションに micrometer-registry-datadog を設定する&lt;/h2&gt;

&lt;p&gt;Spring Bootに &lt;a href=&quot;https://mvnrepository.com/artifact/io.micrometer/micrometer-registry-datadog&quot;&gt;micrometer-registry-datadog&lt;/a&gt; を入れて、 Datadogにメトリックを溜め込んでみましょう。&lt;/p&gt;

&lt;h3 id=&quot;buildgradleの修正&quot;&gt;build.gradleの修正&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; の依存関係に micrometer-registry-datadog を追加します。
なお、Micrometer自体は &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-actuator&lt;/code&gt; に含まれています。&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;group:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'spring-boot-starter-actuator'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2.0.1.RELEASE'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;group:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'io.micrometer'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'micrometer-registry-datadog'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1.0.3'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;applicationyamlの修正&quot;&gt;application.yamlの修正&lt;/h3&gt;

&lt;p&gt;application.yaml に設定を追加します。
公式ドキュメントだと指定可能なプロパティが全て列挙されていないので、
&lt;code class=&quot;highlighter-rouge&quot;&gt;io.micrometer.datadog.DatadogConfig&lt;/code&gt; クラスの中を見ることで確認できます。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;management&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;metrics&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;datadog&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;api-key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${datadogのAPIキー}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;15s&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# メトリックの収集間隔&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;メトリックに情報を付与する&quot;&gt;メトリックに情報を付与する&lt;/h3&gt;

&lt;p&gt;こちらは必須ではありません。&lt;/p&gt;

&lt;p&gt;Datadog上でタグを使ってメトリックを横断的にフィルタできると嬉しいケースがあるので、 &lt;code class=&quot;highlighter-rouge&quot;&gt;commonTags&lt;/code&gt; を使って、ホスト名やモニターグループを設定すると良いと思います。&lt;/p&gt;

&lt;p&gt;また、Spring Bootから取得しているメトリックであることを識別するために、メトリックに &lt;code class=&quot;highlighter-rouge&quot;&gt;spring.&lt;/code&gt; のprefixを付与しています。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MeterRegistryCustomizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MeterRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;customizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;meterFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MeterFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Meter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Meter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spring.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commonTags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commonTags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;monitoring_group&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;system_component_a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commonTags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InetAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLocalHost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHostName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnknownHostException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;LOGGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fail to resolve hostname.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;datadog上でjvmのメトリックを見てみよう&quot;&gt;Datadog上でJVMのメトリックを見てみよう&lt;/h2&gt;

&lt;p&gt;さて本題です。アプリケーションを起動し、Datadog上でメトリックを確認してみましょう。&lt;/p&gt;

&lt;h3 id=&quot;jvmの使用メモリ&quot;&gt;JVMの使用メモリ&lt;/h3&gt;

&lt;h4 id=&quot;全体の使用量&quot;&gt;全体の使用量&lt;/h4&gt;

&lt;p&gt;JVMの使用メモリ量は &lt;code class=&quot;highlighter-rouge&quot;&gt;jvm.memory.used&lt;/code&gt; のメトリックで確認できます。 (先程 &lt;code class=&quot;highlighter-rouge&quot;&gt;spring.&lt;/code&gt; のprefixをつけているので、下の図では &lt;code class=&quot;highlighter-rouge&quot;&gt;spring.jvm.memory.used&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180517/used_memory.png&quot; alt=&quot;used_memory&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;ヒープ領域のみ&quot;&gt;ヒープ領域のみ&lt;/h4&gt;

&lt;p&gt;次に &lt;code class=&quot;highlighter-rouge&quot;&gt;area:heap&lt;/code&gt; を指定すると、ヒープ領域のみに絞りこむことができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180517/heap_only.png&quot; alt=&quot;heap_only&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;survivor領域&quot;&gt;Survivor領域&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;id:ps_survivor_space&lt;/code&gt; を追加すると、 ヒープの中のさらにSurvivor領域のみにも絞り込めます。これは嬉しい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180517/survivor_only.png&quot; alt=&quot;survivor_only&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;領域毎にグループ化する&quot;&gt;領域毎にグループ化する&lt;/h4&gt;

&lt;p&gt;もちろん、 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; をfromではなく、グルーピングで使用すると、Heap領域に対する各領域の状態が確認できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180517/heap_group_by_id.png&quot; alt=&quot;heap_group_by_id&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;jvmメトリックの構成&quot;&gt;JVMメトリックの構成&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jvm.memory.used&lt;/code&gt; メトリックの構造をまとめると以下。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;metric&lt;/th&gt;
      &lt;th&gt;area&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;jvm.memory.used&lt;/td&gt;
      &lt;td&gt;heap&lt;/td&gt;
      &lt;td&gt;ps_eden_space&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;ps_old_gen&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;ps_survivor_space&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;nonheap&lt;/td&gt;
      &lt;td&gt;metaspace&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;code_cache&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;cmpressed_class_space&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;他にも、例えば、 バッファメモリもそれぞれDirect BufferとMapped Bufferでメトリックが取れたりする。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;metric&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;jvm.buffer.memory.used&lt;/td&gt;
      &lt;td&gt;direct&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;mapped&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;micrometer-registry-datadog使用時の注意点&quot;&gt;micrometer-registry-datadog使用時の注意点&lt;/h2&gt;

&lt;h3 id=&quot;datadogへのメトリック送信に失敗した場合にはwarnログが出力される&quot;&gt;Datadogへのメトリック送信に失敗した場合にはWARNログが出力される&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;micrometer-registry-datadog&lt;/code&gt; がバックグラウンドで定期的にメトリックを打ち上げてくれますが、
通信に失敗した場合には &lt;code class=&quot;highlighter-rouge&quot;&gt;WARN&lt;/code&gt; レベルのログが出力されます。&lt;/p&gt;

&lt;p&gt;そのため、 &lt;strong&gt;アプリケーションのログ監視をしている場合には、影響がないか確認しておきましょう&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;参考までに、エラーは以下のような感じで出ていました。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;failed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metrics&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SocketTimeoutException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PlainSocketImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;socketConnect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Native&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AbstractPlainSocketImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doConnect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AbstractPlainSocketImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;350&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AbstractPlainSocketImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;connectToAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AbstractPlainSocketImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;206&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AbstractPlainSocketImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AbstractPlainSocketImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;188&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SocksSocketImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SocksSocketImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;392&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;589&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;security&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SSLSocketImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSLSocketImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;673&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NetworkClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doConnect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetworkClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;175&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;463&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;558&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HttpsClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpsClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;264&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HttpsClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpsClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;367&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AbstractDelegateHttpsURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNewHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AbstractDelegateHttpsURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;191&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;以下略&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;micrometer-registry-datadog&lt;/code&gt; を使用すると、取得したいメトリックの情報が構造化されて、フィルタリングがしやすくなりました。
特にJVMのメモリのメトリックは以前よりも直感的になった印象があります。&lt;/p&gt;

&lt;p&gt;今回のMicrometerに限らず、 Application Performance Monitoring 界隈のライブラリが様々出回ってきたので、この方面も学習していきたいですね。&lt;/p&gt;

&lt;h2 id=&quot;参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://micrometer.io/docs/registry/datadog&quot;&gt;Micrometer Datadog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>soudegesu</name></author><category term="springboot" /><category term="datadog" /><summary type="html">以前書いた「 Spring Bootを1.5から2へマイグレーションするステップとポイント 」 にて、 Datadogに対してメトリックを送信するの仕組みを micrometer-registry-datadog に変更したのですが、 Javaアプリケーションのメトリック取得がいい感じだったので、今回はそれを紹介します。</summary></entry><entry><title type="html">「歴史からの発想 停滞と拘束からいかに脱するか」は組織を歴史の側面から見た面白い一冊だった</title><link href="https://www.soudegesu.com/book/idea-from-history/" rel="alternate" type="text/html" title="「歴史からの発想 停滞と拘束からいかに脱するか」は組織を歴史の側面から見た面白い一冊だった" /><published>2018-05-13T00:00:00+09:00</published><updated>2018-05-13T00:00:00+09:00</updated><id>https://www.soudegesu.com/book/idea-from-history</id><content type="html" xml:base="https://www.soudegesu.com/book/idea-from-history/">&lt;p&gt;「 &lt;a href=&quot;https://www.amazon.co.jp/gp/product/4532192161/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4532192161&amp;amp;linkCode=as2&amp;amp;tag=soudegesu-22&amp;amp;linkId=5513b5e79762b891cc2f9498116b17fa&quot;&gt;歴史からの発想　停滞と拘束からいかに脱するか&lt;/a&gt; 」を読みました。
たまたまamazonサーフィンしていたら見つけた本なのですが、タイトルが気になったので買ってみました。
人通り読み終えたので、所感を書きたいと思います。
以降の内容は &lt;strong&gt;若干のネタバレを含みます&lt;/strong&gt; ので、本をまだ読まれていない方は、先に本を読むことをオススメします。&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.co.jp/gp/product/4532192161/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4532192161&amp;amp;linkCode=as2&amp;amp;tag=soudegesu-22&amp;amp;linkId=5513b5e79762b891cc2f9498116b17fa&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=4532192161&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=soudegesu-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;//ir-jp.amazon-adsystem.com/e/ir?t=soudegesu-22&amp;amp;l=am2&amp;amp;o=9&amp;amp;a=4532192161&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
&lt;/div&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#歴史は繰り返すし繰り返さない要素もある&quot; id=&quot;markdown-toc-歴史は繰り返すし繰り返さない要素もある&quot;&gt;歴史は繰り返すし、繰り返さない要素もある&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#歴史書物との付き合い方も提示してくれる&quot; id=&quot;markdown-toc-歴史書物との付き合い方も提示してくれる&quot;&gt;歴史書物との付き合い方も提示してくれる&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#戦国時代こそ正解のない世界&quot; id=&quot;markdown-toc-戦国時代こそ正解のない世界&quot;&gt;戦国時代こそ正解のない世界&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#死生観が経済発展の源&quot; id=&quot;markdown-toc-死生観が経済発展の源&quot;&gt;死生観が経済発展の源&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#時代を支えた組織のパターン&quot; id=&quot;markdown-toc-時代を支えた組織のパターン&quot;&gt;時代を支えた組織のパターン&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#最後に&quot; id=&quot;markdown-toc-最後に&quot;&gt;最後に&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;歴史は繰り返すし繰り返さない要素もある&quot;&gt;歴史は繰り返すし、繰り返さない要素もある&lt;/h2&gt;

&lt;p&gt;という筆者の歴史に対する見解、バランス感覚にとても腹落ち感がありました。&lt;/p&gt;

&lt;p&gt;そもそも「歴史は繰り返す」は &lt;strong&gt;異なる状況でも相似た事件が起き、その類似性の範囲の中で政治や経営の参考になる部分がある&lt;/strong&gt; という意味であると示唆されていて、
本書は &lt;strong&gt;組織と人類学の観点で「歴史の類似性」を活用し、日本社会がどうして停滞気味なのかを批評しており&lt;/strong&gt;、 歴史素人であっても歴史の類似性から学びを抽象化しやすい情報粒度と断面から説明してくれます。&lt;/p&gt;

&lt;p&gt;「愚者は経験から学び、賢者は歴史から学ぶ」も、基は鉄血宰相 &lt;a href=&quot;https://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%83%E3%83%88%E3%83%BC%E3%83%BB%E3%83%95%E3%82%A9%E3%83%B3%E3%83%BB%E3%83%93%E3%82%B9%E3%83%9E%E3%83%AB%E3%82%AF&quot;&gt;ビスマルク&lt;/a&gt; が言ったとされる言葉ですが、&lt;/p&gt;

&lt;p&gt;これも先の史感の上で成り立つ、一種のパタン・ランゲージのようなものだな、と感じました。&lt;/p&gt;

&lt;h2 id=&quot;歴史書物との付き合い方も提示してくれる&quot;&gt;歴史書物との付き合い方も提示してくれる&lt;/h2&gt;

&lt;p&gt;特徴の一つを挙げると、本の序盤で「歴史を取り上げた書物との付き合い方（バランスのとり方）」を提示してくれている点です。&lt;/p&gt;

&lt;p&gt;今まで、歴史モノを読む場合のメリットとデメリットは意識したことがなかったため、いい意味で「熱くなりすぎず、冷めすぎず」文章と対峙することができました。&lt;/p&gt;

&lt;p&gt;と同時に、その項を読むことで、「歴史をテーマにした書物は情報に書き手のバイアスが入りやすいな」と印象を持ちました。&lt;/p&gt;

&lt;p&gt;時間軸が圧倒的に圧縮されていて、情報の解像度が粗くなってしまうから、書き手は一本の線（ストーリー）にするために情報の補足をする。&lt;/p&gt;

&lt;p&gt;なので、一見客観的な事実が書かれそうなモノも、案外そうでもないのかもしれない、と。&lt;/p&gt;

&lt;p&gt;今回読んだ本以外にも、戦国をテーマにした別の書物を読むことで、「あたらずとも遠からず」な歴史感を得られるようにしたいと思わせてくれました。&lt;/p&gt;

&lt;h2 id=&quot;戦国時代こそ正解のない世界&quot;&gt;戦国時代こそ正解のない世界&lt;/h2&gt;

&lt;h3 id=&quot;死生観が経済発展の源&quot;&gt;死生観が経済発展の源&lt;/h3&gt;

&lt;p&gt;筆者曰く、戦国時代は経済成長が著しい時代帯の1つだそうです。&lt;/p&gt;

&lt;p&gt;戦国時代だから、というよりも、 &lt;strong&gt;「当時の人間の死生感」が経済成長のエンジンになっているらしい&lt;/strong&gt;、という主張は現代の社会課題に対しても適用可能な分野が多いでしょう。
いつの時代も組織があり、人間がいるわけであるから、死生観から来る人間の行動の違いはあると思いますし。&lt;/p&gt;

&lt;h3 id=&quot;時代を支えた組織のパターン&quot;&gt;時代を支えた組織のパターン&lt;/h3&gt;

&lt;p&gt;本書の主題にあたる部分は、織田信長、豊臣秀吉、石田三成、チンギス・ハン。タイプの異なる武将達が取った組織のパターンをなぞらえて解説が進んでいきます。&lt;/p&gt;

&lt;p&gt;マクロな面では組織のフォーメーションの組み方、ミクロな面では人心掌握のために行なった個別施策や、思想のスタンスにも言及されていて、
外的要因といった背景にも触れています。&lt;/p&gt;

&lt;p&gt;特徴的なのは、いずれもトップダウン型の組織ではあるものの、微妙に違う点。言うならば、 &lt;strong&gt;「一般化できそうで、できない」&lt;/strong&gt; 。
一概に成功パターンを規定できない、のが成功パターンなのか、と思ってしまう。&lt;/p&gt;

&lt;p&gt;過去に紹介した書籍 &lt;a href=&quot;https://amzn.to/2wECaDt&quot;&gt;ティール組織&lt;/a&gt; では組織形態の変遷に触れていますが、
そこで表現される過去の組織のパターンをより具体化させて亜種化したような組織たちだ。&lt;/p&gt;

&lt;p&gt;壮大なネタバレは控えたいので詳細には書きませんが、各組織の要は以下だと理解しました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;既成概念の破壊、自由経済と才能による登用&lt;/li&gt;
  &lt;li&gt;女房役の存在と権威と権限の分離&lt;/li&gt;
  &lt;li&gt;辣腕家による扇動&lt;/li&gt;
  &lt;li&gt;思想の徹底とビジョン&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;少し驚いたのは &lt;strong&gt;チンギス・ハンが取り上げられていた&lt;/strong&gt; こと。&lt;/p&gt;

&lt;p&gt;確かに「戦国時代と言えば戦国だけど。。」と懐疑的な見方で読み進めましたが、緻密で大胆で徹底された組織の束ね方はその他の武将のそれに勝っていました。&lt;/p&gt;

&lt;p&gt;本書から学んだチンギス・ハンの付け焼き刃な知識を妻にドヤ顔で披露したところ、「大陸をあれだけ征服したんだから当たり前でしょ」と一蹴されました笑。&lt;/p&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;経済発展著しかった戦国時代を取り上げ、その成長を成し得た組織パターンを本書では学ぶことができます。&lt;/p&gt;

&lt;p&gt;これからも、社会、組織の中の個人として生きていく上で、&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;どのような特徴を持ち、何を成すことを得意としているか、足りない場合にはそれを補ってくれる人物はいるか&lt;/strong&gt;
という目線を自分にも、他者にも向けることで、組織の力を最大化する努力が必要であることを理解できましたし、&lt;/p&gt;

&lt;p&gt;また、武将毎にそれぞれ人間性が異なりますが、共通して、徹底したビジョンを持つというのは、今も昔も変わらないものだな、とも思いました。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
IT企業の経営者が「事業が失敗したところで死ぬわけじゃないし」とインタビューで言ったりしているのも、
一種の死生観というか、恐怖の境界線がサラリーマンとは少し違うからなのかなぁ、等、自身の思考力をより高めるためのエッセンスも含む良い本だと言えるでしょう。&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://rcm-fe.amazon-adsystem.com/e/cm?ref=qf_sp_asin_til&amp;amp;t=soudegesu-22&amp;amp;m=amazon&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as1&amp;amp;IS2=1&amp;amp;detail=1&amp;amp;asins=4532192161&amp;amp;linkId=b7ee298049b596b0b64c1d72c3b60d8b&amp;amp;bc1=ffffff&amp;amp;lt1=_blank&amp;amp;fc1=333333&amp;amp;lc1=0066c0&amp;amp;bg1=ffffff&amp;amp;f=ifr&quot;&gt;
&lt;/iframe&gt;
&lt;/div&gt;</content><author><name>soudegesu</name></author><category term="book" /><category term="組織論" /><summary type="html">「 歴史からの発想　停滞と拘束からいかに脱するか 」を読みました。 たまたまamazonサーフィンしていたら見つけた本なのですが、タイトルが気になったので買ってみました。 人通り読み終えたので、所感を書きたいと思います。 以降の内容は 若干のネタバレを含みます ので、本をまだ読まれていない方は、先に本を読むことをオススメします。</summary></entry><entry><title type="html">Spring Bootを1.5から2へマイグレーションするステップとポイント</title><link href="https://www.soudegesu.com/java/migrate-springboot-1-to-2/" rel="alternate" type="text/html" title="Spring Bootを1.5から2へマイグレーションするステップとポイント" /><published>2018-05-11T00:00:00+09:00</published><updated>2018-05-11T00:00:00+09:00</updated><id>https://www.soudegesu.com/java/migrate-springboot-1-to-2</id><content type="html" xml:base="https://www.soudegesu.com/java/migrate-springboot-1-to-2/">&lt;p&gt;Spring Bootの2がリリースされたので、&lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Migration-Guide&quot;&gt;Spring Boot 2.0 Migration Guide&lt;/a&gt;
を参考に既存のSpring Boot 1.5のプロジェクトをマイグレーションしてみた。行なったときの段取りとポイントを簡単にまとめました。&lt;/p&gt;

&lt;p&gt;spring-boot-starter-web、spring-boot-starter-data-jpa、spring-boot-starter-actuator、spring-boot-starter-thymeleafを主に使っている。結論だけ先に言うと、spring-boot-starter-actuatorのマイグレーションがめんどくさかったです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180511/springboot.png&quot; alt=&quot;springboot&quot; /&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#モチベーション&quot; id=&quot;markdown-toc-モチベーション&quot;&gt;モチベーション&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#これからのjava時代に備えて&quot; id=&quot;markdown-toc-これからのjava時代に備えて&quot;&gt;これからのJava時代に備えて&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2019年1月までにspring-boot2への以降を&quot; id=&quot;markdown-toc-2019年1月までにspring-boot2への以降を&quot;&gt;2019年1月までにSpring Boot2への以降を&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#マイグレーションに必要な事前準備&quot; id=&quot;markdown-toc-マイグレーションに必要な事前準備&quot;&gt;マイグレーションに必要な事前準備&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#いざマイグレーション&quot; id=&quot;markdown-toc-いざマイグレーション&quot;&gt;いざマイグレーション!!&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#環境情報&quot; id=&quot;markdown-toc-環境情報&quot;&gt;環境情報&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#buildgradleの変更&quot; id=&quot;markdown-toc-buildgradleの変更&quot;&gt;build.gradleの変更&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#applicationyaml-の修正&quot; id=&quot;markdown-toc-applicationyaml-の修正&quot;&gt;application.yaml の修正&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#コンパイルエラーやwarningを解決していく&quot; id=&quot;markdown-toc-コンパイルエラーやwarningを解決していく&quot;&gt;コンパイルエラーやwarningを解決していく&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#実行時エラーを解決する&quot; id=&quot;markdown-toc-実行時エラーを解決する&quot;&gt;実行時エラーを解決する&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#メトリックの取得設定を変えるspringboot-actuator&quot; id=&quot;markdown-toc-メトリックの取得設定を変えるspringboot-actuator&quot;&gt;メトリックの取得設定を変える（springboot-actuator）&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#以前は一発で取れた&quot; id=&quot;markdown-toc-以前は一発で取れた&quot;&gt;以前は一発で取れた&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#これからはメトリック毎に取得する&quot; id=&quot;markdown-toc-これからはメトリック毎に取得する&quot;&gt;これからはメトリック毎に取得する&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#micrometer-registry-datadog-を入れる&quot; id=&quot;markdown-toc-micrometer-registry-datadog-を入れる&quot;&gt;micrometer-registry-datadog を入れる&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#まさかにec2amazonlinuxデプロイで落とし穴&quot; id=&quot;markdown-toc-まさかにec2amazonlinuxデプロイで落とし穴&quot;&gt;まさかにEC2（AmazonLinux）デプロイで落とし穴&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#とどめの負荷テスト&quot; id=&quot;markdown-toc-とどめの負荷テスト&quot;&gt;とどめの負荷テスト&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考にさせていただいたサイト&quot; id=&quot;markdown-toc-参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;モチベーション&quot;&gt;モチベーション&lt;/h2&gt;
&lt;h3 id=&quot;これからのjava時代に備えて&quot;&gt;これからのJava時代に備えて&lt;/h3&gt;

&lt;p&gt;Spring Bootの &lt;code class=&quot;highlighter-rouge&quot;&gt;1.5.9&lt;/code&gt; を使っていたのだけど、2018/05時点において、公式からは &lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-with-Java-9-and-above&quot;&gt;Spring Boot 1.5のJava9サポート予定はない&lt;/a&gt; ことが公表されている。&lt;/p&gt;

&lt;p&gt;以前、&lt;a href=&quot;/java/java9-modularity/&quot;&gt;JavaプロジェクトをModule System(Java9のProject Jigsaw)にマイグレーションするステップ&lt;/a&gt; を書いた時には
Spring Bootの1.5がJava9のmodule pathでのクラスロードに対応しておらず(&lt;strong&gt;複数ライブラリ間でのパッケージ重複問題&lt;/strong&gt;)、完全移行を断念した経緯があった。&lt;/p&gt;

&lt;p&gt;その後、Spring Bootの2.0が2018/03にローンチされた後、Java9上で動作することを一応確認しておいたので、
 &lt;strong&gt;Javaの進化に追従していきたいプロダクトは、Spring Boot2にマイグレーションする必要がある&lt;/strong&gt; し、 Spring Boot使いは &lt;strong&gt;既にJavaのマイグレーション準備期間に突入した&lt;/strong&gt; のだ。&lt;/p&gt;

&lt;h3 id=&quot;2019年1月までにspring-boot2への以降を&quot;&gt;2019年1月までにSpring Boot2への以降を&lt;/h3&gt;

&lt;p&gt;「いつまでに何をしないといけないか？」、つまり、スケジュール感の算段を立てる必要がありそうだ。&lt;/p&gt;

&lt;p&gt;まずは、 &lt;a href=&quot;http://www.oracle.com/technetwork/jp/java/eol-135779-ja.html&quot;&gt;Oracleの公式&lt;/a&gt; でJavaのロードマップを確認しよう。&lt;/p&gt;

&lt;p&gt;Javaに関して抑えておきたいのは2点&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Java11は &lt;code class=&quot;highlighter-rouge&quot;&gt;2018/09&lt;/code&gt; から利用可能&lt;/li&gt;
  &lt;li&gt;Java8は &lt;code class=&quot;highlighter-rouge&quot;&gt;2019/01&lt;/code&gt; にサポートが切れる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;次に &lt;a href=&quot;https://github.com/spring-projects/spring-boot/milestones&quot;&gt;Spring Bootのロードマップ&lt;/a&gt; も確認しておく。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180511/springboot-milestones.png&quot; alt=&quot;springboot-milestone&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Spring Bootの場合には&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2.0.2&lt;/code&gt; のリリースは2018/05予定&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2.1.0.RC1&lt;/code&gt; のリリースが2018/09予定&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2.1.0.RC2&lt;/code&gt; 以降は未定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;がポイントだ。&lt;/p&gt;

&lt;p&gt;結論として、&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;2018/09までに &lt;code class=&quot;highlighter-rouge&quot;&gt;sprignboot 2.0.x&lt;/code&gt; にマイグレーションする&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;2019/01までに &lt;code class=&quot;highlighter-rouge&quot;&gt;Java 11&lt;/code&gt; にマイグレーションする&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という段取りで進めていくとスムーズだと考えている。&lt;/p&gt;

&lt;h2 id=&quot;マイグレーションに必要な事前準備&quot;&gt;マイグレーションに必要な事前準備&lt;/h2&gt;

&lt;p&gt;いきなりマイグレーション作業をすると破綻するので、事前準備が必要だ。&lt;/p&gt;

&lt;p&gt;具体的に言うと &lt;strong&gt;テストコード&lt;/strong&gt; と &lt;strong&gt;メトリック取得の仕組み&lt;/strong&gt; の2つが必要になる。&lt;/p&gt;

&lt;p&gt;テストコードは最低でも以下の3種類を準備する。CI基盤と組み合わせるなどして簡単に実行できる工夫をしておくのが好ましい。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;単体テスト&lt;/li&gt;
  &lt;li&gt;結合テスト&lt;/li&gt;
  &lt;li&gt;負荷テスト&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;メトリック取得の仕組みはなんでも良いが、私は &lt;a href=&quot;https://www.datadoghq.com/&quot;&gt;Datadog&lt;/a&gt; を使っている。&lt;/p&gt;

&lt;p&gt;プロジェクトによっては、結合テストと負荷テストまで手が届いていないかもしれないが、今回のようなマイグレーションには欠かせないので作っておこう。&lt;/p&gt;

&lt;p&gt;外側から見たシステムの振る舞いやパフォーマンスに影響がないかを確認する必要があるからだ。&lt;/p&gt;

&lt;p&gt;なお、負荷テストではbefore/afterの比較ができないと意味がないので、既存のシステムでさばけるパフォーマンスは一度計測しておく。&lt;/p&gt;

&lt;p&gt;とりあえず私の場合は既にメンテンナスされている資産があるので、それを使うことにする。&lt;/p&gt;

&lt;h2 id=&quot;いざマイグレーション&quot;&gt;いざマイグレーション!!&lt;/h2&gt;

&lt;h3 id=&quot;環境情報&quot;&gt;環境情報&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Java
    &lt;ul&gt;
      &lt;li&gt;1.8.0_152&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Gradle
    &lt;ul&gt;
      &lt;li&gt;4.4&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;マイグレーション対象のSpring Bootモジュール
    &lt;ul&gt;
      &lt;li&gt;spring-boot-starter-web&lt;/li&gt;
      &lt;li&gt;spring-boot-starter-data-jpa&lt;/li&gt;
      &lt;li&gt;spring-boot-starter-actuator&lt;/li&gt;
      &lt;li&gt;spring-boot-configuration-processor&lt;/li&gt;
      &lt;li&gt;spring-boot-starter-thymeleaf&lt;/li&gt;
      &lt;li&gt;spring-boot-gradle-plugin(ビルド用)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;buildgradleの変更&quot;&gt;build.gradleの変更&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Spring Bootをバージョンアップ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;記事を書いている時点での最新 &lt;code class=&quot;highlighter-rouge&quot;&gt;2.0.1.RELEASE&lt;/code&gt; に変更する。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bootRepackage&lt;/code&gt; タスクを削除&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/gradle-plugin/reference/html/&quot;&gt;Spring Boot Gradle Plugin&lt;/a&gt; の &lt;code class=&quot;highlighter-rouge&quot;&gt;bootRepackage&lt;/code&gt; タスクが廃止になったため削除した。 &lt;code class=&quot;highlighter-rouge&quot;&gt;public static void main(String[] args)&lt;/code&gt; を探してよしなにやってくれるようなので、シンプルな構成のアプリケーションであれば、そもそも &lt;code class=&quot;highlighter-rouge&quot;&gt;mainClassName&lt;/code&gt; の記述は必須ではない。&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 削除&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//bootRepackage {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    mainClass = 'com.soudegesu.demo.app.Application'&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    executable = true&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;applicationyaml-の修正&quot;&gt;application.yaml の修正&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;application.yaml&lt;/code&gt; を修正する。設定項目は使っているモジュールに依存するので、詳細は触れないが、
私の場合には主に &lt;code class=&quot;highlighter-rouge&quot;&gt;springboot-actuator&lt;/code&gt; の設定変更が発生した。
&lt;strong&gt;yaml構造の変更&lt;/strong&gt; と &lt;strong&gt;actuator endpointの公開設定&lt;/strong&gt; と &lt;strong&gt;メトリック取得方法指定&lt;/strong&gt; といったところ。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;management&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;endpoints&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;exposure&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;info,health,metrics,httptrace,threaddump,heapdump&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;metrics&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;datadog&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;api-key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;(APIのキー)&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;30s&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;security&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ポート番号&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;コンパイルエラーやwarningを解決していく&quot;&gt;コンパイルエラーやwarningを解決していく&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; を編集して依存関係を更新すると、コンパイルエラーやwarningが出てくるので、それを適宜直していく。&lt;/p&gt;

&lt;p&gt;パッケージやクラスに変更があり、それに合わせてIFも修正する必要があった。
ざっくり以下に置き換えている。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;変更前&lt;/td&gt;
      &lt;td&gt;変更後&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;org.springframework.boot.autoconfigure.web.ErrorAttributes&lt;/td&gt;
      &lt;td&gt;org.springframework.boot.web.servlet.error.ErrorAttributes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;org.springframework.web.context.request.RequestAttributes&lt;/td&gt;
      &lt;td&gt;org.springframework.web.context.request.WebRequest&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter&lt;/td&gt;
      &lt;td&gt;org.springframework.web.servlet.config.annotation.WebMvcConfigurer&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
&lt;/table&gt;

&lt;p&gt;少し面倒だったのは &lt;a href=&quot;https://projects.spring.io/spring-data-jpa/&quot;&gt;spring-data-jpa&lt;/a&gt; の
&lt;code class=&quot;highlighter-rouge&quot;&gt;CrudRepository&lt;/code&gt; から &lt;code class=&quot;highlighter-rouge&quot;&gt;findOne&lt;/code&gt; が削除されたため、 implementしているクラス側で &lt;code class=&quot;highlighter-rouge&quot;&gt;findByXX&lt;/code&gt; を自前定義してあげた。&lt;/p&gt;

&lt;p&gt;コンパイルエラーが治ったら、単体テストを実行し、クラスレベルのデグレードが起きないことを確認した。&lt;/p&gt;

&lt;h2 id=&quot;実行時エラーを解決する&quot;&gt;実行時エラーを解決する&lt;/h2&gt;

&lt;p&gt;次に、マイグレーション済みのSpring Bootアプリケーションを起動できるようになったら、ローカルで結合テストを流して、振る舞いに変化がないかをチェックする。&lt;/p&gt;

&lt;p&gt;エラーがやはり出た。&lt;/p&gt;

&lt;p&gt;DBへのINSERTが伴うリクエストの処理にて、 &lt;a href=&quot;https://projects.spring.io/spring-data-jpa/&quot;&gt;spring-data-jpa&lt;/a&gt; がエラーを吐き出している。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;org.springframework.dao.InvalidDataAccessResourceUsageException: error performing isolated work; SQL [n/a]; nested exception is org.hibernate.exception.SQLGrammarException: error performing isolated work
(中略)
Caused by: java.sql.SQLException: Table '(Schema名).hibernate_sequence' doesn't exist

  Query is: select next_val as id_val from hibernate_sequence for update

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;DB（MySQL）へのINSERTで1箇所、AUTO INCREMENTしているところがあって、 Entityでフィールドに &lt;code class=&quot;highlighter-rouge&quot;&gt;@GeneratedValue(strategy= GenerationType.AUTO)&lt;/code&gt; アノテーションを付与しているのだが、 &lt;code class=&quot;highlighter-rouge&quot;&gt;hibernate_sequence&lt;/code&gt; を使ったID生成を試みてしまっているようだ。&lt;/p&gt;

&lt;p&gt;確認してみたところ、デフォルトの挙動が変わっているようだ。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Id generator&lt;/p&gt;

  &lt;p&gt;The spring.jpa.hibernate.use-new-id-generator-mappings property is now true by default to align with the default behaviour of Hibernate. If you need to temporarily restore this now deprecated behaviour, set the property to false.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;そのため、 &lt;code class=&quot;highlighter-rouge&quot;&gt;spring.jpa.hibernate.use-new-id-generator-mappings: false&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;application.yaml&lt;/code&gt; に追加してあげる。&lt;/p&gt;

&lt;h3 id=&quot;メトリックの取得設定を変えるspringboot-actuator&quot;&gt;メトリックの取得設定を変える（springboot-actuator）&lt;/h3&gt;

&lt;p&gt;正直これが一番めんどくさかった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready.html&quot;&gt;springboot-actuator&lt;/a&gt; を使用しているのだが、
バージョンアップに伴い大きく以下の変更が入っている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;メトリック毎にエンドポイントが分割された&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;一発で取得できなくなった&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;取得できるメトリック名に後方互換がなくなった&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;諸事情で後方互換性を持たせたい時には自前実装が必要&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;メトリック拡張のロジックに修正が必要になった&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://metrics.dropwizard.io/4.0.0/&quot;&gt;dropwizard metrics&lt;/a&gt; でメトリック拡張してた場合も改修必要&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;springboot-actuator のメトリックをシステム監視に利用しているプロダクトは辛い。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;もう少し具体的に説明しておく。&lt;/p&gt;

&lt;h4 id=&quot;以前は一発で取れた&quot;&gt;以前は一発で取れた&lt;/h4&gt;

&lt;p&gt;以前はactuator endpointに対してリクエストすると、以下のようにメトリックが一発で取れた。
拡張メトリックもレスポンスのjsonにプロパティが追加される形で拡張がなされていた。&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;485331&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mem.free&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;253058&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;processors&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;instance.uptime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;312097&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;uptime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;338799&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;systemload.average&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.69384765625&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;heap.committed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;419840&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;heap.init&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;131072&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;heap.used&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;166781&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;heap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1864192&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nonheap.committed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;66648&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nonheap.init&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2496&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nonheap.used&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;65492&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nonheap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;threads.peak&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;177&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;threads.daemon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;155&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;threads.totalStarted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;243&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;threads&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;158&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;classes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9613&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;classes.loaded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9613&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;classes.unloaded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gc.ps_scavenge.count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gc.ps_scavenge.time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;373&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gc.ps_marksweep.count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gc.ps_marksweep.time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;388&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;〜(中略)〜&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;httpsessions.max&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;httpsessions.active&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;datasource.primary.active&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;datasource.primary.usage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;これからはメトリック毎に取得する&quot;&gt;これからはメトリック毎に取得する&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/actuator/metrics&lt;/code&gt; を参考に取得可能なメトリックを確認して
(この時点でメトリック名に互換性がないことがわかる)&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;names&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http.server.requests&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jvm.buffer.memory.used&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jvm.memory.used&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jvm.gc.memory.allocated&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jvm.memory.committed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jdbc.connections.min&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tomcat.sessions.created&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tomcat.sessions.expired&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hikaricp.connections.usage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tomcat.global.request.max&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(中略)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tomcat.threads.busy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tomcat.global.request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hikaricp.connections.creation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jvm.gc.memory.promoted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tomcat.sessions.rejected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tomcat.sessions.alive.max&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/actuator/metrics/(メトリック名)&lt;/code&gt; でリクエストをしてあげなければならない。&lt;/p&gt;

&lt;p&gt;例えば以下のようになる。&lt;/p&gt;

&lt;p&gt;パス: &lt;code class=&quot;highlighter-rouge&quot;&gt;/actuator/metrics/tomcat.sessions.created&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tomcat.sessions.created&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;measurements&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;statistic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;COUNT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;availableTags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;結構変わってしまったではないか。。&lt;/p&gt;

&lt;h4 id=&quot;micrometer-registry-datadog-を入れる&quot;&gt;micrometer-registry-datadog を入れる&lt;/h4&gt;

&lt;p&gt;たまたま &lt;a href=&quot;https://www.datadoghq.com/&quot;&gt;Datadog&lt;/a&gt; を導入していたため、
簡易な解決策として、micrometer-registry-datadog にメトリックを打ち上げてもらうことにした。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; に依存モジュールを追加&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;group:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'io.micrometer'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'micrometer-registry-datadog'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1.0.3'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;まさかにec2amazonlinuxデプロイで落とし穴&quot;&gt;まさかにEC2（AmazonLinux）デプロイで落とし穴&lt;/h3&gt;

&lt;p&gt;ローカルマシン（Mac）で起動できたため、大方いけると考えていたが、EC2に &lt;code class=&quot;highlighter-rouge&quot;&gt;jar&lt;/code&gt; をデプロイする時に落とし穴に遭遇した。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt; コマンド起動時に&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;invalid file &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;bad magic number&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Exec format error
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;のようなエラーメッセージが出て起動できなくなってしまったのだ。&lt;/p&gt;

&lt;p&gt;しかし、 &lt;code class=&quot;highlighter-rouge&quot;&gt;java -jar&lt;/code&gt; コマンドでは起動できる。&lt;/p&gt;

&lt;p&gt;これには &lt;code class=&quot;highlighter-rouge&quot;&gt;bootJar&lt;/code&gt; タスク実行時に起動スクリプトを含めることで対応した。&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bootJar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;launchScript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;とどめの負荷テスト&quot;&gt;とどめの負荷テスト&lt;/h2&gt;

&lt;p&gt;最後に環境にデプロイして、負荷試験を行う。
プロダクトによって指標は異なると思うので、私は以下の2種類だけ実施した。（人によって言い方が変わるので注意）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ストレステスト
    &lt;ul&gt;
      &lt;li&gt;サービス需要予測とそれ以上の瞬間最大風速を計測&lt;/li&gt;
      &lt;li&gt;できれば3点計測する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ロングランテスト
    &lt;ul&gt;
      &lt;li&gt;長期間実施してサーバリソースが枯渇しないか、周辺のコンポーネントに迷惑かけないか計測&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらをdatadog上で大きな変化がないことを確認して、終了。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回はSpring Boot 1.5のプロジェクトを 2.0にマイグレーションしてみました。&lt;/p&gt;

&lt;p&gt;大きな流れをまとめると&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;テストコード準備する&lt;/li&gt;
  &lt;li&gt;マイグレ前のアプリケーションのパフォーマンスを計測しておく&lt;/li&gt;
  &lt;li&gt;ライブラリを差し替える&lt;/li&gt;
  &lt;li&gt;単体テストを動かしながら、コンパイルエラーを取り除く&lt;/li&gt;
  &lt;li&gt;結合テストを動かしながら、実行時エラーを取り除く&lt;/li&gt;
  &lt;li&gt;サーバにデプロイする&lt;/li&gt;
  &lt;li&gt;負荷テストして、パフォーマンスが大きく変わっていないことを確認&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;負荷テスト含めて実施したため、全体としての所要時間はかかりました（1人でやって1.5weekくらい）が、コードのマイグレーション作業自体はそこまで時間がかかりませんでした。これは &lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Migration-Guide&quot;&gt;Spring Boot 2.0 Migration Guide&lt;/a&gt; の内容が以前よりも充実したことが寄与していると思う。&lt;/p&gt;

&lt;p&gt;強いて言うと、 &lt;code class=&quot;highlighter-rouge&quot;&gt;springboot-actuator&lt;/code&gt; のメトリック変更がコード以外の部分に波及したのは厄介でした。&lt;/p&gt;

&lt;p&gt;2.x自体もリリースされて日が浅いので、事故っても損害が少ないプロダクトから適用していきたいですね。&lt;/p&gt;

&lt;p&gt;そして、来るべきJava 11に早めに備えておきたい！&lt;/p&gt;

&lt;h2 id=&quot;参考にさせていただいたサイト&quot;&gt;参考にさせていただいたサイト&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Migration-Guide&quot;&gt;Spring Boot 2.0 Migration Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-with-Java-9-and-above&quot;&gt;Spring Boot with Java 9 and above&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>soudegesu</name></author><category term="springboot" /><category term="datadog" /><summary type="html">Spring Bootの2がリリースされたので、Spring Boot 2.0 Migration Guide を参考に既存のSpring Boot 1.5のプロジェクトをマイグレーションしてみた。行なったときの段取りとポイントを簡単にまとめました。</summary></entry><entry><title type="html">子持ちおとっつぁんエンジニアが朝方生活に切り替えて1年が経過した</title><link href="https://www.soudegesu.com/engineer-life/one-year-passed-since-the-early-bird-life/" rel="alternate" type="text/html" title="子持ちおとっつぁんエンジニアが朝方生活に切り替えて1年が経過した" /><published>2018-05-07T00:00:00+09:00</published><updated>2018-05-07T00:00:00+09:00</updated><id>https://www.soudegesu.com/engineer-life/one-year-passed-since-the-early-bird-life</id><content type="html" xml:base="https://www.soudegesu.com/engineer-life/one-year-passed-since-the-early-bird-life/">&lt;p&gt;2017年のゴールデンウィーク明けから私は勤務を朝方に切り替えた。このゴールデンウィークが明けてちょうど1年が経過する。
今回は子持ちのおとっつぁんエンジニアである私が1年間朝方生活をやってみて、身の回りで起きた変化や感じたことをまとめようと思う。&lt;/p&gt;

&lt;p&gt;この文章が、どこか遠くの、名前も知らないおとっつぁんエンジニアにとって1つのモデルケースになれば幸いだ。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.co.jp/gp/product/4788914727/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4788914727&amp;amp;linkCode=as2&amp;amp;tag=soudegesu-22&amp;amp;linkId=9147d66f012f84db2f7aad00296c8195&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=4788914727&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=soudegesu-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;//ir-jp.amazon-adsystem.com/e/ir?t=soudegesu-22&amp;amp;l=am2&amp;amp;o=9&amp;amp;a=4788914727&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;なお、以降は「朝方生活」を &lt;strong&gt;「アーリーバード(early bird)」&lt;/strong&gt; 、「夜型生活」を &lt;strong&gt;「ナイトオウル（night owl）」&lt;/strong&gt;  と呼ぶことにする。
アーリーバードは英語の慣用句で「早起き」「朝早く来る人」を意味している。ゴルフをする人には馴染みのある単語かもしれない（私はやらないけど）。ナイトオウルはその逆だ。
この言い換え自体に特別な意味はないが、私はこの単語が気に入っているのでそう呼ぶことにしたい。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#おとっつぁんエンジニアがアーリーバード野郎になった経緯&quot; id=&quot;markdown-toc-おとっつぁんエンジニアがアーリーバード野郎になった経緯&quot;&gt;おとっつぁんエンジニアがアーリーバード野郎になった経緯&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#家族構成とか&quot; id=&quot;markdown-toc-家族構成とか&quot;&gt;家族構成とか&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#私&quot; id=&quot;markdown-toc-私&quot;&gt;私&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#妻&quot; id=&quot;markdown-toc-妻&quot;&gt;妻&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#子供--2&quot; id=&quot;markdown-toc-子供--2&quot;&gt;子供 ✕ 2&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#それはある日突然に妻の時短勤務終了のお知らせ&quot; id=&quot;markdown-toc-それはある日突然に妻の時短勤務終了のお知らせ&quot;&gt;それはある日突然に〜妻の時短勤務終了のお知らせ〜&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#働き方改革と時差bizの大号令&quot; id=&quot;markdown-toc-働き方改革と時差bizの大号令&quot;&gt;「働き方改革」と「時差BiZ」の大号令&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1日のライフサイクル&quot; id=&quot;markdown-toc-1日のライフサイクル&quot;&gt;1日のライフサイクル&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ナイトオウル時代&quot; id=&quot;markdown-toc-ナイトオウル時代&quot;&gt;ナイトオウル時代&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#キリが良いところまでが生活誤差の原因&quot; id=&quot;markdown-toc-キリが良いところまでが生活誤差の原因&quot;&gt;「キリが良いところまで」が生活誤差の原因&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#子供を寝かしつけた後に勉強を試みた&quot; id=&quot;markdown-toc-子供を寝かしつけた後に勉強を試みた&quot;&gt;子供を寝かしつけた後に勉強を試みた&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#犠牲になるのは睡眠時間&quot; id=&quot;markdown-toc-犠牲になるのは睡眠時間&quot;&gt;犠牲になるのは睡眠時間&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#アーリーバード時代&quot; id=&quot;markdown-toc-アーリーバード時代&quot;&gt;アーリーバード時代&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#生活のリズムが概ね一定になった&quot; id=&quot;markdown-toc-生活のリズムが概ね一定になった&quot;&gt;生活のリズムが概ね一定になった&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#仕事の量を調整するようになった&quot; id=&quot;markdown-toc-仕事の量を調整するようになった&quot;&gt;仕事の量を調整するようになった&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#子供と一緒に過ごす時間は勉強やらない&quot; id=&quot;markdown-toc-子供と一緒に過ごす時間は勉強やらない&quot;&gt;子供と一緒に過ごす時間は勉強やらない&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#飲み会に行かけなくなってパフォーマンスも一定になった&quot; id=&quot;markdown-toc-飲み会に行かけなくなってパフォーマンスも一定になった&quot;&gt;飲み会に行か(け)なくなってパフォーマンスも一定になった&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#週末も睡眠のサイクルは変えない&quot; id=&quot;markdown-toc-週末も睡眠のサイクルは変えない&quot;&gt;週末も睡眠のサイクルは変えない&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#最後に&quot; id=&quot;markdown-toc-最後に&quot;&gt;最後に&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;おとっつぁんエンジニアがアーリーバード野郎になった経緯&quot;&gt;おとっつぁんエンジニアがアーリーバード野郎になった経緯&lt;/h2&gt;

&lt;h3 id=&quot;家族構成とか&quot;&gt;家族構成とか&lt;/h3&gt;

&lt;p&gt;妻と子供2人の4人暮らし。まず、家族のことを簡単に説明する必要があるだろう。&lt;/p&gt;

&lt;h4 id=&quot;私&quot;&gt;私&lt;/h4&gt;

&lt;p&gt;都内でシステムエンジニアをしている。
主な守備範囲はwebアプリケーションの設計・開発・ちょっとだけシステム監視設計と運用。&lt;/p&gt;

&lt;p&gt;転職経験数: 1&lt;/p&gt;

&lt;h4 id=&quot;妻&quot;&gt;妻&lt;/h4&gt;

&lt;p&gt;共働き。ITとは関係ない仕事に従事している。そのため、システム屋の苦労に対する理解は皆無。&lt;/p&gt;

&lt;p&gt;姉さん女房。&lt;/p&gt;

&lt;p&gt;外国語堪能。&lt;/p&gt;

&lt;p&gt;かつて、時短勤務で子供の面倒を見てくれていた。&lt;/p&gt;

&lt;h4 id=&quot;子供--2&quot;&gt;子供 ✕ 2&lt;/h4&gt;

&lt;p&gt;日中は保育園に通っている。&lt;/p&gt;

&lt;p&gt;プリキュア。プリンセスソフィア。プリンセスエレナ。仮面ライダービルドに取り憑かれている。&lt;/p&gt;

&lt;h3 id=&quot;それはある日突然に妻の時短勤務終了のお知らせ&quot;&gt;それはある日突然に〜妻の時短勤務終了のお知らせ〜&lt;/h3&gt;

&lt;p&gt;2017年度のはじめ頃、妻から相談があった。 &lt;strong&gt;「フルタイムに切り替えたい」&lt;/strong&gt; と。&lt;/p&gt;

&lt;p&gt;当時、妻は時短勤務で業務に当たっていて、時短勤務の期間終了まではまだ時間があった。&lt;/p&gt;

&lt;p&gt;もう少し話を聞いてみる。意志の源泉は  &lt;strong&gt;「転職を見据えてフルタイムに切り替えたい」&lt;/strong&gt; のようだ。&lt;/p&gt;

&lt;p&gt;妻は新卒入社した会社に勤め続け、転職経験は0。 大方、世間では「働き盛り」といわれる年代層だ。&lt;/p&gt;

&lt;p&gt;これまで、彼女は育児のために、数年間時短勤務を続けてくれていた。
加えて、残念なことに、妻が勤務している会社では &lt;strong&gt;時短勤務の人間は人事評価がされない。白羽の矢が立たない。&lt;/strong&gt; というレガシーな文化があった。&lt;/p&gt;

&lt;p&gt;これからの時代、雇用情勢の流れは読めなくなるだろうという考えは漠然とあったし、何よりも、比較的ハイスペックな妻が企業に飼い殺されているように以前から感じていた。&lt;/p&gt;

&lt;p&gt;だから私は妻の意志を尊重しようと思った。&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color: #3604E8&quot;&gt;「OK, 上司と相談してみよう。で、いつからフルタイム勤務を希望？」&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color: #FF530D&quot;&gt;「GW明けくらいかな？」&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color: #3604E8&quot;&gt;「早っ」&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;働き方改革と時差bizの大号令&quot;&gt;「働き方改革」と「時差BiZ」の大号令&lt;/h3&gt;

&lt;p&gt;ちょうどその頃、世間的にはどこもかしこも 政府の &lt;a href=&quot;http://www.mhlw.go.jp/stf/seisakunitsuite/bunya/0000148322.html&quot;&gt; &lt;strong&gt;「働き方改革」&lt;/strong&gt; &lt;/a&gt;  と、東京都の &lt;a href=&quot;https://jisa-biz.tokyo/&quot;&gt; &lt;strong&gt;「時差Biz」&lt;/strong&gt; &lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;当時の政府が推奨する働き方改革は「勤務時間をただ短くする（残業禁止）」だけの短絡的なものだったが、
法令遵守意識のある企業には効果はバツグンだった。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;社内でも 「◯◯時までには退社するように」 というルールが適用された。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;◯◯時を超えて残業をしていると上司が叱られる仕組みだ。&lt;/p&gt;

&lt;p&gt;社会的な追い風もあってか、結果的に、「朝方勤務にしたいっす」 という私の希望はあっさり通った。&lt;/p&gt;

&lt;p&gt;こうして私はアーリーバード野郎になった。&lt;/p&gt;

&lt;h2 id=&quot;1日のライフサイクル&quot;&gt;1日のライフサイクル&lt;/h2&gt;

&lt;p&gt;1日のライフサイクルがどうなったかまとめてみる。
ナイトオウル時代は、いわゆる &lt;strong&gt;Before&lt;/strong&gt; 、アーリーバード時代は &lt;strong&gt;After&lt;/strong&gt; で考えていただけると良い。&lt;/p&gt;

&lt;h3 id=&quot;ナイトオウル時代&quot;&gt;ナイトオウル時代&lt;/h3&gt;

&lt;p&gt;ぶっちゃけ、ナイトオウルを名乗るほど夜型でもなかったが、1日は以下のように過ごしていた。
なお、 グラフの凡例を簡単に説明しておく。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;タスク名&lt;/td&gt;
      &lt;td&gt;説明&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;一人タスク&lt;/td&gt;
      &lt;td&gt;一人で過ごす時間&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;with 子供タスク&lt;/td&gt;
      &lt;td&gt;子供と一緒にいる時間&lt;br /&gt;・主に育児が中心&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;仕事&lt;/td&gt;
      &lt;td&gt;会社で仕事に従事している時間&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;生活誤差&lt;/td&gt;
      &lt;td&gt;生活上で微妙に発生する時間的誤差&lt;br /&gt;・トイレ行ってて電車1本見送ったとか&lt;br /&gt;・子供が遅くてこの位時間かかるよねとか&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180507/before.png&quot; alt=&quot;before&quot; /&gt;&lt;/p&gt;

&lt;p&gt;こうやってグラフに起こしてみると、改めて自身のライフサイクルの把握が簡単にできるものだ。&lt;/p&gt;

&lt;p&gt;自戒の意味も込めて、以前の私のスケジュールのイケていなかった点を羅列しておく。&lt;/p&gt;

&lt;h4 id=&quot;キリが良いところまでが生活誤差の原因&quot;&gt;「キリが良いところまで」が生活誤差の原因&lt;/h4&gt;
&lt;p&gt;私は仕事のスタイルが「先行逃げ切り型」なので、プロジェクト序盤に案件遂行上の不確実性をなるべく減らそうとする。&lt;/p&gt;

&lt;p&gt;そこで、「キリがいいところまでやろう」と残業をしてしまうわけだが、とはいえ、タスクの量やその日のパフォーマンスに依存するため、終業時間がブレるのだ。&lt;/p&gt;

&lt;p&gt;真面目な会社員にも見えるこの思想が良くなかったのであろう。&lt;/p&gt;

&lt;h4 id=&quot;子供を寝かしつけた後に勉強を試みた&quot;&gt;子供を寝かしつけた後に勉強を試みた&lt;/h4&gt;

&lt;p&gt;独身時代には「子供」が存在しなかったため、夜に勉強しても問題なかった。
しかし、子供がいるおとっつぁんは違う。おとっつぁんは子供と一緒に布団のある部屋まで行き、子供が寝るまで見守らなければいけないのだ。&lt;/p&gt;

&lt;p&gt;風呂上がりに暗い部屋にしばらくいると睡魔にも襲われるし、仮に寝かしつけた後に勉強しようと部屋に戻っても &lt;strong&gt;「あぁ。もうこんな時間か」感&lt;/strong&gt; がやばい。&lt;/p&gt;

&lt;p&gt;そんな状態で勉強が捗るわけがない。&lt;/p&gt;

&lt;h4 id=&quot;犠牲になるのは睡眠時間&quot;&gt;犠牲になるのは睡眠時間&lt;/h4&gt;

&lt;p&gt;それでもなんとか「勉強しないと」と気合いを入れると、結局寝るのが遅くなる。
起床時間はある程度決まるから、しわ寄せは睡眠時間に来るわけだ。それは次の日のパフォーマンスに対するキックバックとしてやってくる。&lt;/p&gt;

&lt;p&gt;たまに「睡眠時間を削るな」みたいな話を聞くけど、私はそこではなくて「パフォーマンスを下げない」ことが大切だと考えている。&lt;/p&gt;

&lt;p&gt;私の場合にはパフォーマンスをキープするためには睡眠時間が必要だっただけ。&lt;/p&gt;

&lt;p&gt;残念ながら、私はショートスリーパーではないので、エナジー満タンには7時間睡眠は欲しいし、最低でも6時間寝ないと次の日のパフォーマンスに差し障る。&lt;/p&gt;

&lt;p&gt;もっと早くに実践しておけば有意義な20代を謳歌できたかもしれない。&lt;/p&gt;

&lt;h3 id=&quot;アーリーバード時代&quot;&gt;アーリーバード時代&lt;/h3&gt;

&lt;p&gt;アーリーバード時代になってからはこうなった。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180507/after.png&quot; alt=&quot;after&quot; /&gt;&lt;/p&gt;

&lt;p&gt;妻からは以下のタスクを引き取った形になる。主に &lt;code class=&quot;highlighter-rouge&quot;&gt;with 子供タスク&lt;/code&gt; だ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;子供の迎え&amp;amp;明日の保育園の準備&lt;/li&gt;
  &lt;li&gt;子供と晩飯を食べる&lt;/li&gt;
  &lt;li&gt;子供を風呂に入れる&lt;/li&gt;
  &lt;li&gt;子供を寝かしつける&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;逆に、朝の育児は妻にお願いした。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;子供を保育園に送る&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;次に、以前と比較して、ライフサイクルが大きく変わった所を書いておこうと思う。&lt;/p&gt;

&lt;h4 id=&quot;生活のリズムが概ね一定になった&quot;&gt;生活のリズムが概ね一定になった&lt;/h4&gt;

&lt;p&gt;以前と比べて、生活誤差が大幅に減ったことがわかる。それにより、以降のタスクも変に大きくブレることはなくなり、&lt;strong&gt;使える時間の把握が容易になった。&lt;/strong&gt;
睡眠時間も一定になったので、日毎のパフォーマンスのばらつきも減った。&lt;/p&gt;

&lt;p&gt;これを実現するために、&lt;strong&gt;退社時間を周囲に宣言した&lt;/strong&gt; ことは大きかったと思う。&lt;/p&gt;

&lt;p&gt;退社時間は、子供の保育園の迎え時間から逆算して決めた。保育園の迎えに間に合わなければ、さらに延長保育となってしまうからだ。&lt;/p&gt;

&lt;p&gt;「〇〇時で退社するので、打ち合わせはそれまでによろしくお願いしまーす」と宣言し、加えて、イントラのスケジュール帳は〇〇時以降「退社します」を毎日入れておく。&lt;/p&gt;

&lt;p&gt;それでも会議が退社時間を延長しようもんなら「帰りやす」と言って立ち去る。&lt;/p&gt;

&lt;p&gt;聖域的例外は認めない。&lt;/p&gt;

&lt;p&gt;正直かなりの胆力が必要だが、この徹底を1ヶ月程継続したところ、結果として、本当に私の参加が必要な打ち合わせは日中開催になり、&lt;strong&gt;保険として呼ばれる会議の数は0になった。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;会議が減少して、本来業務に充てれる時間が大幅に増えた。仕事で使う技術も一段深く理解して使用できるだけの調査時間を確保できるようになった。&lt;/p&gt;

&lt;h4 id=&quot;仕事の量を調整するようになった&quot;&gt;仕事の量を調整するようになった&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;退社時間に強制力があることで、「それまでに終わらせる」意識がより強くなった&lt;/strong&gt; ことに関連して、仕事そのものを調整するようになった。&lt;/p&gt;

&lt;p&gt;とりわけ「やらない仕事を決める」ケースは増えたと思う。&lt;/p&gt;

&lt;p&gt;「リソース(社員)をいかに最適化するか」に熱心な上司がいる職場もあるだろう。
予算管理をする人間の目線なら、ある種正しい気もするので、ここに深く言及する気はない。&lt;/p&gt;

&lt;p&gt;ただ、「リソースを遊ばせない」ことが目的になっているアサインの場合は注意が必要だ。&lt;/p&gt;

&lt;p&gt;その場合には、冷淡に突っぱねると色々可愛そうなので、ヒアリングをしてみる。
そうすると、エンジニアリング以前の問題だったりするケースもあるので「まずこれをやってみては？」と言ってみると、それで片がつくこともしばしば。&lt;/p&gt;

&lt;p&gt;だから、仕事をトリアージしてみると、&lt;strong&gt;やらなくてはいけない仕事は意外に少ない&lt;/strong&gt; ことに気づく。&lt;/p&gt;

&lt;h4 id=&quot;子供と一緒に過ごす時間は勉強やらない&quot;&gt;子供と一緒に過ごす時間は勉強やらない&lt;/h4&gt;

&lt;p&gt;子供の行動は予測不能なので、子供と過ごす時間での「ながら」作業は可能な限りやめた。育児と勉強をパラレルでやっても全く頭に入らない。
だから、子供を保育園からピックアップした後は、子供と同じことをすることにした。&lt;/p&gt;

&lt;p&gt;一緒に晩御飯を食べ、遊び、風呂に入り、寝る。&lt;/p&gt;

&lt;p&gt;打キーするくらいなら「今日保育園どうだったよ？」と聞いて上げた方が色々良い気がする。&lt;/p&gt;

&lt;p&gt;もう一度起きて夜遅くまで勉強したところで、脳みそも半分寝てるから効率悪いから、子供と一緒にグレースフルシャットダウンだ。&lt;/p&gt;

&lt;p&gt;勉強は早朝か通勤中か業務中にやれば良い、と割り切る。だから、「今日も勉強できなかったなぁ」という後悔が発生しにくい。&lt;/p&gt;

&lt;h4 id=&quot;飲み会に行かけなくなってパフォーマンスも一定になった&quot;&gt;飲み会に行か(け)なくなってパフォーマンスも一定になった&lt;/h4&gt;

&lt;p&gt;これは子供の迎えがあるから仕方ないのだが、基本飲み会に行けなくなった。
おとっつぁんの飲み会離れ自体は慣れればどうということもなく、寧ろ二日酔いでパフォーマンス悪化する日がなくなったため、仕事は安定してこなせる。
結果、お酒に少し弱くなった。&lt;/p&gt;

&lt;h4 id=&quot;週末も睡眠のサイクルは変えない&quot;&gt;週末も睡眠のサイクルは変えない&lt;/h4&gt;

&lt;p&gt;週末も同じ睡眠サイクルを取るように心がけている。早起きを体に染み込ませることで、週末の朝一番の学習効率はかなり良い。&lt;/p&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;結論から言うと、 &lt;strong&gt;アーリーバード生活は良い&lt;/strong&gt; 。結果的に外的要因でこの生活になったわけだが、今後も続けていきたいと思うし、エンジニアの人にはオススメだ。
妻には「あんたは夜型だから無理だ」と言われたが、1ヶ月も続けると体が慣れてくるので誰でもできると思う。日が長くなるこれから始めるのが良いだろう。&lt;/p&gt;

&lt;p&gt;お断りだけしておくと、&lt;strong&gt;周囲の人間の協力と、会社に対する自身の成果が一定量あるからできている&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;責任と義務、ではなくて、責任と裁量のバランス。&lt;/p&gt;

&lt;p&gt;一方で、あからさまに「周囲に迷惑をかけている」と申し訳ない感を漂わせる必要は &lt;strong&gt;ない&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;感謝でいいのだ。「あなたたちのおかげで気持ちよく仕事ができているよ！Thanks！」と。&lt;/p&gt;

&lt;p&gt;ありがとう同僚たち&amp;amp;妻よ。&lt;/p&gt;

&lt;p&gt;そして、がんばれ、おとっつぁんエンジニアのみなさん。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.co.jp/gp/product/4873113075/ref=as_li_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4873113075&amp;amp;linkCode=as2&amp;amp;tag=soudegesu-22&amp;amp;linkId=3e25a755976d46e27fd83f9535e099b3&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=JP&amp;amp;ASIN=4873113075&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=soudegesu-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;//ir-jp.amazon-adsystem.com/e/ir?t=soudegesu-22&amp;amp;l=am2&amp;amp;o=9&amp;amp;a=4873113075&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
&lt;/div&gt;</content><author><name>soudegesu</name></author><category term="engineer-life" /><summary type="html">2017年のゴールデンウィーク明けから私は勤務を朝方に切り替えた。このゴールデンウィークが明けてちょうど1年が経過する。 今回は子持ちのおとっつぁんエンジニアである私が1年間朝方生活をやってみて、身の回りで起きた変化や感じたことをまとめようと思う。</summary></entry></feed>