<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on そうなんでげす</title>
    <link>https://www.soudegesu.com/categories/aws/</link>
    <description>Recent content in Aws on そうなんでげす</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Fri, 17 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.soudegesu.com/categories/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AMI作成のPackerプロジェクトのワタシ的ベストプラクティス！</title>
      <link>https://www.soudegesu.com/aws/my-packer-best-practice/</link>
      <pubDate>Fri, 17 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.soudegesu.com/aws/my-packer-best-practice/</guid>
      <description>様々なプロジェクトで仕事をするにあたって、AWSのAMI（Amazon Machine Image）を多くつくるようになりました。 今回はPackerプロジェ</description>
    </item>
    
    <item>
      <title>Amazon Linux2にdockerをインストールする</title>
      <link>https://www.soudegesu.com/aws/amazonlinux2-docker/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.soudegesu.com/aws/amazonlinux2-docker/</guid>
      <description>AMIをAmazon Linux2に変更したのですが、 yum install docker でdockerがインストールできなくなってしまったので対処方法を調査しました。 モチ</description>
    </item>
    
    <item>
      <title>AWS Batchで前処理をしてGlue CrawlerでAthenaのスキーマを作成する</title>
      <link>https://www.soudegesu.com/aws/aws-batch-and-glue/</link>
      <pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.soudegesu.com/aws/aws-batch-and-glue/</guid>
      <description>以前、 S3にエクスポートされたCloudWatch LogsのファイルをGlueのCrawlerでETLしようとして轟沈した話 でGlueを少し</description>
    </item>
    
    <item>
      <title>S3にエクスポートされたCloudWatch LogsのファイルをGlueのCrawlerでETLしようとして轟沈した話</title>
      <link>https://www.soudegesu.com/aws/glue-process-cloudwatchlogs/</link>
      <pubDate>Wed, 30 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.soudegesu.com/aws/glue-process-cloudwatchlogs/</guid>
      <description>S3にエクスポートした CloudWatch Logs のログストリームをAWS GlueでETLしようと挑戦してみました。 結論から言うと、GlueのCrawlerでログを</description>
    </item>
    
    <item>
      <title>Step FunctionsでCloudWatch LogsのロググループをS3へエクスポートする</title>
      <link>https://www.soudegesu.com/aws/export-cloudwatchlogs-to-s3/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.soudegesu.com/aws/export-cloudwatchlogs-to-s3/</guid>
      <description>CloudWatch LogsにはロググループをS3にエクスポートする機能がついています。 しかし、エクスポート機能には同時実行数制限があるので、 今回は Step Functions を使っ</description>
    </item>
    
    <item>
      <title>TerraformでS3のバケットポリシーを書く方法</title>
      <link>https://www.soudegesu.com/aws/s3bucket-policy-with-terraform/</link>
      <pubDate>Mon, 21 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.soudegesu.com/aws/s3bucket-policy-with-terraform/</guid>
      <description>インフラのコード化を進める作業では、コード化のライブラリ作法に倣うため、ドキュメントを見ながら設定を書いていくことが多いです。 Terraform も例外ではな</description>
    </item>
    
    <item>
      <title>MySQL/PostgreSQLの脆弱性が発表された時に、RDS Aurora使いはどう対処すべきか</title>
      <link>https://www.soudegesu.com/aws/aurora-security/</link>
      <pubDate>Tue, 24 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.soudegesu.com/aws/aurora-security/</guid>
      <description>アプリケーションの脆弱性対応は調査にも時間がかかりますし、大変ですよね。RDS Auroraのようなマネージドサービスの場合、互換性のあるデー</description>
    </item>
    
    <item>
      <title>AWS LambdaでCasperJSを実行してファイルアップロードを自動化する</title>
      <link>https://www.soudegesu.com/aws/casperjs-on-lambda/</link>
      <pubDate>Mon, 23 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.soudegesu.com/aws/casperjs-on-lambda/</guid>
      <description>AWS上のデータを別サービスに連携するために、AWS LambdaからCasperJSを使ってファイル配置を自動化する仕組みを作ってみました。</description>
    </item>
    
    <item>
      <title>クロスアカウントで共有されたS3バケットはAWSコンソール上から参照可能なのか</title>
      <link>https://www.soudegesu.com/aws/s3-cross-account/</link>
      <pubDate>Fri, 13 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.soudegesu.com/aws/s3-cross-account/</guid>
      <description>AWS S3はバケットポリシーを設定することで、クロスアカウントでのバケット共有ができます。 設定により、複数のアカウントからバケットに対して操作を</description>
    </item>
    
    <item>
      <title>AWS LambdaのコードをTerraformでデプロイする</title>
      <link>https://www.soudegesu.com/aws/deploy-lambda-with-terraform/</link>
      <pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.soudegesu.com/aws/deploy-lambda-with-terraform/</guid>
      <description>今更感もありますが、今日はTerraformでのAWS Lambdaのコード化について書きます。 AWS Lambdaは Cloud9 がコンソール上に組み込まれた</description>
    </item>
    
    <item>
      <title>Cloudfront&#43;Lambda@Edgeのサーバレス構成で費用を抑えつつ、動的なWEBコンテンツを作ろう[貧テック]</title>
      <link>https://www.soudegesu.com/aws/hosting-with-cloudfront-lambda-edge-serverless/</link>
      <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.soudegesu.com/aws/hosting-with-cloudfront-lambda-edge-serverless/</guid>
      <description>このブログ自体は github-pages と cloudflare を使って無料でホスティングをしているのですが、稀に 「動的なwebコンテンツを提供したい」 と思うことがあります。今回はお</description>
    </item>
    
    <item>
      <title>AWS RDS Aurora Cluster(MySQL互換)でパーティションをプロシージャで定期的に追加しつつ、エラーハンドリングもする</title>
      <link>https://www.soudegesu.com/aws/rds-aurora-cluster-partitioning-procedure/</link>
      <pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.soudegesu.com/aws/rds-aurora-cluster-partitioning-procedure/</guid>
      <description>AWSのRDS AuroraはOSSのDBミドルウェアと互換性のあるマネージドサービスです。 今回はAuroraのMySQL互換での日付パー</description>
    </item>
    
    <item>
      <title>AWS Certification ManagerのSSL証明書の検証にはDNS検証を使った方が良い</title>
      <link>https://www.soudegesu.com/aws/validate-certification-manager/</link>
      <pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.soudegesu.com/aws/validate-certification-manager/</guid>
      <description>Route53でCertification Managerのドメイン検証ができるようになった DNS を使って AWS Certificate Manager の検証を簡単に の記事にも記載がある</description>
    </item>
    
  </channel>
</rss>